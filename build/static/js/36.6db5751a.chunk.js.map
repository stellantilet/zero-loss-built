{"version":3,"sources":["components/ExpandableSectionButton/ExpandableSectionButton.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/EmWithdrawModal.tsx","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","components/Modal/Spacer.tsx","components/Modal/ModalActions.tsx","components/Modal/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/hooks/useUnstakeFarms.ts","views/Farms/hooks/useStakeFarms.ts","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/hooks/useHarvestFarm.ts","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/hooks/useApproveFarm.ts","views/Farms/components/FarmCard/Countdown/Timer.tsx","views/Farms/components/FarmCard/Countdown/index.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/types.ts","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/ToggleView/ToggleView.tsx","views/Farms/Farms.tsx"],"names":["Wrapper","styled","div","theme","colors","primary","ExpandableSectionButton","onClick","expanded","t","useTranslation","role","color","bold","defaultProps","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","wBnbAddress","tokens","wbnb","address","secondPart","Divider","backgroundDisabled","EmWithdrawModal","onDismiss","PID","account","useWeb3React","useTheme","useToast","toastError","toastSuccess","useCakeVaultContract","useState","pendingTx","setPendingTx","useCakeVault","estimatedCakeBountyReward","totalPendingCakeHarvest","cakePriceBusd","fees","callFee","useCallWithGasPrice","callWithGasPrice","usePriceCakeBusd","estimatedDollarBountyReward","getBalanceNumber","useMemo","BigNumber","multipliedBy","hasFetchedDollarBounty","gte","hasFetchedCakeBounty","masterChefContract","useMasterchef","handleConfirmClick","a","emergencyWithdraw","tx","wait","title","headerBackground","gradients","cardHeader","alignItems","justifyContent","isLoading","endIcon","spin","mb","id","ConnectWalletButton","StyledLinkExternal","LinkExternal","DetailsSection","farm","bscScanAddress","infoAddress","removed","totalValueFormatted","totalLpValueFormatted","lpLabel","addLiquidityUrl","useModal","pid","onEmergencyWithdraw","width","height","href","variant","p","Flex","CardHeading","Tag","token","multiplier","isCommunityFarm","quoteToken","primaryToken","secondaryToken","flexDirection","StyledSpacer","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledTokenInput","input","isWarning","shadows","warning","inset","text","StyledInput","Input","mediaQueries","xs","sm","StyledErrorMessage","Text","ModalInput","max","symbol","onChange","onSelectMax","value","inputTitle","decimals","isBalanceZero","style","position","pl","fontSize","balance","balanceUnits","parseUnits","formatBigNumber","displayBalance","pattern","inputMode","step","min","placeholder","scale","mr","external","DepositModal","stakedBalance","onConfirm","tokenName","displayApr","lpPrice","apr","cakePrice","val","setVal","showRoiCalculator","setShowRoiCalculator","fullBalance","getFullDisplayBalance","lpTokensToStake","fullBalanceNumber","usdToStake","times","interestBreakdown","getInterestBreakdown","principalInUSD","isNaN","toNumber","earningTokenPrice","annualRoi","handleChange","formatNumber","gt","useCallback","e","currentTarget","validity","valid","replace","handleSelectMax","RoiCalculatorModal","linkLabel","stakingTokenBalance","plus","stakingTokenSymbol","stakingTokenPrice","linkHref","isFarm","initialValue","onBack","disabled","isFinite","eq","console","error","mt","maxWidth","alignSelf","WithdrawModal","valNumber","useUnstakeFarms","onUnstake","amount","unstakeFarm","useStakeFarms","onStake","stakeFarm","txHash","info","IconButtonWrapper","StakeAction","tokenBalance","withdrawLocked","onStaked","location","useLocation","dispatch","useAppDispatch","useLpTokenPrice","handleStake","fetchFarmUserDataAsync","pids","handleUnstake","stakedBalanceBigNumber","getBalanceAmount","lt","toFixed","ROUND_DOWN","onPresentDeposit","onPresentWithdraw","Balance","unit","prefix","some","item","pathname","includes","useHarvestFarm","farmPid","onReward","harvestFarm","StyledButton","Button","HarvestAction","earnings","canHarvest","rawEarningsBalance","BIG_ZERO","earningsBusd","useApproveFarm","lpContract","onApprove","ethers","constants","MaxUint256","receipt","status","StyledTimerFlex","showTooltip","textSubtle","Timer","minutes","hours","days","HeadingTextComponent","BodyTextComponent","Boolean","suffix","blockNumber","xl","StyledHeading","Heading","Countdown","secondsRemaining","getTimePeriods","seconds","background","gold","$fill","_","Action","CardActions","requestedApproval","setRequestedApproval","lpAddresses","userData","allowance","lastDepositTime","lpAddress","getAddress","isApproved","isGreaterThan","useERC20","handleApprove","lastDepositTimeVal","utcNow","Date","now","setSecondsRemaining","isCountingdown","startCountingValue","deadLine","countDownVisibility","setTimeout","clearTimeout","timer","textTransform","pr","display","lpSymbol","ApyLabelContainer","ApyButton","useFarmUser","onPresentApyModal","event","stopPropagation","ml","fill","StyledCard","Card","FarmCardInnerContainer","ExpandingWrapper","cardBorder","FarmCard","index","showExpandableSection","setShowExpandableSection","liquidity","toLocaleString","undefined","maximumFractionDigits","totlaLpTokenValueFormatted","lpTotalInQuoteToken","toUpperCase","ContractAddress","StakingContractAddress","isPromotedFarm","isActive","isCommunity","border","borderColor","borderRadius","padding","top","right","toString","CardActionsContainer","getBscScanLink","Container","AprWrapper","Apr","originalValue","hideButton","liquidityUrlPathParts","BASE_ADD_LIQUIDITY_URL","TokenWrapper","Farm","label","rawStakedBalance","Amount","span","earned","textDisabled","Earned","userDataReady","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isDesktop","useMatchBreakpoints","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","toLowerCase","tooltipContent","my","useTooltip","placement","tooltipOffset","targetRef","tooltip","tooltipVisible","ref","LiquidityWrapper","Liquidity","displayLiquidity","Number","ActionContainer","ActionTitles","ActionContent","earningsBigNumber","isZero","Staked","marginBottom","marginTop","expandAnimation","keyframes","collapseAnimation","css","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","dual","bsc","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","name","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","useDelayedUnmount","toggleActionPanel","useEffect","isMobile","isSmallerScreen","tableSchema","columnNames","column","Object","keys","key","columnIndex","indexOf","createElement","colSpan","card","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","useRef","data","columns","rows","useTable","sortColumn","row","original","current","scrollIntoView","behavior","FarmTabButtons","activeIndex","hasStakeInFinishedFarms","url","useRouteMatch","as","Link","to","show","ToggleView","viewMode","onToggle","handleToggle","mode","ViewMode","CARD","TABLE","GlobalStyles","createGlobalStyle","ControlContainer","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","getDisplayApr","Image","cakeRewardsApr","lpRewardsApr","Farms","path","useFarms","farmsLP","userDataLoaded","query","setQuery","useUserFarmsViewMode","setViewMode","sortOption","setSortOption","useIntersectionObserver","observerRef","isIntersecting","chosenFarmsLength","isArchived","isInactive","usePollFarmsWithUserData","useUserFarmStakedOnly","stakedOnly","setStakedOnly","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","quoteTokenPriceBusd","totalLiquidity","getFarmApr","poolWeight","ChainId","MAINNET","tokenPerBlock","lowercaseQuery","latinise","numberOfFarmsVisible","setNumberOfFarmsVisible","chosenFarmsMemoized","chosenFarms","farms","orderBy","slice","sortFarms","farmsCurrentlyVisible","rowData","split","PageHeader","className","Page","checked","Select","options","onOptionChange","option","marginLeft","SearchInput","target","sort","b","exact","renderContent","Loading"],"mappings":"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","file":"static/js/36.6db5751a.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nexport interface ExpandableSectionButtonProps {\r\n  onClick?: () => void\r\n  expanded?: boolean\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n\r\n  svg {\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Wrapper aria-label={t('Hide or show expandable content')} role=\"button\" onClick={() => onClick()}>\r\n      <Text color=\"gold\" bold>\r\n        {expanded ? t('Hide') : t('Details')}\r\n      </Text>\r\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nExpandableSectionButton.defaultProps = {\r\n  expanded: false,\r\n}\r\n\r\nexport default ExpandableSectionButton\r\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\r\n// Each part of the url represents a different side of the LP pair.\r\nimport tokens from 'config/constants/tokens'\r\n\r\nconst getLiquidityUrlPathParts = ({\r\n  quoteTokenAddress,\r\n  tokenAddress,\r\n}: {\r\n  quoteTokenAddress: string\r\n  tokenAddress: string\r\n}): string => {\r\n  const wBnbAddress = tokens.wbnb.address\r\n  const firstPart = !quoteTokenAddress || quoteTokenAddress === wBnbAddress ? 'BNB' : quoteTokenAddress\r\n  const secondPart = !tokenAddress || tokenAddress === wBnbAddress ? 'BNB' : tokenAddress\r\n  return `${firstPart}/${secondPart}`\r\n}\r\n\r\nexport default getLiquidityUrlPathParts\r\n","import React, { useMemo, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, Flex, Button, HelpIcon, AutoRenewIcon, useTooltip } from '@pancakeswap/uikit'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useCakeVaultContract, useMasterchef } from 'hooks/useContract'\r\nimport useTheme from 'hooks/useTheme'\r\nimport useToast from 'hooks/useToast'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\nimport Balance from 'components/Balance'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport { useCakeVault } from 'state/pools/hooks'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\nimport { emergencyWithdraw } from 'utils/calls/farms'\r\n\r\ninterface EmWithdrawModalProps {\r\n  onDismiss?: () => void\r\n  PID: number\r\n}\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.backgroundDisabled};\r\n  height: 1px;\r\n  margin: 16px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst EmWithdrawModal: React.FC<EmWithdrawModalProps> = ({ onDismiss, PID }) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const { theme } = useTheme()\r\n  const { toastError, toastSuccess } = useToast()\r\n  const cakeVaultContract = useCakeVaultContract()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const {\r\n    estimatedCakeBountyReward,\r\n    totalPendingCakeHarvest,\r\n    fees: { callFee },\r\n  } = useCakeVault()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const callFeeAsDecimal = callFee / 100\r\n  const totalYieldToDisplay = getBalanceNumber(totalPendingCakeHarvest, 18)\r\n\r\n  const estimatedDollarBountyReward = useMemo(() => {\r\n    return new BigNumber(estimatedCakeBountyReward).multipliedBy(cakePriceBusd)\r\n  }, [cakePriceBusd, estimatedCakeBountyReward])\r\n\r\n  const hasFetchedDollarBounty = estimatedDollarBountyReward.gte(0)\r\n  const hasFetchedCakeBounty = estimatedCakeBountyReward ? estimatedCakeBountyReward.gte(0) : false\r\n  const dollarBountyToDisplay = hasFetchedDollarBounty ? getBalanceNumber(estimatedDollarBountyReward, 18) : 0\r\n  const cakeBountyToDisplay = hasFetchedCakeBounty ? getBalanceNumber(estimatedCakeBountyReward, 18) : 0\r\n\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleConfirmClick = async () => {\r\n    setPendingTx(true)\r\n    try {\r\n      const tx = await emergencyWithdraw(masterChefContract, PID)\r\n      const receipt = await tx.wait()\r\n      setPendingTx(false)\r\n      onDismiss()\r\n    } catch (error) {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      onDismiss()\r\n      setPendingTx(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal title={t('Emergency Withdraw?')} onDismiss={onDismiss} headerBackground={theme.colors.gradients.cardHeader}>\r\n      <Flex alignItems=\"flex-start\" justifyContent=\"space-between\">\r\n        <Text>{t('Do you really want to emergency withdraw?')}</Text>\r\n      </Flex>\r\n      <Divider />\r\n      {account ? (\r\n        <Button\r\n          isLoading={pendingTx}\r\n          endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n          onClick={handleConfirmClick}\r\n          mb=\"28px\"\r\n          id=\"autoCakeConfirmBounty\"\r\n        >\r\n          {pendingTx ? t('Confirming') : t('Confirm')}\r\n        </Button>\r\n        \r\n      ) : (\r\n        <ConnectWalletButton mb=\"28px\" />\r\n      )}\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default EmWithdrawModal\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, Button, LinkExternal, Skeleton, Link, useModal } from '@pancakeswap/uikit'\r\nimport { DeserializedFarm } from 'state/types'\r\nimport EmWithdrawModal from '../EmWithdrawModal'\r\n\r\nexport interface FarmWithStakedValue extends DeserializedFarm {\r\n  apr?: number\r\n}\r\n\r\nexport interface ExpandableSectionProps {\r\n  farm: FarmWithStakedValue\r\n  bscScanAddress?: string\r\n  infoAddress?: string\r\n  removed?: boolean\r\n  totalValueFormatted?: string\r\n  totalLpValueFormatted?: string\r\n  lpLabel?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  farm,\r\n  bscScanAddress,\r\n  infoAddress,\r\n  removed,\r\n  totalValueFormatted,\r\n  totalLpValueFormatted,\r\n  lpLabel,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const { t } = useTranslation()\r\n\r\n  const [onEmergencyWithdraw] = useModal(<EmWithdrawModal PID={farm.pid} />)\r\n  \r\n  return (\r\n    <Wrapper>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text color=\"gold\">{`Total ${lpLabel} Staked`}:</Text>\r\n        {totalLpValueFormatted ? <Text color=\"gold\">{totalLpValueFormatted}</Text> : <Skeleton width={75} height={25} />}\r\n      </Flex>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text color=\"gold\">{t('Total Liquidity')}:</Text>\r\n        {totalValueFormatted ? <Text color=\"gold\">{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\r\n      </Flex>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text color=\"gold\">{t('Deposit Fee')}:</Text>\r\n        {'-' ? <Text color=\"gold\">-</Text> : <Skeleton width={75} height={25} />}\r\n      </Flex>\r\n      {!removed && (\r\n        <Flex mb=\"2px\" justifyContent=\"flex-end\">\r\n          <StyledLinkExternal href={addLiquidityUrl}>{`Get ${lpLabel}`}</StyledLinkExternal>\r\n        </Flex>\r\n      )}\r\n      <Flex mb=\"2px\" justifyContent=\"flex-end\">\r\n        <StyledLinkExternal href={bscScanAddress}>{t('View Contract')}</StyledLinkExternal>\r\n      </Flex>\r\n      <Flex mb=\"2px\" justifyContent=\"flex-end\">\r\n        <StyledLinkExternal href={infoAddress}>{t('See Pair Info')}</StyledLinkExternal>\r\n      </Flex>\r\n      <Flex justifyContent=\"flex-end\">\r\n          <Button\r\n            variant=\"text\"\r\n            p=\"0\"\r\n            height=\"auto\"\r\n            onClick={onEmergencyWithdraw}\r\n          >\r\n            <Text color=\"gold\">\r\n              {t('Emergency Withdrawal')}\r\n            </Text>\r\n          </Button>\r\n          \r\n        </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading, Skeleton } from '@pancakeswap/uikit'\r\nimport { Token } from '@pancakeswap/sdk'\r\nimport { CommunityTag, CoreTag } from 'components/Tags'\r\nimport { TokenPairImage } from 'components/TokenImage'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  isCommunityFarm?: boolean\r\n  token: Token\r\n  quoteToken: Token\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  svg {\r\n    margin-right: 4px;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({ lpLabel, multiplier, isCommunityFarm, token, quoteToken }) => {\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={64} height={64} />\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n        <Heading mb=\"4px\" color=\"gold\">{lpLabel}</Heading>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","import React, { useContext } from 'react'\r\nimport styled, { ThemeContext } from 'styled-components'\r\n\r\ninterface SpacerProps {\r\n  size?: 'sm' | 'md' | 'lg'\r\n}\r\n\r\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\r\n  const { spacing } = useContext(ThemeContext)\r\n\r\n  let s: number\r\n  switch (size) {\r\n    case 'lg':\r\n      s = spacing[6]\r\n      break\r\n    case 'sm':\r\n      s = spacing[2]\r\n      break\r\n    case 'md':\r\n    default:\r\n      s = spacing[4]\r\n  }\r\n\r\n  return <StyledSpacer size={s} />\r\n}\r\n\r\ninterface StyledSpacerProps {\r\n  size: number\r\n}\r\n\r\nconst StyledSpacer = styled.div<StyledSpacerProps>`\r\n  height: ${(props) => props.size}px;\r\n  width: ${(props) => props.size}px;\r\n`\r\n\r\nexport default Spacer\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport Spacer from './Spacer'\r\n\r\nconst ModalActions: React.FC = ({ children }) => {\r\n  const l = React.Children.toArray(children).length\r\n  return (\r\n    <StyledModalActions>\r\n      {React.Children.map(children, (child, i) => (\r\n        <>\r\n          <StyledModalAction>{child}</StyledModalAction>\r\n          {i < l - 1 && <Spacer />}\r\n        </>\r\n      ))}\r\n    </StyledModalActions>\r\n  )\r\n}\r\n\r\nconst StyledModalActions = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\r\n  display: flex;\r\n  margin: 0;\r\n  padding: ${(props) => props.theme.spacing[4]}px 0;\r\n`\r\n\r\nconst StyledModalAction = styled.div`\r\n  flex: 1;\r\n`\r\n\r\nexport default ModalActions\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { parseUnits } from 'ethers/lib/utils'\r\nimport { formatBigNumber } from 'utils/formatBalance'\r\n\r\ninterface ModalInputProps {\r\n  max: string\r\n  symbol: string\r\n  onSelectMax?: () => void\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  value: string\r\n  addLiquidityUrl?: string\r\n  inputTitle?: string\r\n  decimals?: number\r\n}\r\n\r\nconst getBoxShadow = ({ isWarning = false, theme }) => {\r\n  if (isWarning) {\r\n    return theme.shadows.warning\r\n  }\r\n\r\n  return theme.shadows.inset\r\n}\r\n\r\nconst StyledTokenInput = styled.div<InputProps>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  box-shadow: ${getBoxShadow};\r\n  color: ${({ theme }) => theme.colors.text};\r\n  padding: 8px 16px 8px 0;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledInput = styled(Input)`\r\n  box-shadow: none;\r\n  width: 60px;\r\n  margin: 0 8px;\r\n  padding: 0 8px;\r\n  border: none;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xs} {\r\n    width: 80px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n  }\r\n`\r\n\r\nconst StyledErrorMessage = styled(Text)`\r\n  position: absolute;\r\n  bottom: -22px;\r\n  a {\r\n    display: inline;\r\n  }\r\n`\r\n\r\nconst ModalInput: React.FC<ModalInputProps> = ({\r\n  max,\r\n  symbol,\r\n  onChange,\r\n  onSelectMax,\r\n  value,\r\n  addLiquidityUrl,\r\n  inputTitle,\r\n  decimals = 18,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const isBalanceZero = max === '0' || !max\r\n\r\n  const displayBalance = (balance: string) => {\r\n    if (isBalanceZero) {\r\n      return '0'\r\n    }\r\n\r\n    const balanceUnits = parseUnits(balance, decimals)\r\n    return formatBigNumber(balanceUnits, decimals, decimals)\r\n  }\r\n\r\n  return (\r\n    <div style={{ position: 'relative' }}>\r\n      <StyledTokenInput isWarning={isBalanceZero}>\r\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\r\n          <Text fontSize=\"14px\">{inputTitle}</Text>\r\n          <Text fontSize=\"14px\">{t('Balance: %balance%', { balance: displayBalance(max) })}</Text>\r\n        </Flex>\r\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\r\n          <StyledInput\r\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\r\n            inputMode=\"decimal\"\r\n            step=\"any\"\r\n            min=\"0\"\r\n            onChange={onChange}\r\n            placeholder=\"0\"\r\n            value={value}\r\n          />\r\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\r\n            {t('Max')}\r\n          </Button>\r\n          <Text fontSize=\"16px\">{symbol}</Text>\r\n        </Flex>\r\n      </StyledTokenInput>\r\n      {isBalanceZero && (\r\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\r\n          {t('No tokens to stake')}:{' '}\r\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\r\n            {t('Get %symbol%', { symbol })}\r\n          </Link>\r\n        </StyledErrorMessage>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ModalInput\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Text, Button, Modal, Message, LinkExternal, CalculateIcon, IconButton } from '@pancakeswap/uikit'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { ModalActions, ModalInput } from 'components/Modal'\r\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getFullDisplayBalance, formatNumber } from 'utils/formatBalance'\r\nimport useToast from 'hooks/useToast'\r\nimport { getInterestBreakdown } from 'utils/compoundApyHelpers'\r\n\r\nconst AnnualRoiContainer = styled(Flex)`\r\n  cursor: pointer;\r\n`\r\n\r\nconst AnnualRoiDisplay = styled(Text)`\r\n  width: 72px;\r\n  max-width: 72px;\r\n  overflow: hidden;\r\n  text-align: right;\r\n  text-overflow: ellipsis;\r\n`\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  stakedBalance: BigNumber\r\n  multiplier?: string\r\n  lpPrice: BigNumber\r\n  lpLabel?: string\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  apr?: number\r\n  displayApr?: string\r\n  addLiquidityUrl?: string\r\n  cakePrice?: BigNumber\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({\r\n  max,\r\n  stakedBalance,\r\n  onConfirm,\r\n  onDismiss,\r\n  tokenName = '',\r\n  multiplier,\r\n  displayApr,\r\n  lpPrice,\r\n  lpLabel,\r\n  apr,\r\n  addLiquidityUrl,\r\n  cakePrice,\r\n}) => {\r\n  const [val, setVal] = useState('')\r\n  const { toastSuccess, toastError } = useToast()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const [showRoiCalculator, setShowRoiCalculator] = useState(false)\r\n  const { t } = useTranslation()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const { theme } = useTheme()\r\n\r\n  const lpTokensToStake = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n  const usdToStake = lpTokensToStake.times(lpPrice)\r\n\r\n  const interestBreakdown = getInterestBreakdown({\r\n    principalInUSD: !lpTokensToStake.isNaN() ? usdToStake.toNumber() : 0,\r\n    apr,\r\n    earningTokenPrice: cakePrice.toNumber(),\r\n  })\r\n\r\n  const annualRoi = cakePrice.times(interestBreakdown[3])\r\n  const formattedAnnualRoi = formatNumber(\r\n    annualRoi.toNumber(),\r\n    annualRoi.gt(10000) ? 0 : 2,\r\n    annualRoi.gt(10000) ? 0 : 2,\r\n  )\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  if (showRoiCalculator) {\r\n    return (\r\n      <RoiCalculatorModal\r\n        linkLabel={t('Get %symbol%', { symbol: lpLabel })}\r\n        stakingTokenBalance={stakedBalance.plus(max)}\r\n        stakingTokenSymbol={tokenName}\r\n        stakingTokenPrice={lpPrice.toNumber()}\r\n        earningTokenPrice={cakePrice.toNumber()}\r\n        apr={apr}\r\n        multiplier={multiplier}\r\n        displayApr={displayApr}\r\n        linkHref={addLiquidityUrl}\r\n        isFarm\r\n        initialValue={val}\r\n        onBack={() => setShowRoiCalculator(false)}\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Modal \r\n    title={t('Stake LP tokens')} \r\n    onDismiss={onDismiss}\r\n    headerBackground={theme.colors.gradients.cardHeader}\r\n    >\r\n      <ModalInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        inputTitle={t('Stake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          width=\"100%\"\r\n          disabled={\r\n            pendingTx || !lpTokensToStake.isFinite() || lpTokensToStake.eq(0) || lpTokensToStake.gt(fullBalanceNumber)\r\n          }\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            try {\r\n              await onConfirm(val)\r\n              toastSuccess(t('Staked!'), t('Your funds have been staked in the farm'))\r\n              onDismiss()\r\n            } catch (e) {\r\n              toastError(\r\n                t('Error'),\r\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n              )\r\n              console.error(e)\r\n            } finally {\r\n              setPendingTx(false)\r\n            }\r\n          }}\r\n        >\r\n          {pendingTx ? t('Confirming') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n      <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\" style={{ maxWidth: '420px' }}>\r\n        <Message variant=\"warning\" mb=\"24px\">\r\n          <Text>\r\n            {t(\"Note: Depositing additional LP tokens will reset the lock so that ALL deposited tokens will unlock at the same time.\",\r\n            )}\r\n          </Text>\r\n        </Message>\r\n      </Flex>\r\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\r\n        {t('Get %symbol%', { symbol: tokenName })}\r\n      </LinkExternal>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap/uikit'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { ModalActions, ModalInput } from 'components/Modal'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\nimport useToast from 'hooks/useToast'\r\n\r\ninterface WithdrawModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\r\n  const [val, setVal] = useState('')\r\n  const { toastSuccess, toastError } = useToast()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { t } = useTranslation()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const valNumber = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n  const { theme } = useTheme()\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={t('Unstake LP tokens')}\r\n    onDismiss={onDismiss}\r\n    headerBackground={theme.colors.gradients.cardHeader}\r\n    >\r\n      <ModalInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        inputTitle={t('Unstake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            try {\r\n              await onConfirm(val)\r\n              toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\r\n              onDismiss()\r\n            } catch (e) {\r\n              toastError(\r\n                t('Error'),\r\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n              )\r\n              console.error(e)\r\n            } finally {\r\n              setPendingTx(false)\r\n            }\r\n          }}\r\n          width=\"100%\"\r\n        >\r\n          {pendingTx ? t('Confirming') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","import { useCallback } from 'react'\r\nimport { unstakeFarm } from 'utils/calls'\r\nimport { useMasterchef } from 'hooks/useContract'\r\n\r\nconst useUnstakeFarms = (pid: number) => {\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      await unstakeFarm(masterChefContract, pid, amount)\r\n    },\r\n    [masterChefContract, pid],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport default useUnstakeFarms\r\n","import { useCallback } from 'react'\r\nimport { stakeFarm } from 'utils/calls'\r\nimport { useMasterchef } from 'hooks/useContract'\r\n\r\nconst useStakeFarms = (pid: number) => {\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await stakeFarm(masterChefContract, pid, amount)\r\n      console.info(txHash)\r\n    },\r\n    [masterChefContract, pid],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport default useStakeFarms\r\n","import React, { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap/uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport Balance from 'components/Balance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { useLpTokenPrice } from 'state/farms/hooks'\r\nimport { getBalanceAmount, getBalanceNumber } from 'utils/formatBalance'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\nimport useUnstakeFarms from '../../hooks/useUnstakeFarms'\r\nimport useStakeFarms from '../../hooks/useStakeFarms'\r\n\r\ninterface FarmCardActionsProps {\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  multiplier?: string\r\n  apr?: number\r\n  displayApr?: string\r\n  addLiquidityUrl?: string\r\n  cakePrice?: BigNumber\r\n  lpLabel?: string\r\n  withdrawLocked?: boolean\r\n  onStaked: () => void\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\r\n  stakedBalance,\r\n  tokenBalance,\r\n  tokenName,\r\n  pid,\r\n  multiplier,\r\n  apr,\r\n  displayApr,\r\n  addLiquidityUrl,\r\n  cakePrice,\r\n  lpLabel,\r\n  withdrawLocked,\r\n  onStaked,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { onStake } = useStakeFarms(pid)\r\n  const { onUnstake } = useUnstakeFarms(pid)\r\n  const location = useLocation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const lpPrice = useLpTokenPrice(tokenName)\r\n  const handleStake = async (amount: string) => {\r\n    await onStake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n\r\n    onStaked()\r\n  }\r\n\r\n  const handleUnstake = async (amount: string) => {\r\n    await onUnstake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\r\n      return '<0.0000001'\r\n    }\r\n    if (stakedBalanceBigNumber.gt(0)) {\r\n      return stakedBalanceBigNumber.toFixed(8, BigNumber.ROUND_DOWN)\r\n    }\r\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal\r\n      max={tokenBalance}\r\n      stakedBalance={stakedBalance}\r\n      onConfirm={handleStake}\r\n      tokenName={tokenName}\r\n      multiplier={multiplier}\r\n      lpPrice={lpPrice}\r\n      lpLabel={lpLabel}\r\n      apr={apr}\r\n      displayApr={displayApr}\r\n      addLiquidityUrl={addLiquidityUrl}\r\n      cakePrice={cakePrice}\r\n    />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />,\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    return stakedBalance.eq(0) ? (\r\n      <Button\r\n        onClick={onPresentDeposit}\r\n        disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n      >\r\n        {t('Stake LP')}\r\n      </Button>\r\n    ) : (\r\n      <IconButtonWrapper>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} disabled={withdrawLocked} mr=\"6px\">\r\n          <MinusIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n        <IconButton\r\n          variant=\"tertiary\"\r\n          onClick={onPresentDeposit}\r\n          disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n        >\r\n          <AddIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n      </IconButtonWrapper>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\r\n        <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\r\n        {stakedBalance.gt(0) && lpPrice.gt(0) && (\r\n          <Balance\r\n            fontSize=\"12px\"\r\n            color=\"textSubtle\"\r\n            decimals={2}\r\n            value={getBalanceNumber(lpPrice.times(stakedBalance))}\r\n            unit=\" USD\"\r\n            prefix=\"~\"\r\n          />\r\n        )}\r\n      </Flex>\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import { useCallback } from 'react'\r\nimport { harvestFarm } from 'utils/calls'\r\nimport { useMasterchef } from 'hooks/useContract'\r\n\r\nconst useHarvestFarm = (farmPid: number) => {\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    await harvestFarm(masterChefContract, farmPid)\r\n  }, [farmPid, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport default useHarvestFarm","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { Button, Flex, Heading } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport useToast from 'hooks/useToast'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport Balance from 'components/Balance'\r\nimport useHarvestFarm from '../../hooks/useHarvestFarm'\r\n\r\ninterface FarmCardActionsProps {\r\n  earnings?: BigNumber\r\n  pid?: number\r\n  canHarvest?: boolean\r\n}\r\n\r\nconst StyledButton = styled(Button)`\r\n  background: #F0B90B;\r\n`\r\n\r\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid, canHarvest }) => {\r\n  const { account } = useWeb3React()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const { t } = useTranslation()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvestFarm(pid)\r\n  const cakePrice = usePriceCakeBusd()\r\n  const dispatch = useAppDispatch()\r\n  const rawEarningsBalance = account ? getBalanceAmount(earnings) : BIG_ZERO\r\n  const displayBalance = rawEarningsBalance.toFixed(3, BigNumber.ROUND_DOWN)\r\n  const earningsBusd = rawEarningsBalance ? rawEarningsBalance.multipliedBy(cakePrice).toNumber() : 0\r\n\r\n  return (\r\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\r\n        <Heading color={rawEarningsBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n        {earningsBusd > 0 && (\r\n          <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\r\n        )}\r\n      </Flex>\r\n\r\n\r\n      <StyledButton\r\n        disabled={(!canHarvest || ( rawEarningsBalance.eq(0) || pendingTx ))}\r\n        onClick={async () => {\r\n          setPendingTx(true)\r\n          try {\r\n            await onReward()\r\n            toastSuccess(\r\n              `${t('Harvested')}!`,\r\n              t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'ZLT' }),\r\n            )\r\n          } catch (e) {\r\n            toastError(\r\n              t('Error'),\r\n              t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n            )\r\n            console.error(e)\r\n          } finally {\r\n            setPendingTx(false)\r\n          }\r\n          dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n        }}\r\n      >\r\n        {pendingTx ? t('Harvesting') : t('Harvest')}\r\n      </StyledButton>\r\n\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import { useCallback } from 'react'\r\nimport { ethers, Contract } from 'ethers'\r\nimport { useMasterchef } from 'hooks/useContract'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\n\r\nconst useApproveFarm = (lpContract: Contract) => {\r\n  const masterChefContract = useMasterchef()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n  const handleApprove = useCallback(async () => {\r\n    const tx = await callWithGasPrice(lpContract, 'approve', [masterChefContract.address, ethers.constants.MaxUint256])\r\n    const receipt = await tx.wait()\r\n    return receipt.status\r\n  }, [lpContract, masterChefContract, callWithGasPrice])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\nexport default useApproveFarm\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Heading, Text } from '@pancakeswap/uikit'\r\n\r\nexport interface TimerProps {\r\n  prefix?: string\r\n  suffix?: string\r\n  minutes?: number\r\n  hours?: number\r\n  days?: number\r\n  showTooltip?: boolean\r\n  blockNumber?: number\r\n  HeadingTextComponent?: React.ElementType\r\n  BodyTextComponent?: React.ElementType\r\n}\r\n\r\nconst StyledTimerFlex = styled(Flex)<{ showTooltip?: boolean }>`\r\n  ${({ theme, showTooltip }) => (showTooltip ? ` border-bottom: 1px dashed ${theme.colors.textSubtle};` : ``)}\r\n  div:last-of-type {\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Timer = ({ minutes, hours, days, showTooltip, HeadingTextComponent, BodyTextComponent }) => {\r\n  return (\r\n    <StyledTimerFlex alignItems=\"flex-end\" showTooltip={showTooltip}>\r\n      {Boolean(days) && (\r\n        <>\r\n          <HeadingTextComponent mr=\"2px\">{days}</HeadingTextComponent>\r\n          <BodyTextComponent>d</BodyTextComponent>\r\n        </>\r\n      )}\r\n      {Boolean(hours) && (\r\n        <>\r\n          <HeadingTextComponent mr=\"2px\">{hours}</HeadingTextComponent>\r\n          <BodyTextComponent>h</BodyTextComponent>\r\n        </>\r\n      )}\r\n      {Boolean(minutes) && (\r\n        <>\r\n          <HeadingTextComponent mr=\"2px\">{minutes}</HeadingTextComponent>\r\n          <BodyTextComponent>m</BodyTextComponent>\r\n        </>\r\n      )}\r\n    </StyledTimerFlex>\r\n  )\r\n}\r\n\r\n\r\nconst Wrapper: React.FC<TimerProps> = ({\r\n  prefix,\r\n  suffix,\r\n  minutes,\r\n  hours,\r\n  days,\r\n  blockNumber,\r\n  showTooltip = false,\r\n  HeadingTextComponent,\r\n  BodyTextComponent,\r\n}) => {\r\n\r\n  return (\r\n    <Flex alignItems=\"flex-end\" position=\"relative\">\r\n      <Timer\r\n        minutes={minutes}\r\n        hours={hours}\r\n        days={days}\r\n        HeadingTextComponent={HeadingTextComponent}\r\n        BodyTextComponent={BodyTextComponent}\r\n        showTooltip={showTooltip}\r\n      />\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default Wrapper\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Skeleton, PocketWatchIcon, Text, Heading } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport getTimePeriods from 'utils/getTimePeriods'\r\nimport useTheme from 'hooks/useTheme'\r\nimport Timer from './Timer'\r\n\r\nconst Wrapper = styled(Flex)`\r\n  width: fit-content;\r\n  height: fit-content;\r\n  border: 1px solid #7645d9;\r\n  box-sizing: border-box;\r\n  border-radius: 6px 6px 6px 6px;\r\n  padding: 3px 3px;\r\n\r\n  justify-content: space-around;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding: 4px 4px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    flex-direction: column;\r\n  }\r\n`\r\n\r\ninterface HeadingProps {\r\n  background?: string\r\n  $fill?: boolean\r\n}\r\nconst StyledHeading = styled(Heading)<HeadingProps>`\r\n  font-size: 16px;\r\n  margin-right: 2px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-right: 4px;\r\n  }\r\n`\r\n\r\nconst Countdown: React.FC<{ secondsRemaining: number; }> = ({\r\n  secondsRemaining,\r\n}) => {\r\n  const { theme } = useTheme()\r\n  const { t } = useTranslation()\r\n\r\n  const { minutes, hours, days, seconds } = getTimePeriods(secondsRemaining)\r\n\r\n  const renderTimer = () => {\r\n    return (\r\n      <Timer\r\n        prefix={`${t('Start')}:`}\r\n        minutes={seconds}\r\n        hours={hours}\r\n        days={days}\r\n        HeadingTextComponent={({ children }) => (\r\n          <StyledHeading background={theme.colors.gradients.gold} $fill>\r\n            {children}\r\n          </StyledHeading>\r\n        )}\r\n        BodyTextComponent={({ children }) => (\r\n          <Text bold color={theme.colors.gradients.gold} fontSize=\"12px\" mr={{ _: '8px', sm: '10px' }}>\r\n            {children}\r\n          </Text>\r\n        )}\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Flex justifyContent=\"center\" alignItems=\"center\">\r\n        {renderTimer()}\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default Countdown\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Text } from '@pancakeswap/uikit'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { DeserializedFarm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useToast from 'hooks/useToast'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\nimport useApproveFarm from '../../hooks/useApproveFarm'\r\nimport CountDown from './Countdown'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nexport interface FarmWithStakedValue extends DeserializedFarm {\r\n  apr?: number\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  account?: string\r\n  addLiquidityUrl?: string\r\n  cakePrice?: BigNumber\r\n  lpLabel?: string\r\n}\r\n\r\nconst StyledButton = styled(Button)`\r\n  background: #F0B90B;\r\n`\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl, cakePrice, lpLabel }) => {\r\n  const { t } = useTranslation()\r\n  const { toastError } = useToast()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses } = farm\r\n  const { allowance, tokenBalance, stakedBalance, earnings, lastDepositTime, canHarvest } = farm.userData || {}\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n  const dispatch = useAppDispatch()\r\n  /* Get ZLT Token Contract */\r\n  const lpContract = useERC20(lpAddress)\r\n\r\n  const { onApprove } = useApproveFarm(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n    } catch (e) {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      console.error(e)\r\n    } finally {\r\n      setRequestedApproval(false)\r\n    }\r\n  }, [onApprove, dispatch, account, pid, t, toastError])\r\n\r\n  let withdrawLocked = true\r\n  const setWithdrawLocked = (flag) => {\r\n    withdrawLocked = flag\r\n  }\r\n  // const onStaked = useCallback(() => setWithdrawLocked(false), [setWithdrawLocked])\r\n  const onStaked = () => {\r\n    withdrawLocked = false\r\n  }\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction\r\n        stakedBalance={stakedBalance}\r\n        tokenBalance={tokenBalance}\r\n        tokenName={farm.lpSymbol}\r\n        pid={pid}\r\n        apr={farm.apr}\r\n        lpLabel={lpLabel}\r\n        cakePrice={cakePrice}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        withdrawLocked={withdrawLocked}\r\n        onStaked={onStaked}\r\n      />\r\n    ) : (\r\n      <StyledButton mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove} color=\"gold\">\r\n        {t('Enable Contract')}\r\n      </StyledButton>\r\n    )\r\n  }\r\n\r\n  let lastDepositTimeVal = lastDepositTime.toNumber()\r\n  const utcNow = Date.now() / 1000;\r\n  \r\n  lastDepositTimeVal = utcNow - 1 // test code\r\n  const [secondsRemaining, setSecondsRemaining] = useState(0)\r\n\r\n  let isCountingdown = false\r\n  let timer: ReturnType<typeof setTimeout>\r\n  let startCountingValue = 0\r\n  const timerCallback = () => {\r\n    if (startCountingValue === 0) {\r\n      setSecondsRemaining(secondsRemaining - 1)\r\n      \r\n    } else {\r\n      setSecondsRemaining(startCountingValue)\r\n      startCountingValue = 0\r\n      \r\n    }\r\n    if (isCountingdown && secondsRemaining === 0) {\r\n      clearTimeout(timer)\r\n      isCountingdown = false\r\n      countDownVisibility = false\r\n    }\r\n  }\r\n\r\n  const withdrawLockPeriod = farm.pid === 0 ? 30 : (farm.pid === 1 ? 45 : 50)\r\n  const deadLine = lastDepositTimeVal + withdrawLockPeriod\r\n  let countDownVisibility = false\r\n  if (/* !account || !isApproved || */ lastDepositTimeVal === 0) {\r\n    countDownVisibility = false\r\n  } else if (lastDepositTimeVal < utcNow && utcNow < deadLine) {\r\n    countDownVisibility = true\r\n\r\n    if (isCountingdown === false) {\r\n      isCountingdown = true\r\n      startCountingValue = deadLine - utcNow\r\n      setTimeout(timerCallback, 1000)\r\n      \r\n    }\r\n  }\r\n\r\n  countDownVisibility = false\r\n  // withdrawLocked = isCountingdown\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"gold\" fontSize=\"12px\" pr=\"4px\">\r\n          ZLT\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"gold\" fontSize=\"12px\">\r\n          {t('Earned')}\r\n        </Text>\r\n      </Flex>\r\n      <HarvestAction earnings={earnings} pid={pid} canHarvest={canHarvest} />\r\n\r\n      <Flex justifyContent=\"flex-end\" style={{ display: countDownVisibility ? 'flex' : 'none'}}>\r\n        <CountDown secondsRemaining={secondsRemaining} />\r\n      </Flex>\r\n\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"gold\" fontSize=\"12px\" pr=\"4px\">\r\n          {`${farm.lpSymbol}`}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"gold\" fontSize=\"12px\">\r\n          {t('Staked')}\r\n        </Text>\r\n      </Flex>\r\n      {!account ? <ConnectWalletButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Flex, IconButton, useModal, CalculateIcon } from '@pancakeswap/uikit'\r\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useFarmUser, useLpTokenPrice } from 'state/farms/hooks'\r\n\r\nconst ApyLabelContainer = styled(Flex)`\r\n  cursor: pointer;\r\n  fill: rgba(255, 199, 0, 1);\r\n\r\n  &:hover {\r\n    opacity: 0.5;\r\n  }\r\n`\r\n\r\nexport interface ApyButtonProps {\r\n  variant: 'text' | 'text-and-button'\r\n  pid: number\r\n  lpSymbol: string\r\n  lpLabel?: string\r\n  multiplier: string\r\n  cakePrice?: BigNumber\r\n  apr?: number\r\n  displayApr?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst ApyButton: React.FC<ApyButtonProps> = ({\r\n  variant,\r\n  pid,\r\n  lpLabel,\r\n  lpSymbol,\r\n  cakePrice,\r\n  apr,\r\n  multiplier,\r\n  displayApr,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const lpPrice = useLpTokenPrice(lpSymbol)\r\n  const { tokenBalance, stakedBalance } = useFarmUser(pid)\r\n  const [onPresentApyModal] = useModal(\r\n    <RoiCalculatorModal\r\n      linkLabel={t('Get %symbol%', { symbol: lpLabel })}\r\n      stakingTokenBalance={stakedBalance.plus(tokenBalance)}\r\n      stakingTokenSymbol={lpSymbol}\r\n      stakingTokenPrice={lpPrice.toNumber()}\r\n      earningTokenPrice={cakePrice.toNumber()}\r\n      apr={apr}\r\n      multiplier={multiplier}\r\n      displayApr={displayApr}\r\n      linkHref={addLiquidityUrl}\r\n      isFarm\r\n    />,\r\n  )\r\n\r\n  const handleClickButton = (event): void => {\r\n    event.stopPropagation()\r\n    onPresentApyModal()\r\n  }\r\n\r\n  return (\r\n    <ApyLabelContainer alignItems=\"center\" onClick={handleClickButton}>\r\n      {displayApr}%\r\n      {variant === 'text-and-button' && (\r\n        <IconButton variant=\"text\" scale=\"sm\" ml=\"4px\"  >\r\n          <CalculateIcon style={{fill: '#f0bc03' }}  width=\"18px\" color=\"gold\"/>\r\n        </IconButton>\r\n      )}\r\n    </ApyLabelContainer>\r\n  )\r\n}\r\n\r\nexport default ApyButton\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { Card, Flex, Text, Skeleton, Tab, Tag, VerifiedIcon } from '@pancakeswap/uikit'\r\nimport { DeserializedFarm } from 'state/types'\r\nimport { getBscScanLink } from 'utils'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { StakingContractAddress } from 'config/constants'\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport ApyButton from './ApyButton'\r\n\r\nexport interface FarmWithStakedValue extends DeserializedFarm {\r\n  apr?: number\r\n  lpRewardsApr?: number\r\n  liquidity?: BigNumber\r\n}\r\n\r\nconst StyledCard = styled(Card)`\r\n  align-self: baseline;\r\n`\r\n\r\nconst FarmCardInnerContainer = styled(Flex)`\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 24px;\r\n  background-color: #20252d;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div`\r\n  background-color: #20252d;\r\n  padding: 24px;\r\n  border-top: 2px solid ${({ theme }) => theme.colors.cardBorder};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  index:number\r\n  farm: FarmWithStakedValue\r\n  displayApr: string\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  account?: string\r\n}\r\n\r\nconst widrawLockLabel = ['', '', '', '', '', ''];\r\nconst aprLabel = [45.89, 89.32, 123.59];\r\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, displayApr, removed, cakePrice, account, index }) => {\r\n  const { t } = useTranslation()\r\n\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  const totalValueFormatted =\r\n    farm.liquidity && farm.liquidity.gt(0)\r\n      ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 7 })}`\r\n      : ''\r\n  \r\n  const totlaLpTokenValueFormatted = farm.lpTotalInQuoteToken && farm.lpTotalInQuoteToken.gt(0)\r\n  ? `${farm.lpTotalInQuoteToken.toNumber().toLocaleString(undefined, { maximumFractionDigits: 7 })}`\r\n  : ''\r\n  \r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '');\r\n \r\n  const earnLabel = widrawLockLabel[index]/* farm.dual ? farm.dual.earnLabel : t('CAKE + Fees') */\r\n \r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: farm.quoteToken.address,\r\n    tokenAddress: farm.token.address,\r\n  })\r\n  // const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n  \r\n  const ContractAddress = getAddress(StakingContractAddress)\r\n  const lpAddress = getAddress(farm.lpAddresses)\r\n  const isPromotedFarm = farm.token.symbol === 'CAKE'\r\n  const addLiquidityUrl = `https://app.dodoex.io/earn/add-liquidity?network=bsc-mainnet&?poolAddress=${lpAddress}`\r\n  \r\n  return (\r\n    <StyledCard isActive={isPromotedFarm}>\r\n      <FarmCardInnerContainer>\r\n        <CardHeading\r\n          lpLabel={lpLabel}\r\n          multiplier={farm.multiplier}\r\n          isCommunityFarm={farm.isCommunity}\r\n          token={farm.token}\r\n          quoteToken={farm.quoteToken}\r\n        />\r\n        {!removed && (\r\n          <>\r\n          <div style={{border:\"2px solid\", borderColor: \"gold\", borderRadius: \"50px\", padding: \"0px 8px\", position: \"absolute\", top: \"4.5rem\", right: \"26px\"}} >\r\n            <Flex alignItems=\"right\">\r\n              <VerifiedIcon color=\"gold\" mr=\"4px\" />\r\n              <div style={{ color:\"gold\" }}>{t('Core')}</div>\r\n            </Flex>\r\n          </div>\r\n          <div style={{padding: \"3px\"}}>  </div>\r\n          <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n            \r\n            <Text color=\"gold\">{t('APR')}:</Text>\r\n            <Text color=\"gold\" bold style={{ display: 'flex', alignItems: 'center' }}>\r\n              {  farm.apr  ? (\r\n                <ApyButton\r\n                  variant=\"text-and-button\"\r\n                  pid={farm.pid}\r\n                  lpSymbol={farm.lpSymbol}\r\n                  multiplier={farm.multiplier}\r\n                  lpLabel={lpLabel}\r\n                  addLiquidityUrl={addLiquidityUrl}\r\n                  cakePrice={cakePrice}\r\n                  apr={  farm.apr }\r\n                  displayApr={ displayApr.toString() /* displayApr */ }\r\n                />\r\n              ) : (\r\n                <Skeleton height={24} width={80} />\r\n              )}\r\n            </Text>\r\n          </Flex>\r\n          </>\r\n        )}\r\n        <Flex justifyContent=\"space-between\">\r\n          {/* <Text color=\"gold\">{t('Withdraw Lock')}:</Text> */}\r\n          {/* <Tag variant=\"binance\" >\r\n            {earnLabel}\r\n          </Tag> */}\r\n        </Flex>\r\n        <CardActionsContainer\r\n          farm={farm}\r\n          lpLabel={lpLabel}\r\n          account={account}\r\n          cakePrice={cakePrice}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n        />\r\n\r\n      </FarmCardInnerContainer>\r\n\r\n      <ExpandingWrapper>\r\n        <ExpandableSectionButton\r\n          onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n          expanded={showExpandableSection}\r\n        />\r\n        {showExpandableSection && (\r\n          <DetailsSection\r\n            farm={farm}\r\n            removed={removed}\r\n            bscScanAddress={getBscScanLink(ContractAddress, 'address')}\r\n            infoAddress={`https://app.dodoex.io/earn/add-liquidity?network=bsc-mainnet&?poolAddress=${lpAddress}`}\r\n            totalValueFormatted={totalValueFormatted}\r\n            totalLpValueFormatted = {totlaLpTokenValueFormatted}\r\n            lpLabel={lpLabel}\r\n            addLiquidityUrl={addLiquidityUrl}\r\n          />\r\n        )}\r\n      </ExpandingWrapper>\r\n    </StyledCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\r\nimport BigNumber from 'bignumber.js'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface AprProps {\r\n  value: string\r\n  multiplier: string\r\n  pid: number\r\n  lpLabel: string\r\n  lpSymbol: string\r\n  tokenAddress?: string\r\n  quoteTokenAddress?: string\r\n  cakePrice: BigNumber\r\n  originalValue: number\r\n  hideButton?: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  color: #FFC700;\r\n\r\n  button {\r\n    width: 20px;\r\n    height: 20px;\r\n\r\n    svg {\r\n      path {\r\n        fill: ${({ theme }) => theme.colors.textSubtle};\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst AprWrapper = styled.div`\r\n  min-width: 60px;\r\n  text-align: left;\r\n  color: #FFC700;\r\n`\r\n\r\nconst Apr: React.FC<AprProps> = ({\r\n  value,\r\n  pid,\r\n  lpLabel,\r\n  lpSymbol,\r\n  multiplier,\r\n  tokenAddress,\r\n  quoteTokenAddress,\r\n  cakePrice,\r\n  originalValue,\r\n  hideButton = false,\r\n}) => {\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAddress, tokenAddress })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  return originalValue !== 0 ? (\r\n    <Container>\r\n      {originalValue ? (\r\n        <ApyButton\r\n          variant={hideButton ? 'text' : 'text-and-button'}\r\n          pid={pid}\r\n          lpSymbol={lpSymbol}\r\n          lpLabel={lpLabel}\r\n          multiplier={multiplier}\r\n          cakePrice={cakePrice}\r\n          apr={originalValue}\r\n          displayApr={value}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n        />\r\n      ) : (\r\n        <AprWrapper>\r\n          <Skeleton  width={60} />\r\n        </AprWrapper>\r\n      )}\r\n    </Container>\r\n  ) : (\r\n    <Container>\r\n      <AprWrapper>{originalValue}%</AprWrapper>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Apr\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useFarmUser } from 'state/farms/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Text } from '@pancakeswap/uikit'\r\nimport { Token } from '@pancakeswap/sdk'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { TokenPairImage } from 'components/TokenImage'\r\n\r\nexport interface FarmProps {\r\n  label: string\r\n  pid: number\r\n  token: Token\r\n  quoteToken: Token\r\n}\r\n\r\nconst Container = styled.div`\r\n  padding-left: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-left: 32px;\r\n  }\r\n`\r\n\r\nconst TokenWrapper = styled.div`\r\n  padding-right: 8px;\r\n  width: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: 40px;\r\n  }\r\n`\r\n\r\nconst Farm: React.FunctionComponent<FarmProps> = ({ token, quoteToken, label, pid }) => {\r\n  const { stakedBalance } = useFarmUser(pid)\r\n  const { t } = useTranslation()\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n\r\n  const handleRenderFarming = (): JSX.Element => {\r\n    if (rawStakedBalance) {\r\n      return (\r\n        <Text color=\"gold\" fontSize=\"12px\" bold textTransform=\"uppercase\">\r\n          {t('Farming')}\r\n        </Text>\r\n      )\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <TokenWrapper>\r\n        <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={40} height={40} />\r\n      </TokenWrapper>\r\n      <div>\r\n        {handleRenderFarming()}\r\n        <Text bold color=\"gold\">{label}</Text>\r\n      </div>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Farm\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface EarnedProps {\r\n  earnings: number\r\n  pid: number\r\n}\r\n\r\ninterface EarnedPropsWithLoading extends EarnedProps {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst Amount = styled.span<{ earned: number }>`\r\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\r\n  if (userDataReady) {\r\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\r\n  }\r\n  return (\r\n    <Amount earned={0}>\r\n      <Skeleton width={60} />\r\n    </Amount>\r\n  )\r\n}\r\n\r\nexport default Earned\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface DetailsProps {\r\n  actionPanelToggled: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: flex-end;\r\n  padding-right: 8px;\r\n  color: gold;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-right: 0px;\r\n  }\r\n`\r\n\r\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\r\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\r\n  height: 20px;\r\n`\r\n\r\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\r\n  const { t } = useTranslation()\r\n  const { isDesktop } = useMatchBreakpoints()\r\n\r\n  return (\r\n    <Container>\r\n      {!isDesktop && t('Details')}\r\n      <ArrowIcon color=\"gold\"  toggled={actionPanelToggled} />\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Details\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, HelpIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst ReferenceElement = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport interface MultiplierProps {\r\n  multiplier: string\r\n}\r\n\r\nconst MultiplierWrapper = styled.div`\r\n  color: #FFC700;\r\n  width: 36px;\r\n  text-align: right;\r\n  margin-right: 14px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: left;\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\r\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\r\n  const { t } = useTranslation()\r\n  const tooltipContent = (\r\n    <>\r\n      <Text>\r\n        {t(\r\n          'The Multiplier represents the proportion of ZLT rewards each farm receives, as a proportion of the ZLT produced each block.',\r\n        )}\r\n      </Text>\r\n      <Text my=\"24px\">\r\n        {t('For example, if a 1x farm received 1 ZLT per block, a 55x farm would receive 55 ZLT per block.')}\r\n      </Text>\r\n      <Text>{t('This amount is already included in all APR calculations for the farm.')}</Text>\r\n    </>\r\n  )\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\r\n    placement: 'top-end',\r\n    tooltipOffset: [20, 10],\r\n  })\r\n\r\n  return (\r\n    <Container>\r\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\r\n      <ReferenceElement ref={targetRef}>\r\n        <HelpIcon color=\"gold\" />\r\n      </ReferenceElement>\r\n      {tooltipVisible && tooltip}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Multiplier\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { HelpIcon, Text, Skeleton, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst ReferenceElement = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport interface LiquidityProps {\r\n  liquidity: BigNumber\r\n}\r\n\r\nconst LiquidityWrapper = styled.div`\r\n  min-width: 110px;\r\n  font-weight: 600;\r\n  text-align: right;\r\n  margin-right: 14px;\r\n  color: #FFC700;\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: left;\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\r\n  const displayLiquidity =\r\n    liquidity && liquidity.gt(0) ? (\r\n      `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    ) : (\r\n      <Skeleton width={60} />\r\n    )\r\n  const { t } = useTranslation()\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t('Total value of the funds in this farm’s liquidity pool'),\r\n    { placement: 'top-end', tooltipOffset: [20, 10] },\r\n  )\r\n\r\n  return (\r\n    <Container>\r\n      <LiquidityWrapper>\r\n        <Text color=\"gold\">{displayLiquidity}</Text>\r\n      </LiquidityWrapper>\r\n      <ReferenceElement ref={targetRef}>\r\n        <HelpIcon color=\"gold\" />\r\n      </ReferenceElement>\r\n      {tooltipVisible && tooltip}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Liquidity\r\n","import styled from 'styled-components'\r\n\r\nexport const ActionContainer = styled.div`\r\n  padding: 16px;\r\n  border: 2px solid ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  flex-grow: 1;\r\n  flex-basis: 0;\r\n  margin-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 12px;\r\n    margin-right: 12px;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    margin-left: 48px;\r\n    margin-right: 0;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n`\r\n\r\nexport const ActionTitles = styled.div`\r\n  display: flex;\r\n`\r\n\r\nexport const ActionContent = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`\r\n","import React, { useState } from 'react'\r\nimport { Button, Heading, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport Balance from 'components/Balance'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport useToast from 'hooks/useToast'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useHarvestFarm from '../../../hooks/useHarvestFarm'\r\n\r\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\r\n\r\ninterface HarvestActionProps extends FarmWithStakedValue {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({ pid, userData, userDataReady }) => {\r\n  const { toastSuccess, toastError } = useToast()\r\n  const earningsBigNumber = new BigNumber(userData.earnings)\r\n  const cakePrice = usePriceCakeBusd()\r\n  let earnings = BIG_ZERO\r\n  let earningsBusd = 0\r\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\r\n\r\n  // If user didn't connect wallet default balance will be 0\r\n  if (!earningsBigNumber.isZero()) {\r\n    earnings = getBalanceAmount(earningsBigNumber)\r\n    earningsBusd = earnings.multipliedBy(cakePrice).toNumber()\r\n    displayBalance = earnings.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }\r\n\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvestFarm(pid)\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n          ZLT\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Earned')}\r\n        </Text>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <div>\r\n          <Heading>{displayBalance}</Heading>\r\n          {earningsBusd > 0 && (\r\n            <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\r\n          )}\r\n        </div>\r\n        <Button\r\n          disabled={earnings.eq(0) || pendingTx || !userDataReady}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            try {\r\n              await onReward()\r\n              toastSuccess(\r\n                `${t('Harvested')}!`,\r\n                t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'CAKE' }),\r\n              )\r\n            } catch (e) {\r\n              toastError(\r\n                t('Error'),\r\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n              )\r\n              console.error(e)\r\n            } finally {\r\n              setPendingTx(false)\r\n            }\r\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n          }}\r\n          ml=\"4px\"\r\n        >\r\n          {pendingTx ? t('Harvesting') : t('Harvest')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, Text, Heading } from '@pancakeswap/uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport { BigNumber } from 'bignumber.js'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport Balance from 'components/Balance'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useFarmUser, useLpTokenPrice, usePriceCakeBusd } from 'state/farms/hooks'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useToast from 'hooks/useToast'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport { useAppDispatch } from 'state'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport useUnstakeFarms from '../../../hooks/useUnstakeFarms'\r\nimport DepositModal from '../../DepositModal'\r\nimport WithdrawModal from '../../WithdrawModal'\r\nimport useStakeFarms from '../../../hooks/useStakeFarms'\r\nimport useApproveFarm from '../../../hooks/useApproveFarm'\r\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n`\r\n\r\ninterface StackedActionProps extends FarmWithStakedValue {\r\n  userDataReady: boolean\r\n  lpLabel?: string\r\n  displayApr?: string\r\n}\r\n\r\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\r\n  pid,\r\n  apr,\r\n  multiplier,\r\n  lpSymbol,\r\n  lpLabel,\r\n  lpAddresses,\r\n  quoteToken,\r\n  token,\r\n  userDataReady,\r\n  displayApr,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { toastError } = useToast()\r\n  const { account } = useWeb3React()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\r\n  const { onStake } = useStakeFarms(pid)\r\n  const { onUnstake } = useUnstakeFarms(pid)\r\n  const location = useLocation()\r\n  const lpPrice = useLpTokenPrice(lpSymbol)\r\n  const cakePrice = usePriceCakeBusd()\r\n\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: quoteToken.address,\r\n    tokenAddress: token.address,\r\n  })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  const handleStake = async (amount: string) => {\r\n    await onStake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const handleUnstake = async (amount: string) => {\r\n    await onUnstake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\r\n      return stakedBalanceBigNumber.toFixed(10, BigNumber.ROUND_DOWN)\r\n    }\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\r\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\r\n    }\r\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal\r\n      max={tokenBalance}\r\n      lpPrice={lpPrice}\r\n      lpLabel={lpLabel}\r\n      apr={apr}\r\n      displayApr={displayApr}\r\n      stakedBalance={stakedBalance}\r\n      onConfirm={handleStake}\r\n      tokenName={lpSymbol}\r\n      multiplier={multiplier}\r\n      addLiquidityUrl={addLiquidityUrl}\r\n      cakePrice={cakePrice}\r\n    />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={lpSymbol} />,\r\n  )\r\n  const lpContract = useERC20(lpAddress)\r\n  const dispatch = useAppDispatch()\r\n  const { onApprove } = useApproveFarm(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n    } catch (e) {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      console.error(e)\r\n    } finally {\r\n      setRequestedApproval(false)\r\n    }\r\n  }, [onApprove, dispatch, account, pid, t, toastError])\r\n\r\n  if (!account) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n            {t('Start Farming')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <ConnectWalletButton width=\"100%\" />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (isApproved) {\r\n    if (stakedBalance.gt(0)) {\r\n      return (\r\n        <ActionContainer>\r\n          <ActionTitles>\r\n            <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n              {lpSymbol}\r\n            </Text>\r\n            <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n              {t('Staked')}\r\n            </Text>\r\n          </ActionTitles>\r\n          <ActionContent>\r\n            <div>\r\n              <Heading>{displayBalance()}</Heading>\r\n              {stakedBalance.gt(0) && lpPrice.gt(0) && (\r\n                <Balance\r\n                  fontSize=\"12px\"\r\n                  color=\"textSubtle\"\r\n                  decimals={2}\r\n                  value={getBalanceNumber(lpPrice.times(stakedBalance))}\r\n                  unit=\" USD\"\r\n                  prefix=\"~\"\r\n                />\r\n              )}\r\n            </div>\r\n            <IconButtonWrapper>\r\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n                <MinusIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n              <IconButton\r\n                variant=\"secondary\"\r\n                onClick={onPresentDeposit}\r\n                disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n              >\r\n                <AddIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n            </IconButtonWrapper>\r\n          </ActionContent>\r\n        </ActionContainer>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"4px\">\r\n            {t('Stake')}\r\n          </Text>\r\n          <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\">\r\n            {lpSymbol}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Button\r\n            width=\"100%\"\r\n            onClick={onPresentDeposit}\r\n            variant=\"secondary\"\r\n            disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n          >\r\n            {t('Stake LP')}\r\n          </Button>\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (!userDataReady) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n            {t('Start Farming')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Enable Farm')}\r\n        </Text>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\r\n          {t('Enable')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default Staked\r\n","import React from 'react'\r\nimport styled, { keyframes, css } from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { LinkExternal, Text } from '@pancakeswap/uikit'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { getBscScanLink } from 'utils'\r\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\r\n\r\nimport HarvestAction from './HarvestAction'\r\nimport StakedAction from './StakedAction'\r\nimport Apr, { AprProps } from '../Apr'\r\nimport Multiplier, { MultiplierProps } from '../Multiplier'\r\nimport Liquidity, { LiquidityProps } from '../Liquidity'\r\n\r\nexport interface ActionPanelProps {\r\n  apr: AprProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n  userDataReady: boolean\r\n  expanded: boolean\r\n}\r\n\r\nconst expandAnimation = keyframes`\r\n  from {\r\n    max-height: 0px;\r\n  }\r\n  to {\r\n    max-height: 500px;\r\n  }\r\n`\r\n\r\nconst collapseAnimation = keyframes`\r\n  from {\r\n    max-height: 500px;\r\n  }\r\n  to {\r\n    max-height: 0px;\r\n  }\r\n`\r\n\r\nconst Container = styled.div<{ expanded }>`\r\n  animation: ${({ expanded }) =>\r\n    expanded\r\n      ? css`\r\n          ${expandAnimation} 300ms linear forwards\r\n        `\r\n      : css`\r\n          ${collapseAnimation} 300ms linear forwards\r\n        `};\r\n  overflow: hidden;\r\n  background: ${({ theme }) => theme.colors.background};\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: column-reverse;\r\n  padding: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    flex-direction: row;\r\n    padding: 16px 32px;\r\n  }\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst StakeContainer = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n  }\r\n`\r\n\r\nconst TagsContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-top: 25px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-top: 16px;\r\n  }\r\n\r\n  > div {\r\n    height: 24px;\r\n    padding: 0 6px;\r\n    font-size: 14px;\r\n    margin-right: 4px;\r\n\r\n    svg {\r\n      width: 14px;\r\n    }\r\n  }\r\n`\r\n\r\nconst ActionContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    align-items: center;\r\n    flex-grow: 1;\r\n    flex-basis: 0;\r\n  }\r\n`\r\n\r\nconst InfoContainer = styled.div`\r\n  min-width: 200px;\r\n`\r\n\r\nconst ValueContainer = styled.div`\r\n  display: block;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst ValueWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  margin: 4px 0px;\r\n`\r\n\r\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\r\n  details,\r\n  apr,\r\n  multiplier,\r\n  liquidity,\r\n  userDataReady,\r\n  expanded,\r\n}) => {\r\n  const farm = details\r\n\r\n  const { t } = useTranslation()\r\n  const isActive = farm.multiplier !== '0X'\r\n  const { quoteToken, token, dual } = farm\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: quoteToken.address,\r\n    tokenAddress: token.address,\r\n  })\r\n  const lpAddress = getAddress(farm.lpAddresses)\r\n  const bsc = getBscScanLink(lpAddress, 'address')\r\n  const info = `https://app.dodoex.io/earn/add-liquidity?network=bsc-mainnet&?poolAddress=${lpAddress}`\r\n\r\n  return (\r\n    <Container expanded={expanded}>\r\n      <InfoContainer>\r\n        {isActive && (\r\n          <StakeContainer>\r\n            <StyledLinkExternal href={`https://app.dodoex.io/earn/add-liquidity?network=bsc-mainnet&?poolAddress=${lpAddress}`}>\r\n              {t('Get %symbol%', { symbol: lpLabel })}\r\n            </StyledLinkExternal>\r\n          </StakeContainer>\r\n        )}\r\n        <StyledLinkExternal href={bsc}>{t('View Contract')}</StyledLinkExternal>\r\n        <StyledLinkExternal href={info}>{t('See Pair Info')}</StyledLinkExternal>\r\n        <TagsContainer>\r\n          {farm.isCommunity ? <CommunityTag /> : <CoreTag />}\r\n          {dual ? <DualTag /> : null}\r\n        </TagsContainer>\r\n      </InfoContainer>\r\n      <ValueContainer>\r\n        <ValueWrapper>\r\n          <Text>{t('APR')}</Text>\r\n          <Apr {...apr} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{t('Multiplier')}</Text>\r\n          <Multiplier {...multiplier} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{t('Liquidity')}</Text>\r\n          <Liquidity {...liquidity} />\r\n        </ValueWrapper>\r\n      </ValueContainer>\r\n      <ActionContainer>\r\n        <HarvestAction {...farm} userDataReady={userDataReady} />\r\n        <StakedAction {...farm} userDataReady={userDataReady} lpLabel={lpLabel} displayApr={apr.value} />\r\n      </ActionContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ActionPanel\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Label = styled.div`\r\n  font-size: 12px;\r\n  color: gold;\r\n  text-align: left;\r\n\r\n`\r\n\r\nconst ContentContainer = styled.div`\r\n  min-height: 24px;\r\n  display: flex;\r\n  align-items: center;\r\n  color:gold;\r\n`\r\n\r\ninterface CellLayoutProps {\r\n  label?: string\r\n}\r\n\r\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\r\n  return (\r\n    <div>\r\n      {label && <Label color='gold' style={{fontSize:'14px'}} >{label}</Label>}\r\n      <ContentContainer>{children}</ContentContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CellLayout\r\n","export type TableProps = {\r\n  data?: TableDataTypes[]\r\n  selectedFilters?: string\r\n  sortBy?: string\r\n  sortDir?: string\r\n  onSort?: (value: string) => void\r\n}\r\n\r\nexport type ColumnsDefTypes = {\r\n  id: number\r\n  label: string\r\n  name: string\r\n  sortable: boolean\r\n}\r\n\r\nexport type ScrollBarProps = {\r\n  ref: string\r\n  width: number\r\n}\r\n\r\nexport type TableDataTypes = {\r\n  POOL: string\r\n  APR: string\r\n  EARNED: string\r\n  STAKED: string\r\n  DETAILS: string\r\n  LINKS: string\r\n}\r\n\r\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'liquidity',\r\n    sortable: true,\r\n    label: 'Liquidity',\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'multiplier',\r\n    sortable: true,\r\n    label: 'Multiplier',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\r\nimport { useFarmUser } from 'state/farms/hooks'\r\n\r\nimport Apr, { AprProps } from './Apr'\r\nimport Farm, { FarmProps } from './Farm'\r\nimport Earned, { EarnedProps } from './Earned'\r\nimport Details from './Details'\r\nimport Multiplier, { MultiplierProps } from './Multiplier'\r\nimport Liquidity, { LiquidityProps } from './Liquidity'\r\nimport ActionPanel from './Actions/ActionPanel'\r\nimport CellLayout from './CellLayout'\r\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\r\n\r\nexport interface RowProps {\r\n  apr: AprProps\r\n  farm: FarmProps\r\n  earned: EarnedProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n}\r\n\r\ninterface RowPropsWithLoading extends RowProps {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst cells = {\r\n  apr: Apr,\r\n  farm: Farm,\r\n  earned: Earned,\r\n  details: Details,\r\n  multiplier: Multiplier,\r\n  liquidity: Liquidity,\r\n}\r\n\r\nconst CellInner = styled.div`\r\n  padding: 24px 0px;\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  padding-right: 8px;\r\n  color: gold;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    padding-right: 32px;\r\n  }\r\n`\r\n\r\nconst StyledTr = styled.tr`\r\n  cursor: pointer;\r\n  border-bottom-color: #15181e;\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 3px;\r\n  background-color: #20252d;\r\n  color: gold;\r\n`\r\n\r\nconst EarnedMobileCell = styled.td`\r\n  padding: 16px 0 24px 16px;\r\n  color: gold;\r\n`\r\n\r\nconst AprMobileCell = styled.td`\r\n  padding-top: 16px;\r\n  padding-bottom: 24px;\r\n  color: gold;\r\n`\r\n\r\nconst FarmMobileCell = styled.td`\r\n  padding-top: 24px;\r\n  color: gold;\r\n`\r\n\r\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\r\n  const { details, userDataReady } = props\r\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\r\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\r\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\r\n  const { t } = useTranslation()\r\n \r\n  const toggleActionPanel = () => {\r\n    setActionPanelExpanded(!actionPanelExpanded)\r\n  }\r\n\r\n  useEffect(() => {\r\n    setActionPanelExpanded(hasStakedAmount)\r\n  }, [hasStakedAmount])\r\n\r\n  const { isDesktop, isMobile } = useMatchBreakpoints()\r\n\r\n  const isSmallerScreen = !isDesktop\r\n  const tableSchema = isSmallerScreen ? MobileColumnSchema : DesktopColumnSchema\r\n  const columnNames = tableSchema.map((column) => column.name)\r\n\r\n  const handleRenderRow = () => {\r\n    if (!isMobile) {\r\n      return (\r\n        <StyledTr onClick={toggleActionPanel}>\r\n          {Object.keys(props).map((key) => {\r\n            const columnIndex = columnNames.indexOf(key)\r\n            if (columnIndex === -1) {\r\n              return null\r\n            }\r\n\r\n            switch (key) {\r\n              case 'details':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout>\r\n                        <Details actionPanelToggled={actionPanelExpanded} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              case 'apr':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout label={t('APR')}>\r\n                        <Apr {...props.apr} hideButton={isSmallerScreen} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              default:\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\r\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n            }\r\n          })}\r\n        </StyledTr>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <StyledTr onClick={toggleActionPanel}>\r\n        <td>\r\n          <tr>\r\n            <FarmMobileCell>\r\n              <CellLayout>\r\n                <Farm {...props.farm} />\r\n              </CellLayout>\r\n            </FarmMobileCell>\r\n          </tr>\r\n          <tr>\r\n            <EarnedMobileCell>\r\n              <CellLayout label={t('Earned')}>\r\n                <Earned {...props.earned} userDataReady={userDataReady} />\r\n              </CellLayout>\r\n            </EarnedMobileCell>\r\n            <AprMobileCell>\r\n              <CellLayout label={t('APR')}>\r\n                <Apr {...props.apr} hideButton />\r\n              </CellLayout>\r\n            </AprMobileCell>\r\n          </tr>\r\n        </td>\r\n        <td>\r\n          <CellInner>\r\n            <CellLayout>\r\n              <Details actionPanelToggled={actionPanelExpanded} />\r\n            </CellLayout>\r\n          </CellInner>\r\n        </td>\r\n      </StyledTr>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {handleRenderRow()}\r\n      {shouldRenderChild && (\r\n        <tr>\r\n          <td colSpan={6}>\r\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\r\n          </td>\r\n        </tr>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Row\r\n","import React, { useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nimport Row, { RowProps } from './Row'\r\n\r\nexport interface ITableProps {\r\n  data: RowProps[]\r\n  columns: ColumnType<RowProps>[]\r\n  userDataReady: boolean\r\n  sortColumn?: string\r\n}\r\n\r\nconst Container = styled.div`\r\n  filter: ${({ theme }) => theme.card.dropShadow};\r\n  width: 100%;\r\n  background: ${({ theme }) => theme.card.background};\r\n  border-radius: 16px;\r\n  margin: 16px 0px;\r\n`\r\n\r\nconst TableWrapper = styled.div`\r\n  overflow: visible;\r\n  scroll-margin-top: 64px;\r\n\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst StyledTable = styled.table`\r\n  border-collapse: collapse;\r\n  font-size: 14px;\r\n  border-radius: 4px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n`\r\n\r\nconst TableBody = styled.tbody`\r\n  & tr {\r\n    td {\r\n      font-size: 16px;\r\n      vertical-align: middle;\r\n    }\r\n  }\r\n`\r\n\r\nconst TableContainer = styled.div`\r\n  position: relative;\r\n`\r\n\r\nconst ScrollButtonContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n`\r\n\r\nconst FarmTable: React.FC<ITableProps> = (props) => {\r\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\r\n  const { t } = useTranslation()\r\n  const { data, columns, userDataReady } = props\r\n\r\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\r\n\r\n  const scrollToTop = (): void => {\r\n    tableWrapperEl.current.scrollIntoView({\r\n      behavior: 'smooth',\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Container id=\"farms-table\">\r\n      <TableContainer>\r\n        <TableWrapper ref={tableWrapperEl}>\r\n          <StyledTable>\r\n            <TableBody>\r\n              {rows.map((row) => {\r\n                return <Row  {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\r\n              })}\r\n            </TableBody>\r\n          </StyledTable>\r\n        </TableWrapper>\r\n        <ScrollButtonContainer style={{  background: '#20252d'}}>\r\n          <Button variant=\"text\" color='gold' onClick={scrollToTop}>\r\n            {t('To Top')}\r\n            <ChevronUpIcon color=\"gold\" />\r\n          </Button>\r\n        </ScrollButtonContainer>\r\n      </TableContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default FarmTable\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useLocation, Link, useRouteMatch } from 'react-router-dom'\r\nimport { ButtonMenu, ButtonMenuItem, NotificationDot } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface FarmTabButtonsProps {\r\n  hasStakeInFinishedFarms: boolean\r\n}\r\n\r\nconst FarmTabButtons: React.FC<FarmTabButtonsProps> = ({ hasStakeInFinishedFarms }) => {\r\n  const { url } = useRouteMatch()\r\n  const location = useLocation()\r\n  const { t } = useTranslation()\r\n\r\n  let activeIndex\r\n  switch (location.pathname) {\r\n    case '/farms':\r\n      activeIndex = 0\r\n      break\r\n    case '/farms/history':\r\n      activeIndex = 1\r\n      break\r\n    case '/farms/archived':\r\n      activeIndex = 2\r\n      break\r\n    default:\r\n      activeIndex = 0\r\n      break\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\">\r\n        <ButtonMenuItem as={Link} to={`${url}`}>\r\n          {t('Live')}\r\n        </ButtonMenuItem>\r\n        <NotificationDot show={hasStakeInFinishedFarms}>\r\n          <ButtonMenuItem id=\"finished-farms-button\" as={Link} to={`${url}/history`}>\r\n            {t('Finished')}\r\n          </ButtonMenuItem>\r\n        </NotificationDot>\r\n      </ButtonMenu>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default FarmTabButtons\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  a {\r\n    padding-left: 12px;\r\n    padding-right: 12px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 16px;\r\n  }\r\n`\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap/uikit'\r\nimport { ViewMode } from 'state/user/actions'\r\n\r\ninterface ToggleViewProps {\r\n  viewMode: ViewMode\r\n  onToggle: (mode: ViewMode) => void\r\n}\r\n\r\nconst Container = styled.div`\r\n  margin-left: -8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 0;\r\n  }\r\n`\r\n\r\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\r\n  const handleToggle = (mode: ViewMode) => {\r\n    if (viewMode !== mode) {\r\n      onToggle(mode)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmCardView\" onClick={() => handleToggle(ViewMode.CARD)}>\r\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmTableView\" onClick={() => handleToggle(ViewMode.TABLE)}>\r\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ToggleView\r\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\r\nimport { Route, useRouteMatch, useLocation, NavLink } from 'react-router-dom'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Image, Heading, RowType, Toggle, Text, Button, ArrowForwardIcon, Flex } from '@pancakeswap/uikit'\r\nimport { ChainId } from '@pancakeswap/sdk'\r\nimport styled, { createGlobalStyle } from 'styled-components'\r\nimport FlexLayout from 'components/Layout/Flex'\r\nimport Page from 'components/Layout/Page'\r\nimport { useFarms, usePollFarmsWithUserData, useLpTokenPrice, usePriceCakeBusd} from 'state/farms/hooks'\r\nimport useIntersectionObserver from 'hooks/useIntersectionObserver'\r\nimport { DeserializedFarm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { getFarmApr } from 'utils/apr'\r\nimport { orderBy } from 'lodash'\r\nimport isArchivedPid from 'utils/farmHelpers'\r\nimport { latinise } from 'utils/latinise'\r\nimport { useUserFarmStakedOnly, useUserFarmsViewMode } from 'state/user/hooks'\r\nimport { ViewMode } from 'state/user/actions'\r\nimport PageHeader from 'components/PageHeader'\r\nimport SearchInput from 'components/SearchInput'\r\nimport Select, { OptionProps } from 'components/Select/Select'\r\nimport Loading from 'components/Loading'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport Table from './components/FarmTable/FarmTable'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport { RowProps } from './components/FarmTable/Row'\r\nimport ToggleView from './components/ToggleView/ToggleView'\r\nimport { DesktopColumnSchema } from './components/types'\r\n\r\nconst GlobalStyles = createGlobalStyle`\r\n  .farm_body {    \r\n    background-color: #15181e !important; \r\n  }\r\n`;\r\n\r\nconst ControlContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  position: relative;\r\n\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n  margin-bottom: 32px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    padding: 16px 32px;\r\n    margin-bottom: 0;\r\n  }\r\n`;\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 10px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`;\r\n\r\nconst LabelWrapper = styled.div`\r\n  > ${Text} {\r\n    font-size: 12px;\r\n  }\r\n`;\r\n\r\nconst FilterContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding: 8px 0px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n    padding: 0;\r\n  }\r\n`;\r\n\r\nconst ViewControls = styled.div`\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n\r\n  > div {\r\n    padding: 8px 0px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n    width: auto;\r\n\r\n    > div {\r\n      padding: 0;\r\n    }\r\n  }\r\n`;\r\n\r\nconst StyledImage = styled(Image)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-top: 58px;\r\n`;\r\n\r\nconst NUMBER_OF_FARMS_VISIBLE = 12\r\n\r\nconst getDisplayApr = (cakeRewardsApr?: number, lpRewardsApr?: number) => {\r\n  if (cakeRewardsApr && lpRewardsApr) {\r\n    return (cakeRewardsApr + lpRewardsApr).toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n  }\r\n  if (cakeRewardsApr) {\r\n    return cakeRewardsApr.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n  }\r\n  return null\r\n}\r\n\r\nconst Farms: React.FC = () => {\r\n  const { path } = useRouteMatch()\r\n  const { pathname } = useLocation()\r\n  const { t } = useTranslation()\r\n  const { data: farmsLP, userDataLoaded } = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const lpPrice = useLpTokenPrice(\"ZLT-BNB LP\")\r\n  \r\n  const [query, setQuery] = useState('')\r\n  const [viewMode, setViewMode] = useUserFarmsViewMode()\r\n  const { account } = useWeb3React()\r\n  const [sortOption, setSortOption] = useState('hot')\r\n  const { observerRef, isIntersecting } = useIntersectionObserver()\r\n  const chosenFarmsLength = useRef(0)\r\n\r\n  const isArchived = pathname.includes('archived')\r\n  const isInactive = pathname.includes('history')\r\n  const isActive = !isInactive && !isArchived\r\n\r\n  usePollFarmsWithUserData(isArchived)\r\n\r\n  // Users with no wallet connected should see 0 as Earned amount\r\n  // Connected users should see loading indicator until first userData has loaded\r\n  const userDataReady = !account || (!!account && userDataLoaded)\r\n\r\n  const [stakedOnly, setStakedOnly] = useUserFarmStakedOnly(isActive)\r\n\r\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 2 && farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\r\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 2 && farm.multiplier === '0X' && !isArchivedPid(farm.pid))\r\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\r\n  \r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedInactiveFarms = inactiveFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedArchivedFarms = archivedFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay: DeserializedFarm[]): FarmWithStakedValue[] => {\r\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        if (!farm.lpTotalInQuoteToken || !farm.quoteTokenPriceBusd) {\r\n          return farm\r\n        }\r\n        // const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteTokenPriceBusd)\r\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(lpPrice)\r\n        const { cakeRewardsApr, lpRewardsApr } = isActive\r\n          ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity, farm.lpAddresses[ChainId.MAINNET], new BigNumber(farm.tokenPerBlock))\r\n          : { cakeRewardsApr: 0, lpRewardsApr: 0 }\r\n\r\n        return { ...farm, apr: cakeRewardsApr, lpRewardsApr, liquidity: totalLiquidity }\r\n      })\r\n\r\n      if (query) {\r\n        const lowercaseQuery = latinise(query.toLowerCase())\r\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\r\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\r\n        })\r\n      }\r\n      return farmsToDisplayWithAPR\r\n    },\r\n    [cakePrice, query, isActive, lpPrice],\r\n  )\r\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setQuery(event.target.value)\r\n  }\r\n\r\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\r\n\r\n  const chosenFarmsMemoized = useMemo(() => {\r\n    let chosenFarms = []\r\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\r\n      switch (sortOption) {\r\n        case 'apr':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr + farm.lpRewardsApr, 'desc')\r\n        case 'multiplier':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\r\n            'desc',\r\n          )\r\n        case 'earned':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\r\n            'desc',\r\n          )\r\n        case 'liquidity':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\r\n        default:\r\n          return farms\r\n      }\r\n    }\r\n\r\n    if (isActive) {\r\n      chosenFarms = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\r\n    }\r\n    if (isInactive) {\r\n      chosenFarms = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\r\n    }\r\n    if (isArchived) {\r\n      chosenFarms = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\r\n    }\r\n\r\n    return sortFarms(chosenFarms).slice(0, numberOfFarmsVisible)\r\n  }, [\r\n    sortOption,\r\n    activeFarms,\r\n    farmsList,\r\n    inactiveFarms,\r\n    archivedFarms,\r\n    isActive,\r\n    isInactive,\r\n    isArchived,\r\n    stakedArchivedFarms,\r\n    stakedInactiveFarms,\r\n    stakedOnly,\r\n    stakedOnlyFarms,\r\n    numberOfFarmsVisible,\r\n  ])\r\n  chosenFarmsLength.current = chosenFarmsMemoized.length\r\n\r\n  useEffect(() => {\r\n    if (isIntersecting) {\r\n      setNumberOfFarmsVisible((farmsCurrentlyVisible) => {\r\n        if (farmsCurrentlyVisible <= chosenFarmsLength.current) {\r\n          return farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE\r\n        }\r\n        return farmsCurrentlyVisible\r\n      })\r\n    }\r\n  }, [isIntersecting])\r\n\r\n  const rowData = chosenFarmsMemoized.map((farm) => {\r\n    const { token, quoteToken } = farm\r\n    const tokenAddress = token.address\r\n    const quoteTokenAddress = quoteToken.address\r\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\r\n\r\n    const row: RowProps = {\r\n      apr: {\r\n        value: getDisplayApr(farm.apr, farm.lpRewardsApr),\r\n        pid: farm.pid,\r\n        multiplier: farm.multiplier,\r\n        lpLabel,\r\n        lpSymbol: farm.lpSymbol,\r\n        tokenAddress,\r\n        quoteTokenAddress,\r\n        cakePrice,\r\n        originalValue: farm.apr,\r\n      },\r\n      farm: {\r\n        label: lpLabel,\r\n        pid: farm.pid,\r\n        token: farm.token,\r\n        quoteToken: farm.quoteToken,\r\n      },\r\n      earned: {\r\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\r\n        pid: farm.pid,\r\n      },\r\n      liquidity: {\r\n        liquidity: farm.liquidity,\r\n      },\r\n      multiplier: {\r\n        multiplier: farm.multiplier,\r\n      },\r\n      details: farm,\r\n    }\r\n\r\n    return row\r\n  })\r\n\r\n  const renderContent = (): JSX.Element => {\r\n    if (viewMode === ViewMode.TABLE && rowData.length) {\r\n      const columnSchema = DesktopColumnSchema\r\n\r\n      const columns = columnSchema.map((column) => ({\r\n        id: column.id,\r\n        name: column.name,\r\n        label: column.label,\r\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\r\n          switch (column.name) {\r\n            case 'farm':\r\n              return b.id - a.id\r\n            case 'apr':\r\n              if (a.original.apr.value && b.original.apr.value) {\r\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\r\n              }\r\n\r\n              return 0\r\n            case 'earned':\r\n              return a.original.earned.earnings - b.original.earned.earnings\r\n            default:\r\n              return 1\r\n          }\r\n        },\r\n        sortable: column.sortable,\r\n      }))\r\n\r\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\r\n    }\r\n\r\n    return (\r\n      <FlexLayout>\r\n        <Route exact path={`${path}`}>\r\n          {chosenFarmsMemoized.map((farm, index) => (\r\n            <FarmCard\r\n              key={farm.pid}\r\n              index={index}\r\n              farm={farm}\r\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\r\n              cakePrice={cakePrice}\r\n              account={account}\r\n              removed={false}\r\n            />\r\n          ))}\r\n        </Route>\r\n        <Route exact path={`${path}/history`}>\r\n          {chosenFarmsMemoized.map((farm, index) => (\r\n            <FarmCard\r\n              key={farm.pid}\r\n              index={index}\r\n              farm={farm}\r\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\r\n              cakePrice={cakePrice}\r\n              account={account}\r\n              removed\r\n            />\r\n          ))}\r\n        </Route>\r\n        <Route exact path={`${path}/archived`}>\r\n          {chosenFarmsMemoized.map((farm, index) => (\r\n            <FarmCard\r\n              key={farm.pid}\r\n              index={index}\r\n              farm={farm}\r\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\r\n              cakePrice={cakePrice}\r\n              account={account}\r\n              removed\r\n            />\r\n          ))}\r\n        </Route>\r\n      </FlexLayout>\r\n    )\r\n  }\r\n\r\n  const handleSortOptionChange = (option: OptionProps): void => {\r\n    setSortOption(option.value)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <GlobalStyles />\r\n      <PageHeader>\r\n        <Heading as=\"h1\" scale=\"xxl\" color=\"white\" mb=\"24px\">\r\n          {t('Feast')}\r\n        </Heading>\r\n        <Heading scale=\"lg\" color=\"white\">\r\n          {t('Stake LP tokens to Earn ZLT.')}\r\n        </Heading>\r\n      </PageHeader>\r\n      <div className=\"farm_body\">\r\n      <Page>\r\n        \r\n        <ControlContainer>\r\n          <ViewControls>\r\n            <ToggleView viewMode={viewMode}  onToggle={(mode: ViewMode) => setViewMode(mode)} />\r\n            <ToggleWrapper>\r\n              <Toggle\r\n                id=\"staked-only-farms\"\r\n                checked={stakedOnly}\r\n                onChange={() => setStakedOnly(!stakedOnly)}\r\n                scale=\"sm\"\r\n              />\r\n              <Text color=\"gold\"> {t('Staked only')}</Text>\r\n            </ToggleWrapper>\r\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\r\n          </ViewControls>\r\n          <FilterContainer>\r\n            <LabelWrapper>\r\n              <Text textTransform=\"uppercase\" color='gold'>{t('Sort by')}</Text>\r\n              <Select\r\n                options={[\r\n                  {\r\n                    label: t('Hot'),\r\n                    value: 'hot',\r\n                  },\r\n                  {\r\n                    label: t('APR'),\r\n                    value: 'apr',\r\n                  },\r\n                  {\r\n                    label: t('Multiplier'),\r\n                    value: 'multiplier',\r\n                  },\r\n                  {\r\n                    label: t('Earned'),\r\n                    value: 'earned',\r\n                  },\r\n                  {\r\n                    label: t('Liquidity'),\r\n                    value: 'liquidity',\r\n                  },\r\n                ]}\r\n                onOptionChange={handleSortOptionChange}\r\n              />\r\n            </LabelWrapper>\r\n            <LabelWrapper style={{ marginLeft: 16 }}>\r\n              <Text textTransform=\"uppercase\" color='gold'>{t('Search')}</Text>\r\n              <SearchInput onChange={handleChangeQuery} placeholder=\"Search Farms\" />\r\n            </LabelWrapper>\r\n          </FilterContainer>\r\n        </ControlContainer>\r\n        \r\n          {renderContent()}\r\n        {account && !userDataLoaded && stakedOnly && (\r\n          <Flex justifyContent=\"center\">\r\n            <Loading />\r\n          </Flex>\r\n        )}\r\n        <div ref={observerRef} />\r\n      </Page>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n"],"sourceRoot":""}