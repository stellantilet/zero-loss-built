{"version":3,"sources":["views/Nft/market/components/BuySellModals/SellModal/types.ts","views/Nft/market/components/BuySellModals/SellModal/SellStage.tsx","views/Nft/market/components/BuySellModals/SellModal/styles.tsx","views/Nft/market/components/BuySellModals/SellModal/SetPriceStage.tsx","views/Nft/market/components/BuySellModals/SellModal/EditStage.tsx","views/Nft/market/components/BuySellModals/SellModal/RemoveStage.tsx","views/Nft/market/components/BuySellModals/SellModal/TransferStage.tsx","views/Nft/market/components/BuySellModals/SellModal/index.tsx","components/ProfileAvatarWithTeam.tsx","views/Nft/market/Profile/hooks/useFetchUserNfts.tsx","views/ProfileCreation/SelectionCard.tsx","views/Nft/market/Profile/components/EditProfileModal/reducer.ts","views/Nft/market/Profile/hooks/useGetProfileCosts.ts","views/Nft/market/Profile/components/EditProfileModal/StartView.tsx","views/Nft/market/Profile/components/EditProfileModal/PauseProfileView.tsx","views/Nft/market/Profile/components/EditProfileModal/ChangeProfilePicView.tsx","views/Nft/market/Profile/components/EditProfileModal/ApproveCakeView.tsx","views/Nft/market/Profile/components/EditProfileModal/index.tsx","views/Nft/market/components/ProfileCell.tsx","views/Nft/market/components/ProfileNftModal.tsx","views/Nft/market/components/PaginationButtons.tsx","views/Nft/market/components/BuySellModals/shared/ApproveAndConfirmStage.tsx","views/Nft/market/components/BuySellModals/shared/TransactionConfirmed.tsx","views/Nft/market/components/BuySellModals/shared/ConfirmStage.tsx","hooks/useApproveConfirmTransaction.ts","components/ApproveConfirmButtons.tsx","views/Nft/market/components/BuySellModals/shared/styles.tsx"],"names":["SellingStage","SellStage","nftToSell","lowestPrice","continueToNextStage","continueToTransferStage","t","useTranslation","hasProfile","useProfile","itemPageUrlId","collectionAddress","toLowerCase","pancakeBunniesAddress","attributes","value","tokenId","useModal","EditProfileModal","onEditProfileModal","p","src","image","thumbnail","height","width","mr","flex","gridTemplateColumns","alignItems","bold","name","fontSize","color","textAlign","collectionName","small","justifyContent","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","px","mt","id","as","Link","external","variant","href","nftsBaseUrl","getBscScanLinkForNft","flexDirection","pb","mb","onClick","stagesWithBackButton","SET_PRICE","ADJUST_PRICE","APPROVE_AND_CONFIRM_SELL","CONFIRM_ADJUST_PRICE","REMOVE_FROM_MARKET","CONFIRM_REMOVE_FROM_MARKET","TRANSFER","CONFIRM_TRANSFER","StyledModal","styled","Modal","stage","theme","includes","colors","textSubtle","GreyedOutContainer","Box","dropdown","RightAlignedInput","Input","BnbAmountCell","bnbAmount","bnbBusdPrice","useBNBBusdPrice","usdAmount","multiplyPriceByAmount","FeeAmountCell","creatorFee","tradingFee","totalFee","feeAmount","SetPriceStage","currentPrice","price","setPrice","inputRef","useRef","adjustedPriceIsTheSame","parseFloat","priceIsValid","Number","isNaN","useGetCollection","creatorFeeAsNumber","tradingFeeAsNumber","bnbPrice","priceAsFloat","priceInUsd","priceIsOutOfRange","useTooltip","percentage","placement","tooltip","tooltipVisible","targetRef","useEffect","current","focus","textTransform","scale","type","inputMode","ref","isWarning","onChange","e","target","minPrice","maxPrice","maxWidth","alignSelf","disabled","EditStage","continueToAdjustPriceStage","continueToRemoveFromMarketStage","marketData","currentAskPrice","RemoveStage","TransferStage","transferAddress","setTransferAddress","isInvalidTransferAddress","account","useWeb3React","transferAddressEqualsConnectedAddress","pt","placeholder","length","modalTitles","SELL","EDIT","TX_CONFIRMED","getToastText","SellModal","onDismiss","useState","setStage","confirmedTxHash","setConfirmedTxHash","useTheme","callWithGasPrice","useCallWithGasPrice","toastSuccess","useToast","collectionContract","useErc721CollectionContract","nftMarketContract","useNftMarketContract","dispatch","useAppDispatch","isAddress","useGetLowestPriceFromNft","dispatchSuccessAction","updateUserNft","location","NftLocation","WALLET","removeUserNft","FORSALE","useApproveConfirmTransaction","onRequiresApproval","a","isApprovedForAll","address","approvedForContract","onApprove","onApproveSuccess","receipt","Toast","txHash","transactionHash","onConfirm","methodName","askPrice","parseUnits","onSuccess","isApproving","isApproved","isConfirming","handleApprove","handleConfirm","showBackButton","title","onBack","headerBackground","gradients","cardHeader","ApproveAndConfirmStage","TransactionConfirmed","ConfirmStage","TeamAvatar","img","card","background","mediaQueries","sm","AvatarWrapper","div","bg","AvatarInactive","NoProfileAvatarIcon","ProfileAvatarWithTeam","profile","nft","isActive","team","images","alt","useFetchUserNfts","isProfileInitialized","isInitialized","isProfileLoading","isLoading","userNftsInitializationState","useUserNfts","collections","useGetCollections","hasProfileNft","profileNftTokenId","toString","profileNftCollectionAddress","profileNftWithCollectionAddress","useMemo","nftLocation","PROFILE","previousProfileNftTokenId","usePreviousValue","shouldFetch","UserNftInitializationState","UNINITIALIZED","hasAccountSwitched","isEmpty","fetchUserNfts","Label","label","isDisabled","Body","Children","StyledBackgroundImage","SelectionCard","isChecked","children","props","isSuccess","checked","style","Views","reducer","state","action","currentView","view","previousView","useEditProfile","useReducer","START","goToStart","goToChange","CHANGE","goToRemove","REMOVE","goToApprove","APPROVE","goPrevious","useGetProfileCosts","setIsLoading","numberCakeToReactivate","ethers","BigNumber","from","numberCakeToRegister","numberCakeToUpdate","costs","setCosts","toastError","calls","map","method","getPancakeProfileAddress","multicallv2","profileABI","fetchCosts","DangerOutline","Button","attrs","failure","StartPage","cakeContract","useCake","useGetCakeBalance","cakeBalance","balance","fetchStatus","isProfileCostsLoading","needsApproval","setNeedsApproval","minimumCakeRequired","hasMinimumCakeRequired","FetchStatus","SUCCESS","gte","allowance","response","lt","checkApprovalStatus","minimum","formatBigNumber","PauseProfilePage","isAcknowledged","setIsAcknowledged","setIsConfirming","pancakeProfileContract","useProfileContract","handleDeactivateProfile","tx","wait","status","fetchProfile","cost","htmlFor","cursor","display","marginBottom","ml","endIcon","spin","ChangeProfilePicPage","selectedNft","setSelectedNft","nfts","profileContract","library","nftsInWallet","filter","contract","getErc721Contract","getSigner","isConfirmed","maxHeight","overflowY","walletNft","ApproveConfirmButtons","isApproveDisabled","isConfirmDisabled","ApproveCakePage","setIsApproving","approve","mul","viewTitle","isStartView","handleBack","hideCloseButton","StartView","PauseProfileView","ChangeProfilePicView","ApproveCakeView","Avatar","md","StyledFlex","Flex","ProfileCell","accountAddress","useGetProfileAvatar","username","profileNft","usernameFetchStatus","avatarFetchStatus","profileName","sellerProfilePicComponent","ProfileAvatarFetchStatus","FETCHED","to","lineHeight","truncateHash","TextWrapper","ProfileNftModal","py","PageButtons","Arrow","primary","success","size","chainId","useActiveWeb3React","getBscScanLink","initialState","approvalState","confirmState","actions","noop","handlePreApprove","then","result","hasApproveFailed","hasConfirmFailed","params","ButtonArrangement","StyledApproveConfirmButtonRow","UIKitButton","iconAttrs","ChevronRight","ChevronRightIcon","ChevronBottom","ChevronDownIcon","spinnerIcon","buttonArrangement","ROW","confirmLabel","confirmId","confirmButtonText","RoundedImage","Image","radii","Divider","cardBorder","HorizontalDivider","StepIndicator","secondary","textDisabled"],"mappings":"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","file":"static/js/2.2eba896d.chunk.js","sourcesContent":["export enum SellingStage {\n  // Sell flow\n  SELL,\n  SET_PRICE,\n  APPROVE_AND_CONFIRM_SELL,\n  // Adjust price flow\n  EDIT,\n  ADJUST_PRICE,\n  CONFIRM_ADJUST_PRICE,\n  // Remove from market flow\n  REMOVE_FROM_MARKET,\n  CONFIRM_REMOVE_FROM_MARKET,\n  // Transfer flow\n  TRANSFER,\n  CONFIRM_TRANSFER,\n  // Common\n  TX_CONFIRMED,\n}\n","import React from 'react'\r\nimport { Flex, Grid, Text, Button, Link, BinanceIcon, LinkExternal, useModal } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { nftsBaseUrl, pancakeBunniesAddress } from 'views/Nft/market/constants'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { getBscScanLinkForNft } from 'utils'\r\nimport EditProfileModal from 'views/Nft/market/Profile/components/EditProfileModal'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport { Divider, HorizontalDivider, RoundedImage } from '../shared/styles'\r\n\r\ninterface SellStageProps {\r\n  nftToSell: NftToken\r\n  lowestPrice: number\r\n  continueToNextStage: () => void\r\n  continueToTransferStage: () => void\r\n}\r\n\r\n// Initial stage when user wants to put their NFT for sale or transfer to another wallet\r\nconst SellStage: React.FC<SellStageProps> = ({\r\n  nftToSell,\r\n  lowestPrice,\r\n  continueToNextStage,\r\n  continueToTransferStage,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { hasProfile } = useProfile()\r\n  const itemPageUrlId =\r\n    nftToSell.collectionAddress.toLowerCase() === pancakeBunniesAddress.toLowerCase()\r\n      ? nftToSell.attributes[0].value\r\n      : nftToSell.tokenId\r\n\r\n  const [onEditProfileModal] = useModal(<EditProfileModal />, false)\r\n\r\n  return (\r\n    <>\r\n      <Flex p=\"16px\">\r\n        <RoundedImage src={nftToSell.image.thumbnail} height={68} width={68} mr=\"8px\" />\r\n        <Grid flex=\"1\" gridTemplateColumns=\"1fr 1fr\" alignItems=\"center\">\r\n          <Text bold>{nftToSell.name}</Text>\r\n          <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\r\n            {nftToSell.collectionName}\r\n          </Text>\r\n          {lowestPrice && (\r\n            <>\r\n              <Text small color=\"textSubtle\">\r\n                {t('Lowest price')}\r\n              </Text>\r\n              <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n                <BinanceIcon width={16} height={16} mr=\"4px\" />\r\n                <Text small>\r\n                  {lowestPrice.toLocaleString(undefined, {\r\n                    minimumFractionDigits: 3,\r\n                    maximumFractionDigits: 3,\r\n                  })}\r\n                </Text>\r\n              </Flex>\r\n            </>\r\n          )}\r\n        </Grid>\r\n      </Flex>\r\n      <Flex justifyContent=\"space-between\" px=\"16px\" mt=\"8px\">\r\n        <Flex flex=\"2\">\r\n          <Text small color=\"textSubtle\">\r\n            {t('Token ID: %id%', { id: nftToSell.tokenId })}\r\n          </Text>\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\" flex=\"3\">\r\n          <Button\r\n            as={Link}\r\n            p=\"0px\"\r\n            height=\"16px\"\r\n            external\r\n            variant=\"text\"\r\n            href={`${nftsBaseUrl}/collections/${nftToSell.collectionAddress}/${itemPageUrlId}`}\r\n          >\r\n            {t('View Item')}\r\n          </Button>\r\n          <HorizontalDivider />\r\n          <LinkExternal\r\n            p=\"0px\"\r\n            height=\"16px\"\r\n            href={getBscScanLinkForNft(nftToSell.collectionAddress, nftToSell.tokenId)}\r\n          >\r\n            BscScan\r\n          </LinkExternal>\r\n        </Flex>\r\n      </Flex>\r\n      <Divider />\r\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\r\n        <Button mb=\"8px\" onClick={continueToNextStage}>\r\n          {t('Sell')}\r\n        </Button>\r\n        <Button mb=\"8px\" variant=\"secondary\" onClick={continueToTransferStage}>\r\n          {t('Transfer')}\r\n        </Button>\r\n        {hasProfile && (\r\n          <Button variant=\"secondary\" onClick={onEditProfileModal}>\r\n            {t('Set as Profile Pic')}\r\n          </Button>\r\n        )}\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SellStage\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Modal, Box, Flex, Text, BinanceIcon, Input } from '@pancakeswap/uikit'\r\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\r\nimport { multiplyPriceByAmount } from 'utils/prices'\r\nimport { SellingStage } from './types'\r\n\r\nexport const stagesWithBackButton = [\r\n  SellingStage.SET_PRICE,\r\n  SellingStage.ADJUST_PRICE,\r\n  SellingStage.APPROVE_AND_CONFIRM_SELL,\r\n  SellingStage.CONFIRM_ADJUST_PRICE,\r\n  SellingStage.REMOVE_FROM_MARKET,\r\n  SellingStage.CONFIRM_REMOVE_FROM_MARKET,\r\n  SellingStage.TRANSFER,\r\n  SellingStage.CONFIRM_TRANSFER,\r\n]\r\n\r\nexport const StyledModal = styled(Modal)<{ stage: SellingStage }>`\r\n  width: 360px;\r\n  & > div:last-child {\r\n    padding: 0;\r\n  }\r\n  & h2:first-of-type {\r\n    ${({ stage, theme }) => (stagesWithBackButton.includes(stage) ? `color: ${theme.colors.textSubtle}` : null)};\r\n  }\r\n  & svg:first-of-type {\r\n    ${({ stage, theme }) => (stagesWithBackButton.includes(stage) ? `fill: ${theme.colors.textSubtle}` : null)};\r\n  }\r\n`\r\n\r\nexport const GreyedOutContainer = styled(Box)`\r\n  background-color: ${({ theme }) => theme.colors.dropdown};\r\n  padding: 16px;\r\n`\r\n\r\nexport const RightAlignedInput = styled(Input)`\r\n  text-align: right;\r\n`\r\n\r\ninterface BnbAmountCellProps {\r\n  bnbAmount: number\r\n}\r\n\r\nexport const BnbAmountCell: React.FC<BnbAmountCellProps> = ({ bnbAmount }) => {\r\n  const bnbBusdPrice = useBNBBusdPrice()\r\n  if (!bnbAmount || bnbAmount === 0) {\r\n    return (\r\n      <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n        <BinanceIcon width={16} height={16} mr=\"4px\" />\r\n        <Text bold mr=\"4px\">\r\n          -\r\n        </Text>\r\n      </Flex>\r\n    )\r\n  }\r\n  const usdAmount = multiplyPriceByAmount(bnbBusdPrice, bnbAmount)\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n      <BinanceIcon width={16} height={16} mr=\"4px\" />\r\n      <Text bold mr=\"4px\">{`${bnbAmount.toLocaleString(undefined, {\r\n        minimumFractionDigits: 3,\r\n        maximumFractionDigits: 3,\r\n      })}`}</Text>\r\n      <Text small color=\"textSubtle\" textAlign=\"right\">\r\n        {`($${usdAmount.toLocaleString(undefined, {\r\n          minimumFractionDigits: 2,\r\n          maximumFractionDigits: 2,\r\n        })})`}\r\n      </Text>\r\n    </Flex>\r\n  )\r\n}\r\n\r\ninterface FeeAmountCellProps {\r\n  bnbAmount: number\r\n  creatorFee: number\r\n  tradingFee: number\r\n}\r\n\r\nexport const FeeAmountCell: React.FC<FeeAmountCellProps> = ({ bnbAmount, creatorFee, tradingFee }) => {\r\n  if (!bnbAmount || bnbAmount === 0) {\r\n    return (\r\n      <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n        <BinanceIcon width={16} height={16} mr=\"4px\" />\r\n        <Text bold mr=\"4px\">\r\n          -\r\n        </Text>\r\n      </Flex>\r\n    )\r\n  }\r\n\r\n  const totalFee = creatorFee + tradingFee\r\n  const totalFeeAsDecimal = totalFee / 100\r\n  const feeAmount = bnbAmount * totalFeeAsDecimal\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n      <BinanceIcon width={16} height={16} mr=\"4px\" />\r\n      <Text bold mr=\"4px\">{`${feeAmount.toLocaleString(undefined, {\r\n        minimumFractionDigits: 3,\r\n        maximumFractionDigits: 6,\r\n      })}`}</Text>\r\n      <Text small color=\"textSubtle\" textAlign=\"right\">\r\n        ({totalFee}%)\r\n      </Text>\r\n    </Flex>\r\n  )\r\n}\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { Flex, Grid, Box, Text, Button, BinanceIcon, ErrorIcon, useTooltip } from '@pancakeswap/uikit'\r\nimport { multiplyPriceByAmount } from 'utils/prices'\r\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { useGetCollection } from 'state/nftMarket/hooks'\r\nimport { Divider } from '../shared/styles'\r\nimport { GreyedOutContainer, BnbAmountCell, RightAlignedInput, FeeAmountCell } from './styles'\r\n\r\ninterface SetPriceStageProps {\r\n  nftToSell: NftToken\r\n  variant: 'set' | 'adjust'\r\n  currentPrice?: string\r\n  lowestPrice?: number\r\n  price: string\r\n  setPrice: React.Dispatch<React.SetStateAction<string>>\r\n  continueToNextStage: () => void\r\n}\r\n\r\nconst MIN_PRICE = 0.005\r\nconst MAX_PRICE = 10000\r\n\r\n// Stage where user puts price for NFT they're about to put on sale\r\n// Also shown when user wants to adjust the price of already listed NFT\r\nconst SetPriceStage: React.FC<SetPriceStageProps> = ({\r\n  nftToSell,\r\n  variant,\r\n  lowestPrice,\r\n  currentPrice,\r\n  price,\r\n  setPrice,\r\n  continueToNextStage,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const inputRef = useRef<HTMLInputElement>()\r\n  const adjustedPriceIsTheSame = variant === 'adjust' && parseFloat(currentPrice) === parseFloat(price)\r\n  const priceIsValid = !price || Number.isNaN(parseFloat(price)) || parseFloat(price) <= 0\r\n\r\n  const { creatorFee, tradingFee } = useGetCollection(nftToSell.collectionAddress)\r\n  const creatorFeeAsNumber = parseFloat(creatorFee)\r\n  const tradingFeeAsNumber = parseFloat(tradingFee)\r\n  const bnbPrice = useBNBBusdPrice()\r\n  const priceAsFloat = parseFloat(price)\r\n  const priceInUsd = multiplyPriceByAmount(bnbPrice, priceAsFloat)\r\n\r\n  const priceIsOutOfRange = priceAsFloat > MAX_PRICE || priceAsFloat < MIN_PRICE\r\n\r\n  const { tooltip, tooltipVisible, targetRef } = useTooltip(\r\n    <>\r\n      <Text>\r\n        {t(\r\n          'When selling NFTs from this collection, a portion of the BNB paid will be diverted before reaching the seller:',\r\n        )}\r\n      </Text>\r\n      {creatorFeeAsNumber > 0 && (\r\n        <Text>{t('%percentage%% royalties to the collection owner', { percentage: creatorFee })}</Text>\r\n      )}\r\n      <Text>{t('%percentage%% trading fee will be used to buy & burn CAKE', { percentage: tradingFee })}</Text>\r\n    </>,\r\n    { placement: 'auto' },\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (inputRef && inputRef.current) {\r\n      inputRef.current.focus()\r\n    }\r\n  }, [inputRef])\r\n\r\n  const getButtonText = () => {\r\n    if (variant === 'adjust') {\r\n      if (adjustedPriceIsTheSame || priceIsValid) {\r\n        return t('Input New Sale Price')\r\n      }\r\n      return t('Confirm')\r\n    }\r\n    return t('Enable Listing')\r\n  }\r\n  return (\r\n    <>\r\n      <Text fontSize=\"24px\" bold p=\"16px\">\r\n        {variant === 'set' ? t('Set Price') : t('Adjust Sale Price')}\r\n      </Text>\r\n      <GreyedOutContainer>\r\n        <Text fontSize=\"12px\" color=\"secondary\" textTransform=\"uppercase\" bold>\r\n          {t('Set Price')}\r\n        </Text>\r\n        <Flex>\r\n          <Flex flex=\"1\" alignItems=\"center\">\r\n            <BinanceIcon width={24} height={24} mr=\"4px\" />\r\n            <Text bold>WBNB</Text>\r\n          </Flex>\r\n          <Flex flex=\"2\">\r\n            <RightAlignedInput\r\n              scale=\"sm\"\r\n              type=\"number\"\r\n              inputMode=\"decimal\"\r\n              value={price}\r\n              ref={inputRef}\r\n              isWarning={priceIsOutOfRange}\r\n              onChange={(e) => setPrice(e.target.value)}\r\n            />\r\n          </Flex>\r\n        </Flex>\r\n        <Flex alignItems=\"center\" height=\"21px\" justifyContent=\"flex-end\">\r\n          {!Number.isNaN(priceInUsd) && (\r\n            <Text fontSize=\"12px\" color=\"textSubtle\">\r\n              {`$${priceInUsd.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`}\r\n            </Text>\r\n          )}\r\n        </Flex>\r\n        {priceIsOutOfRange && (\r\n          <Text fontSize=\"12px\" color=\"failure\">\r\n            {t('Allowed price range is between %minPrice% and %maxPrice% WBNB', {\r\n              minPrice: MIN_PRICE,\r\n              maxPrice: MAX_PRICE,\r\n            })}\r\n          </Text>\r\n        )}\r\n        <Flex mt=\"8px\">\r\n          <Text small color=\"textSubtle\" mr=\"8px\">\r\n            {t('Seller pays %percentage%% platform fee on sale', {\r\n              percentage: creatorFeeAsNumber + tradingFeeAsNumber,\r\n            })}\r\n          </Text>\r\n          <span ref={targetRef}>\r\n            <ErrorIcon />\r\n          </span>\r\n          {tooltipVisible && tooltip}\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\" mt=\"16px\">\r\n          <Text small color=\"textSubtle\">\r\n            {t('Platform fee if sold')}\r\n          </Text>\r\n          <FeeAmountCell bnbAmount={priceAsFloat} creatorFee={creatorFeeAsNumber} tradingFee={tradingFeeAsNumber} />\r\n        </Flex>\r\n        {lowestPrice && (\r\n          <Flex justifyContent=\"space-between\" alignItems=\"center\" mt=\"16px\">\r\n            <Text small color=\"textSubtle\">\r\n              {t('Lowest price on market')}\r\n            </Text>\r\n            <BnbAmountCell bnbAmount={lowestPrice} />\r\n          </Flex>\r\n        )}\r\n      </GreyedOutContainer>\r\n      <Grid gridTemplateColumns=\"32px 1fr\" p=\"16px\" maxWidth=\"360px\">\r\n        <Flex alignSelf=\"flex-start\">\r\n          <ErrorIcon width={24} height={24} color=\"textSubtle\" />\r\n        </Flex>\r\n        <Box>\r\n          <Text small color=\"textSubtle\">\r\n            {t('The NFT will be removed from your wallet and put on sale at this price.')}\r\n          </Text>\r\n          <Text small color=\"textSubtle\">\r\n            {t('Sales are in WBNB. You can swap WBNB to BNB 1:1 for free with PancakeSwap.')}\r\n          </Text>\r\n        </Box>\r\n      </Grid>\r\n      <Divider />\r\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\r\n        <Button\r\n          mb=\"8px\"\r\n          onClick={continueToNextStage}\r\n          disabled={priceIsValid || adjustedPriceIsTheSame || priceIsOutOfRange}\r\n        >\r\n          {getButtonText()}\r\n        </Button>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SetPriceStage\r\n","import React from 'react'\r\nimport { Flex, Grid, Text, Button, Link, LinkExternal, BinanceIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { nftsBaseUrl, pancakeBunniesAddress } from 'views/Nft/market/constants'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { getBscScanLinkForNft } from 'utils'\r\nimport { Divider, HorizontalDivider, RoundedImage } from '../shared/styles'\r\n\r\ninterface EditStageProps {\r\n  nftToSell: NftToken\r\n  lowestPrice: number\r\n  continueToAdjustPriceStage: () => void\r\n  continueToRemoveFromMarketStage: () => void\r\n}\r\n\r\n// Initial stage when user wants to edit already listed NFT (i.e. adjust price or remove from sale)\r\nconst EditStage: React.FC<EditStageProps> = ({\r\n  nftToSell,\r\n  lowestPrice,\r\n  continueToAdjustPriceStage,\r\n  continueToRemoveFromMarketStage,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const itemPageUrlId =\r\n    nftToSell.collectionAddress.toLowerCase() === pancakeBunniesAddress.toLowerCase()\r\n      ? nftToSell.attributes[0].value\r\n      : nftToSell.tokenId\r\n\r\n  return (\r\n    <>\r\n      <Flex p=\"16px\">\r\n        <RoundedImage src={nftToSell.image.thumbnail} height={68} width={68} mr=\"8px\" />\r\n        <Grid flex=\"1\" gridTemplateColumns=\"1fr 1fr\" alignItems=\"center\">\r\n          <Text bold>{nftToSell.name}</Text>\r\n          <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\r\n            {nftToSell.collectionName}\r\n          </Text>\r\n          {lowestPrice && (\r\n            <>\r\n              <Text small color=\"textSubtle\">\r\n                {t('Lowest price')}\r\n              </Text>\r\n\r\n              <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n                <BinanceIcon width={16} height={16} mr=\"4px\" />\r\n                <Text small>{lowestPrice}</Text>\r\n              </Flex>\r\n            </>\r\n          )}\r\n          <Text small color=\"textSubtle\">\r\n            {t('Your price')}\r\n          </Text>\r\n          <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n            <BinanceIcon width={16} height={16} mr=\"4px\" />\r\n            <Text small>{nftToSell.marketData.currentAskPrice}</Text>\r\n          </Flex>\r\n        </Grid>\r\n      </Flex>\r\n      <Flex justifyContent=\"space-between\" px=\"16px\" mt=\"8px\">\r\n        <Flex flex=\"2\">\r\n          <Text small color=\"textSubtle\">\r\n            {t('Token ID: %id%', { id: nftToSell.tokenId })}\r\n          </Text>\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\" flex=\"3\">\r\n          <Button\r\n            as={Link}\r\n            p=\"0px\"\r\n            height=\"16px\"\r\n            external\r\n            variant=\"text\"\r\n            href={`${nftsBaseUrl}/collections/${nftToSell.collectionAddress}/${itemPageUrlId}`}\r\n          >\r\n            {t('View Item')}\r\n          </Button>\r\n          <HorizontalDivider />\r\n          <LinkExternal\r\n            p=\"0px\"\r\n            height=\"16px\"\r\n            href={getBscScanLinkForNft(nftToSell.collectionAddress, nftToSell.tokenId)}\r\n          >\r\n            BscScan\r\n          </LinkExternal>\r\n        </Flex>\r\n      </Flex>\r\n      <Divider />\r\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\r\n        <Button mb=\"8px\" onClick={continueToAdjustPriceStage}>\r\n          {t('Adjust Sale Price')}\r\n        </Button>\r\n        <Button variant=\"danger\" onClick={continueToRemoveFromMarketStage}>\r\n          {t('Remove from Market')}\r\n        </Button>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default EditStage\r\n","import React from 'react'\r\nimport { Flex, Box, Text, Button } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Divider } from '../shared/styles'\r\n\r\ninterface RemoveStageProps {\r\n  continueToNextStage: () => void\r\n}\r\n\r\nconst RemoveStage: React.FC<RemoveStageProps> = ({ continueToNextStage }) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <>\r\n      <Box p=\"16px\" maxWidth=\"360px\">\r\n        <Text fontSize=\"24px\" bold>\r\n          {t('Remove from Market')}\r\n        </Text>\r\n        <Text mt=\"24px\" color=\"textSubtle\">\r\n          {t('Removing this NFT from the marketplace will return it to your wallet.')}\r\n        </Text>\r\n        <Text mt=\"16px\" color=\"textSubtle\">\r\n          {t('Continue?')}\r\n        </Text>\r\n      </Box>\r\n      <Divider />\r\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\r\n        <Button mb=\"8px\" onClick={continueToNextStage}>\r\n          {t('Confirm')}\r\n        </Button>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default RemoveStage\r\n","import React from 'react'\r\nimport { Flex, Grid, Text, Button, Input, BinanceIcon, ErrorIcon } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { Divider, RoundedImage } from '../shared/styles'\r\nimport { GreyedOutContainer } from './styles'\r\n\r\ninterface TransferStageProps {\r\n  nftToSell: NftToken\r\n  lowestPrice: number\r\n  transferAddress: string\r\n  setTransferAddress: React.Dispatch<React.SetStateAction<string>>\r\n  isInvalidTransferAddress: boolean\r\n  continueToNextStage: () => void\r\n}\r\n\r\nconst TransferStage: React.FC<TransferStageProps> = ({\r\n  nftToSell,\r\n  lowestPrice,\r\n  transferAddress,\r\n  setTransferAddress,\r\n  isInvalidTransferAddress,\r\n  continueToNextStage,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const transferAddressEqualsConnectedAddress = transferAddress.toLowerCase() === account.toLowerCase()\r\n  const getErrorText = () => {\r\n    if (isInvalidTransferAddress) {\r\n      return t('That’s not a Binance Smart Chain wallet address.')\r\n    }\r\n    if (transferAddressEqualsConnectedAddress) {\r\n      return t('This address is the one that is currently connected')\r\n    }\r\n    return null\r\n  }\r\n  return (\r\n    <>\r\n      <Text fontSize=\"24px\" bold px=\"16px\" pt=\"16px\">\r\n        {t('Transfer to New Wallet')}\r\n      </Text>\r\n      <Flex p=\"16px\">\r\n        <RoundedImage src={nftToSell.image.thumbnail} height={68} width={68} mr=\"8px\" />\r\n        <Grid flex=\"1\" gridTemplateColumns=\"1fr 1fr\" alignItems=\"center\">\r\n          <Text bold>{nftToSell.name}</Text>\r\n          <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\r\n            {nftToSell.collectionName}\r\n          </Text>\r\n          {lowestPrice && (\r\n            <>\r\n              <Text small color=\"textSubtle\">\r\n                {t('Lowest price')}\r\n              </Text>\r\n              <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n                <BinanceIcon width={16} height={16} mr=\"4px\" />\r\n                <Text small>{lowestPrice}</Text>\r\n              </Flex>\r\n            </>\r\n          )}\r\n        </Grid>\r\n      </Flex>\r\n      <GreyedOutContainer>\r\n        <Text fontSize=\"12px\" color=\"secondary\" textTransform=\"uppercase\" bold>\r\n          {t('Receiving address')}\r\n        </Text>\r\n        <Input\r\n          scale=\"sm\"\r\n          isWarning={isInvalidTransferAddress || transferAddressEqualsConnectedAddress}\r\n          placeholder={t('Paste BSC address')}\r\n          value={transferAddress}\r\n          onChange={(e) => setTransferAddress(e.target.value)}\r\n        />\r\n        {isInvalidTransferAddress ||\r\n          (transferAddressEqualsConnectedAddress && (\r\n            <Text fontSize=\"12px\" color=\"failure\" mt=\"4px\">\r\n              {getErrorText()}\r\n            </Text>\r\n          ))}\r\n      </GreyedOutContainer>\r\n      <Grid gridTemplateColumns=\"32px 1fr\" p=\"16px\" maxWidth=\"360px\">\r\n        <Flex alignSelf=\"flex-start\">\r\n          <ErrorIcon width={24} height={24} color=\"textSubtle\" />\r\n        </Flex>\r\n        <Text small color=\"textSubtle\">\r\n          {t('This action will send your NFT to the address you have indicated above. Make sure it’s the correct')}\r\n        </Text>\r\n      </Grid>\r\n      <Divider />\r\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\r\n        <Button\r\n          mb=\"8px\"\r\n          onClick={continueToNextStage}\r\n          disabled={isInvalidTransferAddress || transferAddress.length === 0 || transferAddressEqualsConnectedAddress}\r\n        >\r\n          {t('Confirm')}\r\n        </Button>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TransferStage\r\n","import React, { useState } from 'react'\r\nimport { InjectedModalProps } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { parseUnits } from 'ethers/lib/utils'\r\nimport useTheme from 'hooks/useTheme'\r\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\nimport useToast from 'hooks/useToast'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { ContextApi } from 'contexts/Localization/types'\r\nimport { isAddress } from 'utils'\r\nimport { useErc721CollectionContract, useNftMarketContract } from 'hooks/useContract'\r\nimport { useAppDispatch } from 'state'\r\nimport { removeUserNft, updateUserNft } from 'state/nftMarket/reducer'\r\nimport { NftLocation, NftToken } from 'state/nftMarket/types'\r\nimport { useGetLowestPriceFromNft } from 'views/Nft/market/hooks/useGetLowestPrice'\r\nimport SellStage from './SellStage'\r\nimport SetPriceStage from './SetPriceStage'\r\nimport EditStage from './EditStage'\r\nimport ApproveAndConfirmStage from '../shared/ApproveAndConfirmStage'\r\nimport TransactionConfirmed from '../shared/TransactionConfirmed'\r\nimport { StyledModal, stagesWithBackButton } from './styles'\r\nimport { SellingStage } from './types'\r\nimport ConfirmStage from '../shared/ConfirmStage'\r\nimport RemoveStage from './RemoveStage'\r\nimport TransferStage from './TransferStage'\r\n\r\nexport const modalTitles = (stage: SellingStage, t: ContextApi['t']) => {\r\n  switch (stage) {\r\n    // Sell flow\r\n    case SellingStage.SELL:\r\n      return t('Details')\r\n    case SellingStage.SET_PRICE:\r\n    case SellingStage.APPROVE_AND_CONFIRM_SELL:\r\n      return t('Back')\r\n    // Adjust price flow\r\n    case SellingStage.EDIT:\r\n      return t('Details')\r\n    case SellingStage.ADJUST_PRICE:\r\n      return t('Back')\r\n    case SellingStage.CONFIRM_ADJUST_PRICE:\r\n      return t('Confirm transaction')\r\n    // Remove from market flow\r\n    case SellingStage.REMOVE_FROM_MARKET:\r\n      return t('Back')\r\n    case SellingStage.CONFIRM_REMOVE_FROM_MARKET:\r\n      return t('Confirm transaction')\r\n    // Transfer flow\r\n    case SellingStage.TRANSFER:\r\n      return t('Back')\r\n    case SellingStage.CONFIRM_TRANSFER:\r\n      return t('Confirm transaction')\r\n    // Common\r\n    case SellingStage.TX_CONFIRMED:\r\n      return t('Transaction Confirmed')\r\n    default:\r\n      return ''\r\n  }\r\n}\r\n\r\nconst getToastText = (variant: string, stage: SellingStage, t: ContextApi['t']) => {\r\n  if (stage === SellingStage.CONFIRM_REMOVE_FROM_MARKET) {\r\n    return t('Your NFT has been returned to your wallet')\r\n  }\r\n  if (stage === SellingStage.CONFIRM_TRANSFER) {\r\n    return t('Your NFT has been transferred to another wallet')\r\n  }\r\n  if (variant === 'sell') {\r\n    return t('Your NFT has been listed for sale!')\r\n  }\r\n  return t('Your NFT listing has been changed.')\r\n}\r\n\r\ninterface SellModalProps extends InjectedModalProps {\r\n  variant: 'sell' | 'edit'\r\n  nftToSell: NftToken\r\n}\r\n\r\nconst SellModal: React.FC<SellModalProps> = ({ variant, nftToSell, onDismiss }) => {\r\n  const [stage, setStage] = useState(variant === 'sell' ? SellingStage.SELL : SellingStage.EDIT)\r\n  const [price, setPrice] = useState(variant === 'sell' ? '' : nftToSell.marketData.currentAskPrice)\r\n  const [transferAddress, setTransferAddress] = useState('')\r\n  const [confirmedTxHash, setConfirmedTxHash] = useState('')\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const { account } = useWeb3React()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n  const { toastSuccess } = useToast()\r\n  const collectionContract = useErc721CollectionContract(nftToSell.collectionAddress)\r\n  const nftMarketContract = useNftMarketContract()\r\n  const dispatch = useAppDispatch()\r\n\r\n  const isInvalidTransferAddress = transferAddress.length > 0 && !isAddress(transferAddress)\r\n\r\n  const { lowestPrice } = useGetLowestPriceFromNft(nftToSell)\r\n\r\n  const goBack = () => {\r\n    switch (stage) {\r\n      case SellingStage.SET_PRICE:\r\n        setStage(SellingStage.SELL)\r\n        break\r\n      case SellingStage.APPROVE_AND_CONFIRM_SELL:\r\n        setStage(SellingStage.SET_PRICE)\r\n        break\r\n      case SellingStage.ADJUST_PRICE:\r\n        setPrice(nftToSell.marketData.currentAskPrice)\r\n        setStage(SellingStage.EDIT)\r\n        break\r\n      case SellingStage.CONFIRM_ADJUST_PRICE:\r\n        setStage(SellingStage.ADJUST_PRICE)\r\n        break\r\n      case SellingStage.REMOVE_FROM_MARKET:\r\n        setStage(SellingStage.EDIT)\r\n        break\r\n      case SellingStage.CONFIRM_REMOVE_FROM_MARKET:\r\n        setStage(SellingStage.REMOVE_FROM_MARKET)\r\n        break\r\n      case SellingStage.TRANSFER:\r\n        setStage(SellingStage.SELL)\r\n        break\r\n      case SellingStage.CONFIRM_TRANSFER:\r\n        setStage(SellingStage.TRANSFER)\r\n        break\r\n      default:\r\n        break\r\n    }\r\n  }\r\n\r\n  const continueToNextStage = () => {\r\n    switch (stage) {\r\n      case SellingStage.SELL:\r\n        setStage(SellingStage.SET_PRICE)\r\n        break\r\n      case SellingStage.SET_PRICE:\r\n        setStage(SellingStage.APPROVE_AND_CONFIRM_SELL)\r\n        break\r\n      case SellingStage.EDIT:\r\n        setStage(SellingStage.ADJUST_PRICE)\r\n        break\r\n      case SellingStage.ADJUST_PRICE:\r\n        setStage(SellingStage.CONFIRM_ADJUST_PRICE)\r\n        break\r\n      case SellingStage.REMOVE_FROM_MARKET:\r\n        setStage(SellingStage.CONFIRM_REMOVE_FROM_MARKET)\r\n        break\r\n      case SellingStage.TRANSFER:\r\n        setStage(SellingStage.CONFIRM_TRANSFER)\r\n        break\r\n      default:\r\n        break\r\n    }\r\n  }\r\n\r\n  const continueToRemoveFromMarketStage = () => {\r\n    setStage(SellingStage.REMOVE_FROM_MARKET)\r\n  }\r\n\r\n  const continueToTransferStage = () => {\r\n    setStage(SellingStage.TRANSFER)\r\n  }\r\n\r\n  const dispatchSuccessAction = () => {\r\n    switch (stage) {\r\n      // Remove from sale\r\n      case SellingStage.CONFIRM_REMOVE_FROM_MARKET:\r\n        dispatch(\r\n          updateUserNft({\r\n            tokenId: nftToSell.tokenId,\r\n            collectionAddress: nftToSell.collectionAddress,\r\n            location: NftLocation.WALLET,\r\n          }),\r\n        )\r\n        break\r\n      // Transfer NFT\r\n      case SellingStage.CONFIRM_TRANSFER:\r\n        dispatch(\r\n          removeUserNft({\r\n            tokenId: nftToSell.tokenId,\r\n          }),\r\n        )\r\n        break\r\n      default:\r\n        // Modify listing OR list for sale\r\n        dispatch(\r\n          updateUserNft({\r\n            tokenId: nftToSell.tokenId,\r\n            collectionAddress: nftToSell.collectionAddress,\r\n            location: NftLocation.FORSALE,\r\n          }),\r\n        )\r\n        break\r\n    }\r\n  }\r\n\r\n  const { isApproving, isApproved, isConfirming, handleApprove, handleConfirm } = useApproveConfirmTransaction({\r\n    onRequiresApproval: async () => {\r\n      try {\r\n        const approvedForContract = await collectionContract.isApprovedForAll(account, nftMarketContract.address)\r\n        return approvedForContract\r\n      } catch (error) {\r\n        return false\r\n      }\r\n    },\r\n    onApprove: () => {\r\n      return callWithGasPrice(collectionContract, 'setApprovalForAll', [nftMarketContract.address, true])\r\n    },\r\n    onApproveSuccess: async ({ receipt }) => {\r\n      toastSuccess(\r\n        t('Contract approved - you can now put your NFT for sale!'),\r\n        <ToastDescriptionWithTx txHash={receipt.transactionHash} />,\r\n      )\r\n    },\r\n    onConfirm: () => {\r\n      if (stage === SellingStage.CONFIRM_REMOVE_FROM_MARKET) {\r\n        return callWithGasPrice(nftMarketContract, 'cancelAskOrder', [nftToSell.collectionAddress, nftToSell.tokenId])\r\n      }\r\n      if (stage === SellingStage.CONFIRM_TRANSFER) {\r\n        return callWithGasPrice(collectionContract, 'safeTransferFrom(address,address,uint256)', [\r\n          account,\r\n          transferAddress,\r\n          nftToSell.tokenId,\r\n        ])\r\n      }\r\n      const methodName = variant === 'sell' ? 'createAskOrder' : 'modifyAskOrder'\r\n      const askPrice = parseUnits(price)\r\n      return callWithGasPrice(nftMarketContract, methodName, [nftToSell.collectionAddress, nftToSell.tokenId, askPrice])\r\n    },\r\n    onSuccess: async ({ receipt }) => {\r\n      toastSuccess(getToastText(variant, stage, t), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\r\n      dispatchSuccessAction()\r\n      setConfirmedTxHash(receipt.transactionHash)\r\n      setStage(SellingStage.TX_CONFIRMED)\r\n    },\r\n  })\r\n\r\n  const showBackButton = stagesWithBackButton.includes(stage) && !isConfirming && !isApproving\r\n\r\n  return (\r\n    <StyledModal\r\n      title={modalTitles(stage, t)}\r\n      stage={stage}\r\n      onDismiss={onDismiss}\r\n      onBack={showBackButton ? goBack : null}\r\n      headerBackground={theme.colors.gradients.cardHeader}\r\n    >\r\n      {stage === SellingStage.SELL && (\r\n        <SellStage\r\n          nftToSell={nftToSell}\r\n          lowestPrice={lowestPrice}\r\n          continueToNextStage={continueToNextStage}\r\n          continueToTransferStage={continueToTransferStage}\r\n        />\r\n      )}\r\n      {stage === SellingStage.SET_PRICE && (\r\n        <SetPriceStage\r\n          nftToSell={nftToSell}\r\n          variant=\"set\"\r\n          continueToNextStage={continueToNextStage}\r\n          lowestPrice={lowestPrice}\r\n          price={price}\r\n          setPrice={setPrice}\r\n        />\r\n      )}\r\n      {stage === SellingStage.APPROVE_AND_CONFIRM_SELL && (\r\n        <ApproveAndConfirmStage\r\n          variant=\"sell\"\r\n          isApproved={isApproved}\r\n          isApproving={isApproving}\r\n          isConfirming={isConfirming}\r\n          handleApprove={handleApprove}\r\n          handleConfirm={handleConfirm}\r\n        />\r\n      )}\r\n      {stage === SellingStage.TX_CONFIRMED && <TransactionConfirmed txHash={confirmedTxHash} onDismiss={onDismiss} />}\r\n      {stage === SellingStage.EDIT && (\r\n        <EditStage\r\n          nftToSell={nftToSell}\r\n          lowestPrice={lowestPrice}\r\n          continueToAdjustPriceStage={continueToNextStage}\r\n          continueToRemoveFromMarketStage={continueToRemoveFromMarketStage}\r\n        />\r\n      )}\r\n      {stage === SellingStage.ADJUST_PRICE && (\r\n        <SetPriceStage\r\n          nftToSell={nftToSell}\r\n          variant=\"adjust\"\r\n          continueToNextStage={continueToNextStage}\r\n          currentPrice={nftToSell.marketData.currentAskPrice}\r\n          lowestPrice={lowestPrice}\r\n          price={price}\r\n          setPrice={setPrice}\r\n        />\r\n      )}\r\n      {stage === SellingStage.CONFIRM_ADJUST_PRICE && (\r\n        <ConfirmStage isConfirming={isConfirming} handleConfirm={handleConfirm} />\r\n      )}\r\n      {stage === SellingStage.REMOVE_FROM_MARKET && <RemoveStage continueToNextStage={continueToNextStage} />}\r\n      {stage === SellingStage.CONFIRM_REMOVE_FROM_MARKET && (\r\n        <ConfirmStage isConfirming={isConfirming} handleConfirm={handleConfirm} />\r\n      )}\r\n      {stage === SellingStage.TRANSFER && (\r\n        <TransferStage\r\n          nftToSell={nftToSell}\r\n          lowestPrice={lowestPrice}\r\n          continueToNextStage={continueToNextStage}\r\n          transferAddress={transferAddress}\r\n          setTransferAddress={setTransferAddress}\r\n          isInvalidTransferAddress={isInvalidTransferAddress}\r\n        />\r\n      )}\r\n      {stage === SellingStage.CONFIRM_TRANSFER && (\r\n        <ConfirmStage isConfirming={isConfirming} handleConfirm={handleConfirm} />\r\n      )}\r\n    </StyledModal>\r\n  )\r\n}\r\n\r\nexport default SellModal\r\n","import React from 'react'\r\nimport { NoProfileAvatarIcon } from '@pancakeswap/uikit'\r\nimport { Profile } from 'state/types'\r\nimport styled from 'styled-components'\r\n\r\nexport interface ProfileAvatarProps {\r\n  profile: Profile\r\n}\r\n\r\nconst TeamAvatar = styled.img`\r\n  border: 1px solid ${({ theme }) => theme.card.background};\r\n  border-radius: 50%;\r\n  bottom: 0px;\r\n  position: absolute;\r\n  right: 0px;\r\n  min-width: 20px;\r\n  min-height: 20px;\r\n  width: 37.5%;\r\n  height: 37.5%;\r\n  z-index: 5;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    border-width: 2px;\r\n  }\r\n`\r\n\r\nconst AvatarWrapper = styled.div<{ bg: string }>`\r\n  background: url('${({ bg }) => bg}');\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  border-radius: 50%;\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  & > img {\r\n    border-radius: 50%;\r\n  }\r\n`\r\n// TODO: replace with no profile avatar icon\r\nconst AvatarInactive = styled(NoProfileAvatarIcon)`\r\n  width: 100%;\r\n  height: 100%;\r\n`\r\n\r\nconst ProfileAvatarWithTeam: React.FC<ProfileAvatarProps> = ({ profile }) => {\r\n  return (\r\n    <AvatarWrapper bg={profile.nft?.image.thumbnail}>\r\n      {!profile.isActive && <AvatarInactive />}\r\n      <TeamAvatar src={`/images/teams/${profile.team.images.alt}`} alt={profile.team.name} />\r\n    </AvatarWrapper>\r\n  )\r\n}\r\n\r\nexport default ProfileAvatarWithTeam\r\n","import { useEffect, useMemo } from 'react'\r\nimport isEmpty from 'lodash/isEmpty'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchUserNfts } from 'state/nftMarket/reducer'\r\nimport { useGetCollections, useUserNfts } from 'state/nftMarket/hooks'\r\nimport usePreviousValue from 'hooks/usePreviousValue'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport { NftLocation, UserNftInitializationState } from 'state/nftMarket/types'\r\nimport { useWeb3React } from '@web3-react/core'\r\n\r\nconst useFetchUserNfts = () => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const { profile, isInitialized: isProfileInitialized, isLoading: isProfileLoading } = useProfile()\r\n  const { userNftsInitializationState } = useUserNfts()\r\n  const collections = useGetCollections()\r\n\r\n  const hasProfileNft = profile?.tokenId\r\n  const profileNftTokenId = profile?.tokenId?.toString()\r\n  const profileNftCollectionAddress = profile?.collectionAddress\r\n\r\n  const profileNftWithCollectionAddress = useMemo(() => {\r\n    if (hasProfileNft) {\r\n      return {\r\n        tokenId: profileNftTokenId,\r\n        collectionAddress: profileNftCollectionAddress,\r\n        nftLocation: NftLocation.PROFILE,\r\n      }\r\n    }\r\n    return null\r\n  }, [profileNftTokenId, profileNftCollectionAddress, hasProfileNft])\r\n\r\n  const previousProfileNftTokenId = usePreviousValue(profileNftTokenId)\r\n\r\n  // Fetch on first load when profile fetch is resolved\r\n  const shouldFetch =\r\n    account &&\r\n    userNftsInitializationState === UserNftInitializationState.UNINITIALIZED &&\r\n    isProfileInitialized &&\r\n    !isProfileLoading\r\n\r\n  // Fetch on account / profile change, once profile fetch is resolved\r\n  const hasAccountSwitched = previousProfileNftTokenId !== profileNftTokenId && !isProfileLoading && account\r\n\r\n  useEffect(() => {\r\n    if ((shouldFetch || hasAccountSwitched) && !isEmpty(collections)) {\r\n      dispatch(fetchUserNfts({ account, collections, profileNftWithCollectionAddress }))\r\n    }\r\n  }, [\r\n    dispatch,\r\n    account,\r\n    shouldFetch,\r\n    hasAccountSwitched,\r\n    profileNftTokenId,\r\n    collections,\r\n    profileNftWithCollectionAddress,\r\n  ])\r\n}\r\n\r\nexport default useFetchUserNfts\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, Radio } from '@pancakeswap/uikit'\r\n\r\ninterface SelectionCardProps {\r\n  name: string\r\n  value: string | number\r\n  isChecked?: boolean\r\n  onChange: (val: any) => void\r\n  image: string\r\n  disabled?: boolean\r\n}\r\n\r\nconst Label = styled.label<{ isDisabled: boolean }>`\r\n  cursor: ${({ isDisabled }) => (isDisabled ? 'not-allowed' : 'pointer')};\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  opacity: ${({ isDisabled }) => (isDisabled ? '0.6' : '1')};\r\n`\r\n\r\nconst Body = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-grow: 1;\r\n  height: 80px;\r\n  padding: 8px 16px;\r\n`\r\n\r\nconst Children = styled.div`\r\n  margin-left: 16px;\r\n`\r\n\r\nconst StyledBackgroundImage = styled.div<{ src: string }>`\r\n  align-self: stretch;\r\n  background-image: url('${({ src }) => src}');\r\n  background-size: contain;\r\n  background-position: center;\r\n  background-repeat: no-repeat;\r\n  flex: none;\r\n  width: 80px;\r\n`\r\n\r\nconst SelectionCard: React.FC<SelectionCardProps> = ({\r\n  name,\r\n  value,\r\n  isChecked = false,\r\n  image,\r\n  onChange,\r\n  disabled,\r\n  children,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <Card isSuccess={isChecked} isDisabled={disabled} mb=\"16px\" {...props}>\r\n      <Label isDisabled={disabled}>\r\n        <Body>\r\n          <Radio\r\n            name={name}\r\n            checked={isChecked}\r\n            value={value}\r\n            onChange={(e) => onChange(e.target.value)}\r\n            disabled={disabled}\r\n            style={{ flex: 'none' }}\r\n          />\r\n          <Children>{children}</Children>\r\n        </Body>\r\n        <StyledBackgroundImage src={image} />\r\n      </Label>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default SelectionCard\r\n","import { useReducer } from 'react'\n\nexport enum Views {\n  START = 'start',\n  CHANGE = 'change',\n  REMOVE = 'remove',\n  APPROVE = 'approve',\n}\n\nexport type Actions =\n  | {\n      type: 'set_view'\n      view: Views\n    }\n  | {\n      type: 'go_previous'\n    }\n\nexport interface State {\n  currentView: Views\n  previousView: Views | null\n}\n\nconst reducer = (state: State, action: Actions): State => {\n  switch (action.type) {\n    case 'set_view':\n      return {\n        ...state,\n        currentView: action.view,\n        previousView: state.currentView,\n      }\n    case 'go_previous':\n      return {\n        ...state,\n        currentView: state.previousView,\n        previousView: state.currentView,\n      }\n    default:\n      return state\n  }\n}\n\nexport interface UseEditProfileResponse extends State {\n  goToStart: () => void\n  goToChange: () => void\n  goToApprove: () => void\n  goToRemove: () => void\n  goPrevious: () => void\n}\n\nconst useEditProfile = (): UseEditProfileResponse => {\n  const [state, dispatch] = useReducer(reducer, {\n    currentView: Views.START,\n    previousView: null,\n  })\n\n  const goToStart = () => dispatch({ type: 'set_view', view: Views.START })\n  const goToChange = () => dispatch({ type: 'set_view', view: Views.CHANGE })\n  const goToRemove = () => dispatch({ type: 'set_view', view: Views.REMOVE })\n  const goToApprove = () => dispatch({ type: 'set_view', view: Views.APPROVE })\n  const goPrevious = () => dispatch({ type: 'go_previous' })\n\n  return { ...state, goToStart, goToChange, goToRemove, goToApprove, goPrevious }\n}\n\nexport default useEditProfile\n","import { useEffect, useState } from 'react'\r\nimport { ethers } from 'ethers'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport profileABI from 'config/abi/pancakeProfile.json'\r\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\r\nimport useToast from 'hooks/useToast'\r\n\r\nconst useGetProfileCosts = () => {\r\n  const { t } = useTranslation()\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  const [costs, setCosts] = useState({\r\n    numberCakeToReactivate: ethers.BigNumber.from(0),\r\n    numberCakeToRegister: ethers.BigNumber.from(0),\r\n    numberCakeToUpdate: ethers.BigNumber.from(0),\r\n  })\r\n  const { toastError } = useToast()\r\n\r\n  useEffect(() => {\r\n    const fetchCosts = async () => {\r\n      try {\r\n        const calls = ['numberCakeToReactivate', 'numberCakeToRegister', 'numberCakeToUpdate'].map((method) => ({\r\n          address: getPancakeProfileAddress(),\r\n          name: method,\r\n        }))\r\n        const [[numberCakeToReactivate], [numberCakeToRegister], [numberCakeToUpdate]] = await multicallv2<\r\n          [[ethers.BigNumber], [ethers.BigNumber], [ethers.BigNumber]]\r\n        >(profileABI, calls)\r\n\r\n        setCosts({\r\n          numberCakeToReactivate,\r\n          numberCakeToRegister,\r\n          numberCakeToUpdate,\r\n        })\r\n        setIsLoading(false)\r\n      } catch (error) {\r\n        toastError(t('Error'), t('Could not retrieve CAKE costs for profile'))\r\n      }\r\n    }\r\n\r\n    fetchCosts()\r\n  }, [setCosts, toastError, t])\r\n\r\n  return { costs, isLoading }\r\n}\r\n\r\nexport default useGetProfileCosts\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Button, Flex, Text, InjectedModalProps } from '@pancakeswap/uikit'\r\nimport { formatBigNumber } from 'utils/formatBalance'\r\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\r\nimport { useCake } from 'hooks/useContract'\r\nimport { FetchStatus, useGetCakeBalance } from 'hooks/useTokenBalance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useGetProfileCosts from 'views/Nft/market/Profile/hooks/useGetProfileCosts'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport ProfileAvatarWithTeam from 'components/ProfileAvatarWithTeam'\r\nimport { UseEditProfileResponse } from './reducer'\r\n\r\ninterface StartPageProps extends InjectedModalProps {\r\n  goToChange: UseEditProfileResponse['goToChange']\r\n  goToRemove: UseEditProfileResponse['goToRemove']\r\n  goToApprove: UseEditProfileResponse['goToApprove']\r\n}\r\n\r\nconst DangerOutline = styled(Button).attrs({ variant: 'secondary' })`\r\n  border-color: ${({ theme }) => theme.colors.failure};\r\n  color: ${({ theme }) => theme.colors.failure};\r\n  margin-bottom: 24px;\r\n\r\n  &:hover:not(:disabled):not(.button--disabled):not(:active) {\r\n    border-color: ${({ theme }) => theme.colors.failure};\r\n    opacity: 0.8;\r\n  }\r\n`\r\n\r\nconst AvatarWrapper = styled.div`\r\n  height: 64px;\r\n  width: 64px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    height: 128px;\r\n    width: 128px;\r\n  }\r\n`\r\n\r\nconst StartPage: React.FC<StartPageProps> = ({ goToApprove, goToChange, goToRemove, onDismiss }) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const cakeContract = useCake()\r\n  const { profile } = useProfile()\r\n  const { balance: cakeBalance, fetchStatus } = useGetCakeBalance()\r\n  const {\r\n    costs: { numberCakeToUpdate, numberCakeToReactivate },\r\n    isLoading: isProfileCostsLoading,\r\n  } = useGetProfileCosts()\r\n  const [needsApproval, setNeedsApproval] = useState(null)\r\n  const minimumCakeRequired = profile.isActive ? numberCakeToUpdate : numberCakeToReactivate\r\n  const hasMinimumCakeRequired = fetchStatus === FetchStatus.SUCCESS && cakeBalance.gte(minimumCakeRequired)\r\n\r\n  /**\r\n   * Check if the wallet has the required CAKE allowance to change their profile pic or reactivate\r\n   * If they don't, we send them to the approval screen first\r\n   */\r\n  useEffect(() => {\r\n    const checkApprovalStatus = async () => {\r\n      const response = await cakeContract.allowance(account, getPancakeProfileAddress())\r\n      setNeedsApproval(response.lt(minimumCakeRequired))\r\n    }\r\n\r\n    if (account && !isProfileCostsLoading) {\r\n      checkApprovalStatus()\r\n    }\r\n  }, [account, minimumCakeRequired, setNeedsApproval, cakeContract, isProfileCostsLoading])\r\n\r\n  if (!profile) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\r\n      <AvatarWrapper>\r\n        <ProfileAvatarWithTeam profile={profile} />\r\n      </AvatarWrapper>\r\n      <Flex alignItems=\"center\" style={{ height: '48px' }} justifyContent=\"center\">\r\n        <Text as=\"p\" color=\"failure\">\r\n          {!isProfileCostsLoading &&\r\n            !hasMinimumCakeRequired &&\r\n            t('%minimum% CAKE required to change profile pic', { minimum: formatBigNumber(minimumCakeRequired) })}\r\n        </Text>\r\n      </Flex>\r\n      {profile.isActive ? (\r\n        <>\r\n          <Button\r\n            width=\"100%\"\r\n            mb=\"8px\"\r\n            onClick={needsApproval === true ? goToApprove : goToChange}\r\n            disabled={isProfileCostsLoading || !hasMinimumCakeRequired || needsApproval === null}\r\n          >\r\n            {t('Change Profile Pic')}\r\n          </Button>\r\n          <DangerOutline width=\"100%\" onClick={goToRemove}>\r\n            {t('Remove Profile Pic')}\r\n          </DangerOutline>\r\n        </>\r\n      ) : (\r\n        <Button\r\n          width=\"100%\"\r\n          mb=\"8px\"\r\n          onClick={needsApproval === true ? goToApprove : goToChange}\r\n          disabled={isProfileCostsLoading || !hasMinimumCakeRequired || needsApproval === null}\r\n        >\r\n          {t('Reactivate Profile')}\r\n        </Button>\r\n      )}\r\n      <Button variant=\"text\" width=\"100%\" onClick={onDismiss}>\r\n        {t('Close Window')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StartPage\r\n","import React, { useState } from 'react'\r\nimport { AutoRenewIcon, Button, Checkbox, Flex, InjectedModalProps, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useGetProfileCosts from 'views/Nft/market/Profile/hooks/useGetProfileCosts'\r\nimport { useAppDispatch } from 'state'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport { fetchProfile } from 'state/profile'\r\nimport useToast from 'hooks/useToast'\r\nimport { formatBigNumber } from 'utils/formatBalance'\r\nimport { useProfile as useProfileContract } from 'hooks/useContract'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\n\r\ntype PauseProfilePageProps = InjectedModalProps\r\n\r\nconst PauseProfilePage: React.FC<PauseProfilePageProps> = ({ onDismiss }) => {\r\n  const [isAcknowledged, setIsAcknowledged] = useState(false)\r\n  const [isConfirming, setIsConfirming] = useState(false)\r\n  const { profile } = useProfile()\r\n  const {\r\n    costs: { numberCakeToReactivate },\r\n  } = useGetProfileCosts()\r\n  const { t } = useTranslation()\r\n  const pancakeProfileContract = useProfileContract()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n  const { account } = useWeb3React()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const dispatch = useAppDispatch()\r\n\r\n  const handleChange = () => setIsAcknowledged(!isAcknowledged)\r\n\r\n  const handleDeactivateProfile = async () => {\r\n    const tx = await callWithGasPrice(pancakeProfileContract, 'pauseProfile')\r\n    setIsConfirming(true)\r\n    const receipt = await tx.wait()\r\n    if (receipt.status) {\r\n      // Re-fetch profile\r\n      await dispatch(fetchProfile(account))\r\n      toastSuccess(t('Profile Paused!'), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\r\n      onDismiss()\r\n    } else {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      setIsConfirming(false)\r\n    }\r\n  }\r\n\r\n  if (!profile) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Text as=\"p\" color=\"failure\" mb=\"24px\">\r\n        {t('This will suspend your profile and send your Collectible back to your wallet')}\r\n      </Text>\r\n      <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\r\n        {t(\r\n          \"While your profile is suspended, you won't be able to earn points, but your achievements and points will stay associated with your profile\",\r\n        )}\r\n      </Text>\r\n      <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\r\n        {t('Cost to reactivate in the future: %cost% CAKE', { cost: formatBigNumber(numberCakeToReactivate) })}\r\n      </Text>\r\n      <label htmlFor=\"acknowledgement\" style={{ cursor: 'pointer', display: 'block', marginBottom: '24px' }}>\r\n        <Flex alignItems=\"center\">\r\n          <Checkbox id=\"acknowledgement\" checked={isAcknowledged} onChange={handleChange} scale=\"sm\" />\r\n          <Text ml=\"8px\">{t('I understand')}</Text>\r\n        </Flex>\r\n      </label>\r\n      <Button\r\n        width=\"100%\"\r\n        isLoading={isConfirming}\r\n        endIcon={isConfirming ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n        disabled={!isAcknowledged || isConfirming}\r\n        onClick={handleDeactivateProfile}\r\n        mb=\"8px\"\r\n      >\r\n        {t('Confirm')}\r\n      </Button>\r\n      <Button variant=\"text\" width=\"100%\" onClick={onDismiss}>\r\n        {t('Close Window')}\r\n      </Button>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PauseProfilePage\r\n","import React, { useState } from 'react'\r\nimport { Button, Box, InjectedModalProps, Text } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useToast from 'hooks/useToast'\r\nimport { fetchProfile } from 'state/profile'\r\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\r\nimport { getErc721Contract } from 'utils/contractHelpers'\r\nimport { useProfile as useProfileContract } from 'hooks/useContract'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\nimport ApproveConfirmButtons from 'components/ApproveConfirmButtons'\r\nimport SelectionCard from 'views/ProfileCreation/SelectionCard'\r\nimport { useUserNfts } from 'state/nftMarket/hooks'\r\nimport { NftLocation } from 'state/nftMarket/types'\r\n\r\ntype ChangeProfilePicPageProps = InjectedModalProps\r\n\r\nconst ChangeProfilePicPage: React.FC<ChangeProfilePicPageProps> = ({ onDismiss }) => {\r\n  const [selectedNft, setSelectedNft] = useState({\r\n    tokenId: null,\r\n    collectionAddress: null,\r\n  })\r\n  const { t } = useTranslation()\r\n  const { nfts } = useUserNfts()\r\n  const dispatch = useAppDispatch()\r\n  const { profile } = useProfile()\r\n  const profileContract = useProfileContract()\r\n  const { account, library } = useWeb3React()\r\n  const { toastSuccess } = useToast()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n\r\n  const nftsInWallet = nfts.filter((nft) => nft.location === NftLocation.WALLET)\r\n\r\n  const { isApproving, isApproved, isConfirmed, isConfirming, handleApprove, handleConfirm } =\r\n    useApproveConfirmTransaction({\r\n      onApprove: () => {\r\n        const contract = getErc721Contract(selectedNft.collectionAddress, library.getSigner())\r\n        return callWithGasPrice(contract, 'approve', [getPancakeProfileAddress(), selectedNft.tokenId])\r\n      },\r\n      onConfirm: () => {\r\n        if (!profile.isActive) {\r\n          return callWithGasPrice(profileContract, 'reactivateProfile', [\r\n            selectedNft.collectionAddress,\r\n            selectedNft.tokenId,\r\n          ])\r\n        }\r\n\r\n        return callWithGasPrice(profileContract, 'updateProfile', [selectedNft.collectionAddress, selectedNft.tokenId])\r\n      },\r\n      onSuccess: async ({ receipt }) => {\r\n        // Re-fetch profile\r\n        await dispatch(fetchProfile(account))\r\n        toastSuccess(t('Profile Updated!'), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\r\n\r\n        onDismiss()\r\n      },\r\n    })\r\n\r\n  return (\r\n    <>\r\n      <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\r\n        {t('Choose a new Collectible to use as your profile pic.')}\r\n      </Text>\r\n      <Box maxHeight=\"300px\" overflowY=\"scroll\">\r\n        {nftsInWallet.map((walletNft) => {\r\n          const handleChange = () => {\r\n            setSelectedNft({\r\n              tokenId: walletNft.tokenId,\r\n              collectionAddress: walletNft.collectionAddress,\r\n            })\r\n          }\r\n          return (\r\n            <SelectionCard\r\n              name=\"profilePicture\"\r\n              key={`${walletNft.collectionAddress}#${walletNft.tokenId}`}\r\n              value={walletNft.tokenId}\r\n              image={walletNft.image.thumbnail}\r\n              isChecked={walletNft.tokenId === selectedNft.tokenId}\r\n              onChange={handleChange}\r\n              disabled={isApproving || isConfirming || isConfirmed}\r\n            >\r\n              <Text bold>{walletNft.name}</Text>\r\n            </SelectionCard>\r\n          )\r\n        })}\r\n      </Box>\r\n      {nfts.length === 0 && (\r\n        <>\r\n          <Text as=\"p\" color=\"textSubtle\" mb=\"16px\">\r\n            {t('Sorry! You don’t have any eligible Collectibles in your wallet to use!')}\r\n          </Text>\r\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\r\n            {t('Make sure you have a Pancake Collectible in your wallet and try again!')}\r\n          </Text>\r\n        </>\r\n      )}\r\n      <ApproveConfirmButtons\r\n        isApproveDisabled={isConfirmed || isConfirming || isApproved || selectedNft.tokenId === null}\r\n        isApproving={isApproving}\r\n        isConfirmDisabled={!isApproved || isConfirmed || selectedNft.tokenId === null}\r\n        isConfirming={isConfirming}\r\n        onApprove={handleApprove}\r\n        onConfirm={handleConfirm}\r\n      />\r\n      <Button mt=\"8px\" variant=\"text\" width=\"100%\" onClick={onDismiss} disabled={isApproving || isConfirming}>\r\n        {t('Close Window')}\r\n      </Button>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ChangeProfilePicPage\r\n","import React, { useState } from 'react'\r\nimport { AutoRenewIcon, Button, Flex, InjectedModalProps, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useCake } from 'hooks/useContract'\r\nimport useToast from 'hooks/useToast'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\r\nimport { formatBigNumber } from 'utils/formatBalance'\r\nimport useGetProfileCosts from 'views/Nft/market/Profile/hooks/useGetProfileCosts'\r\nimport { UseEditProfileResponse } from './reducer'\r\n\r\ninterface ApproveCakePageProps extends InjectedModalProps {\r\n  goToChange: UseEditProfileResponse['goToChange']\r\n}\r\n\r\nconst ApproveCakePage: React.FC<ApproveCakePageProps> = ({ goToChange, onDismiss }) => {\r\n  const [isApproving, setIsApproving] = useState(false)\r\n  const { profile } = useProfile()\r\n  const { t } = useTranslation()\r\n  const {\r\n    costs: { numberCakeToUpdate, numberCakeToReactivate },\r\n  } = useGetProfileCosts()\r\n  const cakeContract = useCake()\r\n  const { toastError } = useToast()\r\n  const cost = profile.isActive ? numberCakeToUpdate : numberCakeToReactivate\r\n\r\n  const handleApprove = async () => {\r\n    const tx = await cakeContract.approve(getPancakeProfileAddress(), cost.mul(2).toString())\r\n    setIsApproving(true)\r\n    const receipt = await tx.wait()\r\n    if (receipt.status) {\r\n      goToChange()\r\n    } else {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      setIsApproving(false)\r\n    }\r\n  }\r\n\r\n  if (!profile) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Flex flexDirection=\"column\">\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"24px\">\r\n        <Text>{profile.isActive ? t('Cost to update:') : t('Cost to reactivate:')}</Text>\r\n        <Text>{formatBigNumber(cost)} CAKE</Text>\r\n      </Flex>\r\n      <Button\r\n        disabled={isApproving}\r\n        isLoading={isApproving}\r\n        endIcon={isApproving ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n        width=\"100%\"\r\n        mb=\"8px\"\r\n        onClick={handleApprove}\r\n      >\r\n        {t('Enable')}\r\n      </Button>\r\n      <Button variant=\"text\" width=\"100%\" onClick={onDismiss} disabled={isApproving}>\r\n        {t('Close Window')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default ApproveCakePage\r\n","import React from 'react'\r\nimport { InjectedModalProps, Modal } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { ContextApi } from 'contexts/Localization/types'\r\nimport useEditProfile, { Views } from './reducer'\r\nimport StartView from './StartView'\r\nimport PauseProfileView from './PauseProfileView'\r\nimport ChangeProfilePicView from './ChangeProfilePicView'\r\nimport ApproveCakeView from './ApproveCakeView'\r\n\r\ntype EditProfileModalProps = InjectedModalProps\r\n\r\nconst viewTitle = (t: ContextApi['t'], currentView: Views) => {\r\n  switch (currentView) {\r\n    case Views.START:\r\n      return t('Edit Profile')\r\n    case Views.CHANGE:\r\n      return t('Change Profile Pic')\r\n    case Views.REMOVE:\r\n      return t('Remove Profile Pic')\r\n    case Views.APPROVE:\r\n      return t('Enable CAKE')\r\n    default:\r\n      return ''\r\n  }\r\n}\r\n\r\nconst EditProfileModal: React.FC<EditProfileModalProps> = ({ onDismiss }) => {\r\n  const { currentView, goToChange, goToRemove, goToApprove, goPrevious } = useEditProfile()\r\n  const { t } = useTranslation()\r\n\r\n  const isStartView = currentView === Views.START\r\n  const handleBack = isStartView ? null : () => goPrevious()\r\n\r\n  return (\r\n    <Modal title={viewTitle(t, currentView)} onBack={handleBack} onDismiss={onDismiss} hideCloseButton={!isStartView}>\r\n      <div style={{ maxWidth: '400px' }}>\r\n        {currentView === Views.START && (\r\n          <StartView goToApprove={goToApprove} goToChange={goToChange} goToRemove={goToRemove} onDismiss={onDismiss} />\r\n        )}\r\n        {currentView === Views.REMOVE && <PauseProfileView onDismiss={onDismiss} />}\r\n        {currentView === Views.CHANGE && <ChangeProfilePicView onDismiss={onDismiss} />}\r\n        {currentView === Views.APPROVE && <ApproveCakeView goToChange={goToChange} onDismiss={onDismiss} />}\r\n      </div>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default EditProfileModal\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box, Flex, BunnyPlaceholderIcon, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport truncateHash from 'utils/truncateHash'\r\nimport { useGetProfileAvatar } from 'state/profile/hooks'\r\nimport { ProfileAvatarFetchStatus } from 'state/types'\r\nimport { Link } from 'react-router-dom'\r\nimport { nftsBaseUrl } from '../constants'\r\n\r\nconst Avatar = styled.img`\r\n  margin-right: 4px;\r\n  width: 32px;\r\n  height: 32px;\r\n  border-radius: 50%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    margin-right: 12px;\r\n  }\r\n`\r\n\r\nconst StyledFlex = styled(Flex)`\r\n  align-items: center;\r\n  transition: opacity 200ms ease-in;\r\n\r\n  &:hover {\r\n    opacity: 0.5;\r\n  }\r\n`\r\n\r\nconst ProfileCell: React.FC<{ accountAddress: string }> = ({ accountAddress }) => {\r\n  const { username, nft: profileNft, usernameFetchStatus, avatarFetchStatus } = useGetProfileAvatar(accountAddress)\r\n  const profileName = username || '-'\r\n\r\n  let sellerProfilePicComponent = <Skeleton width=\"32px\" height=\"32px\" mr={['4px', null, '12px']} />\r\n  if (avatarFetchStatus === ProfileAvatarFetchStatus.FETCHED) {\r\n    if (profileNft?.image?.thumbnail) {\r\n      sellerProfilePicComponent = <Avatar src={profileNft?.image?.thumbnail} />\r\n    } else {\r\n      sellerProfilePicComponent = <BunnyPlaceholderIcon width=\"32px\" height=\"32px\" mr={['4px', null, '12px']} />\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Link to={`${nftsBaseUrl}/profile/${accountAddress}`}>\r\n      <StyledFlex>\r\n        {sellerProfilePicComponent}\r\n        <Box display=\"inline\">\r\n          <Text lineHeight=\"1.25\">{truncateHash(accountAddress)}</Text>\r\n          {usernameFetchStatus !== ProfileAvatarFetchStatus.FETCHED ? (\r\n            <Skeleton />\r\n          ) : (\r\n            <Text lineHeight=\"1.25\">{profileName}</Text>\r\n          )}\r\n        </Box>\r\n      </StyledFlex>\r\n    </Link>\r\n  )\r\n}\r\n\r\nexport default ProfileCell\r\n","import React from 'react'\r\nimport { InjectedModalProps, Modal, Flex, Text, Button, useModal, Link, Grid, LinkExternal } from '@pancakeswap/uikit'\r\nimport useTheme from 'hooks/useTheme'\r\nimport styled from 'styled-components'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBscScanLinkForNft } from 'utils'\r\nimport { HorizontalDivider, RoundedImage } from './BuySellModals/shared/styles'\r\nimport EditProfileModal from '../Profile/components/EditProfileModal'\r\nimport { nftsBaseUrl, pancakeBunniesAddress } from '../constants'\r\n\r\nexport const StyledModal = styled(Modal)`\r\n  & > div:last-child {\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst TextWrapper = styled(Flex)`\r\n  background-color: ${({ theme }) => theme.colors.dropdown};\r\n`\r\n\r\ninterface ProfileNftModalProps extends InjectedModalProps {\r\n  nft: NftToken\r\n}\r\n\r\nconst ProfileNftModal: React.FC<ProfileNftModalProps> = ({ nft, onDismiss }) => {\r\n  const [onEditProfileModal] = useModal(<EditProfileModal />, false)\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n\r\n  const itemPageUrlId = nft.collectionAddress === pancakeBunniesAddress ? nft.attributes[0].value : nft.tokenId\r\n\r\n  return (\r\n    <StyledModal title={t('Details')} onDismiss={onDismiss} headerBackground={theme.colors.gradients.cardHeader}>\r\n      <Flex flexDirection=\"column\" maxWidth=\"350px\">\r\n        <Flex p=\"16px\">\r\n          <RoundedImage src={nft.image.thumbnail} height={68} width={68} mr=\"16px\" />\r\n          <Grid flex=\"1\" gridTemplateColumns=\"1fr 1fr\" alignItems=\"center\">\r\n            <Text bold>{nft.name}</Text>\r\n            <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\r\n              {nft.collectionName}\r\n            </Text>\r\n            {/* TODO: Add lowestPrice when available */}\r\n          </Grid>\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\" px=\"16px\" mb=\"16px\">\r\n          <Flex flex=\"2\">\r\n            <Text small color=\"textSubtle\">\r\n              {t('Token ID: %id%', { id: nft.tokenId })}\r\n            </Text>\r\n          </Flex>\r\n          <Flex justifyContent=\"space-between\" flex=\"3\">\r\n            <Button\r\n              as={Link}\r\n              p=\"0px\"\r\n              height=\"16px\"\r\n              external\r\n              variant=\"text\"\r\n              href={`${nftsBaseUrl}/collections/${nft.collectionAddress}/${itemPageUrlId}`}\r\n            >\r\n              {t('View Item')}\r\n            </Button>\r\n            <HorizontalDivider />\r\n            <LinkExternal p=\"0px\" height=\"16px\" href={getBscScanLinkForNft(nft.collectionAddress, nft.tokenId)}>\r\n              BscScan\r\n            </LinkExternal>\r\n          </Flex>\r\n        </Flex>\r\n        <TextWrapper p=\"24px 16px\" flexDirection=\"column\">\r\n          <Text mb=\"16px\">{t(\"You're using this NFT as your Pancake Profile picture\")}</Text>\r\n          <Text color=\"textSubtle\" mb=\"16px\" fontSize=\"14px\">\r\n            {t(\r\n              'Removing it will suspend your profile, and you won’t be able to earn points, participate in team activities, or be eligible for new NFT drops.',\r\n            )}\r\n          </Text>\r\n          <Text color=\"textSubtle\" fontSize=\"14px\">\r\n            {t('Go to your profile page to continue.')}\r\n          </Text>\r\n        </TextWrapper>\r\n        <Flex flexDirection=\"column\" py=\"16px\" px=\"16px\">\r\n          <Button onClick={onEditProfileModal} width=\"100%\" variant=\"secondary\">\r\n            {t('Remove Profile Pic')}\r\n          </Button>\r\n        </Flex>\r\n      </Flex>\r\n    </StyledModal>\r\n  )\r\n}\r\n\r\nexport default ProfileNftModal\r\n","import styled from 'styled-components'\n\nexport const PageButtons = styled.div`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-top: 16px;\n  margin-bottom: 16px;\n`\n\nexport const Arrow = styled.div`\n  color: ${({ theme }) => theme.colors.primary};\n  padding: 0 20px;\n  :hover {\n    cursor: pointer;\n  }\n`\n","import React from 'react'\r\nimport { Flex, Text, Button, Spinner } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { StepIndicator } from './styles'\r\n\r\ninterface ApproveAndConfirmStageProps {\r\n  variant: 'buy' | 'sell'\r\n  isApproved: boolean\r\n  isApproving: boolean\r\n  isConfirming: boolean\r\n  handleApprove: () => void\r\n  handleConfirm: () => void\r\n}\r\n\r\n// Buy Flow:\r\n// Shown if user wants to pay with WBNB and contract isn't approved yet\r\n// Sell Flow:\r\n// Shown the first time user puts NFT for sale\r\nconst ApproveAndConfirmStage: React.FC<ApproveAndConfirmStageProps> = ({\r\n  variant,\r\n  isApproved,\r\n  isApproving,\r\n  isConfirming,\r\n  handleApprove,\r\n  handleConfirm,\r\n}) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Flex p=\"16px\" flexDirection=\"column\">\r\n      <Flex mb=\"8px\" alignItems=\"center\">\r\n        <Flex flexDirection=\"column\">\r\n          <Flex alignItems=\"center\">\r\n            <StepIndicator success={isApproved}>\r\n              <Text fontSize=\"20px\" bold color=\"invertedContrast\">\r\n                1\r\n              </Text>\r\n            </StepIndicator>\r\n            <Text fontSize=\"20px\" color={isApproved ? 'success' : 'secondary'} bold>\r\n              {isApproved ? t('Enabled') : t('Enable')}\r\n            </Text>\r\n          </Flex>\r\n          {!isApproved && (\r\n            <Text mt=\"8px\" maxWidth=\"275px\" small color=\"textSubtle\">\r\n              {variant === 'buy'\r\n                ? t('Please enable WBNB spending in your wallet')\r\n                : t('Please enable your NFT to be sent to the market')}\r\n            </Text>\r\n          )}\r\n        </Flex>\r\n        <Flex flex=\"0 0 64px\" width=\"64px\">\r\n          {isApproving && <Spinner size={64} />}\r\n        </Flex>\r\n      </Flex>\r\n      {!isApproved && (\r\n        <Button variant=\"secondary\" disabled={isApproving} onClick={handleApprove}>\r\n          {isApproving ? `${t('Enabling')}...` : t('Enable')}\r\n        </Button>\r\n      )}\r\n      <Flex alignItems=\"center\" mt=\"8px\">\r\n        <Flex flexDirection=\"column\">\r\n          <Flex alignItems=\"center\" mt=\"16px\">\r\n            <StepIndicator success={!!0} disabled={!isApproved}>\r\n              <Text fontSize=\"20px\" bold color={!isApproved ? 'textDisabled' : 'invertedContrast'}>\r\n                2\r\n              </Text>\r\n            </StepIndicator>\r\n            <Text fontSize=\"20px\" bold color={isApproved ? 'secondary' : 'textDisabled'}>\r\n              {t('Confirm')}\r\n            </Text>\r\n          </Flex>\r\n          <Text small color={isApproved ? 'textSubtle' : 'textDisabled'}>\r\n            {t('Please confirm the transaction in your wallet')}\r\n          </Text>\r\n        </Flex>\r\n        <Flex flex=\"0 0 64px\" width=\"64px\">\r\n          {isConfirming && <Spinner size={64} />}\r\n        </Flex>\r\n      </Flex>\r\n      <Button mt=\"16px\" disabled={!isApproved || isConfirming} onClick={handleConfirm} variant=\"secondary\">\r\n        {isConfirming ? t('Confirming') : t('Confirm')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default ApproveAndConfirmStage\r\n","import React from 'react'\r\nimport { Flex, Text, Button, ArrowUpIcon, LinkExternal } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBscScanLink } from 'utils'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport { Divider } from './styles'\r\n\r\ninterface TransactionConfirmedProps {\r\n  txHash: string\r\n  onDismiss: () => void\r\n}\r\n\r\nconst TransactionConfirmed: React.FC<TransactionConfirmedProps> = ({ txHash, onDismiss }) => {\r\n  const { chainId } = useActiveWeb3React()\r\n  const { t } = useTranslation()\r\n  return (\r\n    <>\r\n      <Flex p=\"16px\" flexDirection=\"column\" alignItems=\"center\" justifyContent=\"space-between\" height=\"150px\">\r\n        <ArrowUpIcon width=\"64px\" height=\"64px\" color=\"primary\" />\r\n        <Text bold>{t('Transaction Confirmed')}</Text>\r\n        <LinkExternal href={getBscScanLink(txHash, 'transaction', chainId)}>{t('View on BscScan')}</LinkExternal>\r\n      </Flex>\r\n      <Divider />\r\n      <Flex px=\"16px\" pb=\"16px\" justifyContent=\"center\">\r\n        <Button onClick={onDismiss} variant=\"secondary\" width=\"100%\">\r\n          {t('Close')}\r\n        </Button>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TransactionConfirmed\r\n","import React from 'react'\r\nimport { Flex, Text, Button, Spinner } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface ConfirmStageProps {\r\n  isConfirming: boolean\r\n  handleConfirm: () => void\r\n}\r\n\r\n// Buy Flow:\r\n// Shown in case user wants to pay with BNB\r\n// or if user wants to pay with WBNB and it is already approved\r\n// Sell Flow:\r\n// Shown if user adjusts the price or removes NFT from the market\r\nconst ConfirmStage: React.FC<ConfirmStageProps> = ({ isConfirming, handleConfirm }) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Flex p=\"16px\" flexDirection=\"column\">\r\n      <Flex alignItems=\"center\">\r\n        <Flex flexDirection=\"column\">\r\n          <Flex alignItems=\"center\">\r\n            <Text fontSize=\"20px\" bold color=\"secondary\">\r\n              {t('Confirm')}\r\n            </Text>\r\n          </Flex>\r\n          <Text small color=\"textSubtle\">\r\n            {t('Please confirm the transaction in your wallet')}\r\n          </Text>\r\n        </Flex>\r\n        <Flex flex=\"0 0 64px\" height=\"72px\" width=\"64px\">\r\n          {isConfirming && <Spinner size={64} />}\r\n        </Flex>\r\n      </Flex>\r\n      <Button mt=\"24px\" disabled={isConfirming} onClick={handleConfirm} variant=\"secondary\">\r\n        {isConfirming ? `${t('Confirming')}...` : t('Confirm')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default ConfirmStage\r\n","import { useEffect, useReducer, useRef } from 'react'\r\nimport { noop } from 'lodash'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { ethers } from 'ethers'\r\nimport useToast from 'hooks/useToast'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ntype LoadingState = 'idle' | 'loading' | 'success' | 'fail'\r\n\r\ntype Action =\r\n  | { type: 'requires_approval' }\r\n  | { type: 'approve_sending' }\r\n  | { type: 'approve_receipt' }\r\n  | { type: 'approve_error' }\r\n  | { type: 'confirm_sending' }\r\n  | { type: 'confirm_receipt' }\r\n  | { type: 'confirm_error' }\r\n\r\ninterface State {\r\n  approvalState: LoadingState\r\n  confirmState: LoadingState\r\n}\r\n\r\nconst initialState: State = {\r\n  approvalState: 'idle',\r\n  confirmState: 'idle',\r\n}\r\n\r\nconst reducer = (state: State, actions: Action): State => {\r\n  switch (actions.type) {\r\n    case 'requires_approval':\r\n      return {\r\n        ...state,\r\n        approvalState: 'success',\r\n      }\r\n    case 'approve_sending':\r\n      return {\r\n        ...state,\r\n        approvalState: 'loading',\r\n      }\r\n    case 'approve_receipt':\r\n      return {\r\n        ...state,\r\n        approvalState: 'success',\r\n      }\r\n    case 'approve_error':\r\n      return {\r\n        ...state,\r\n        approvalState: 'fail',\r\n      }\r\n    case 'confirm_sending':\r\n      return {\r\n        ...state,\r\n        confirmState: 'loading',\r\n      }\r\n    case 'confirm_receipt':\r\n      return {\r\n        ...state,\r\n        confirmState: 'success',\r\n      }\r\n    case 'confirm_error':\r\n      return {\r\n        ...state,\r\n        confirmState: 'fail',\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\ninterface OnSuccessProps {\r\n  state: State\r\n  receipt: ethers.providers.TransactionReceipt\r\n}\r\n\r\ninterface ApproveConfirmTransaction {\r\n  onApprove: () => Promise<ethers.providers.TransactionResponse>\r\n  onConfirm: (params?) => Promise<ethers.providers.TransactionResponse>\r\n  onRequiresApproval?: () => Promise<boolean>\r\n  onSuccess: ({ state, receipt }: OnSuccessProps) => void\r\n  onApproveSuccess?: ({ state, receipt }: OnSuccessProps) => void\r\n}\r\n\r\nconst useApproveConfirmTransaction = ({\r\n  onApprove,\r\n  onConfirm,\r\n  onRequiresApproval,\r\n  onSuccess = noop,\r\n  onApproveSuccess = noop,\r\n}: ApproveConfirmTransaction) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const [state, dispatch] = useReducer(reducer, initialState)\r\n  const handlePreApprove = useRef(onRequiresApproval)\r\n  const { toastError } = useToast()\r\n\r\n  // Check if approval is necessary, re-check if account changes\r\n  useEffect(() => {\r\n    if (account && handlePreApprove.current) {\r\n      handlePreApprove.current().then((result) => {\r\n        if (result) {\r\n          dispatch({ type: 'requires_approval' })\r\n        }\r\n      })\r\n    }\r\n  }, [account, handlePreApprove, dispatch])\r\n\r\n  return {\r\n    isApproving: state.approvalState === 'loading',\r\n    isApproved: state.approvalState === 'success',\r\n    isConfirming: state.confirmState === 'loading',\r\n    isConfirmed: state.confirmState === 'success',\r\n    hasApproveFailed: state.approvalState === 'fail',\r\n    hasConfirmFailed: state.confirmState === 'fail',\r\n    handleApprove: async () => {\r\n      try {\r\n        const tx = await onApprove()\r\n        dispatch({ type: 'approve_sending' })\r\n        const receipt = await tx.wait()\r\n        if (receipt.status) {\r\n          dispatch({ type: 'approve_receipt' })\r\n          onApproveSuccess({ state, receipt })\r\n        }\r\n      } catch (error) {\r\n        dispatch({ type: 'approve_error' })\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      }\r\n    },\r\n    handleConfirm: async (params = {}) => {\r\n      dispatch({ type: 'confirm_sending' })\r\n      try {\r\n        const tx = await onConfirm(params)\r\n        const receipt = await tx.wait()\r\n        if (receipt.status) {\r\n          dispatch({ type: 'confirm_receipt' })\r\n          onSuccess({ state, receipt })\r\n        }\r\n      } catch (error) {\r\n        dispatch({ type: 'confirm_error' })\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      }\r\n    },\r\n  }\r\n}\r\n\r\nexport default useApproveConfirmTransaction\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronRightIcon, Button as UIKitButton, AutoRenewIcon, ChevronDownIcon, Box, Flex } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nexport enum ButtonArrangement {\r\n  ROW = 'row',\r\n  SEQUENTIAL = 'sequential',\r\n}\r\n\r\ninterface ApproveConfirmButtonsProps {\r\n  isApproveDisabled: boolean\r\n  isApproving: boolean\r\n  isConfirming: boolean\r\n  isConfirmDisabled: boolean\r\n  onApprove: () => void\r\n  onConfirm: () => void\r\n  buttonArrangement?: ButtonArrangement\r\n  confirmLabel?: string\r\n  confirmId?: string\r\n}\r\n\r\nconst StyledApproveConfirmButtonRow = styled.div`\r\n  align-items: center;\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  justify-content: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    grid-template-columns: 1fr 24px 1fr;\r\n  }\r\n`\r\n\r\nconst Button = styled(UIKitButton)`\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    min-width: 160px;\r\n  }\r\n`\r\n\r\nconst iconAttrs = { width: '24px', color: 'textDisabled' }\r\n\r\nconst ChevronRight = styled(ChevronRightIcon).attrs(iconAttrs)`\r\n  display: none;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    display: block;\r\n  }\r\n`\r\n\r\nconst ChevronBottom = styled(ChevronDownIcon).attrs(iconAttrs)`\r\n  display: block;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst spinnerIcon = <AutoRenewIcon spin color=\"currentColor\" />\r\n\r\nconst ApproveConfirmButtons: React.FC<ApproveConfirmButtonsProps> = ({\r\n  isApproveDisabled,\r\n  isApproving,\r\n  isConfirming,\r\n  isConfirmDisabled,\r\n  onApprove,\r\n  onConfirm,\r\n  buttonArrangement = ButtonArrangement.ROW,\r\n  confirmLabel,\r\n  confirmId,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const confirmButtonText = confirmLabel ?? t('Confirm')\r\n\r\n  const ApproveConfirmRow = () => {\r\n    return (\r\n      <StyledApproveConfirmButtonRow>\r\n        <Box>\r\n          <Button\r\n            disabled={isApproveDisabled}\r\n            onClick={onApprove}\r\n            endIcon={isApproving ? spinnerIcon : undefined}\r\n            isLoading={isApproving}\r\n          >\r\n            {isApproving ? t('Enabling') : t('Enable')}\r\n          </Button>\r\n        </Box>\r\n        <Flex justifyContent=\"center\">\r\n          <ChevronRight />\r\n          <ChevronBottom />\r\n        </Flex>\r\n        <Box>\r\n          <Button\r\n            id={confirmId}\r\n            onClick={onConfirm}\r\n            disabled={isConfirmDisabled}\r\n            isLoading={isConfirming}\r\n            endIcon={isConfirming ? spinnerIcon : undefined}\r\n          >\r\n            {isConfirming ? t('Confirming') : confirmButtonText}\r\n          </Button>\r\n        </Box>\r\n      </StyledApproveConfirmButtonRow>\r\n    )\r\n  }\r\n\r\n  const ApproveConfirmSequential = () => {\r\n    return (\r\n      <>\r\n        {isApproveDisabled ? (\r\n          <Box>\r\n            <Button\r\n              id={confirmId}\r\n              onClick={onConfirm}\r\n              disabled={isConfirmDisabled}\r\n              isLoading={isConfirming}\r\n              endIcon={isConfirming ? spinnerIcon : undefined}\r\n            >\r\n              {isConfirming ? t('Confirming') : confirmButtonText}\r\n            </Button>\r\n          </Box>\r\n        ) : (\r\n          <Box>\r\n            <Button onClick={onApprove} endIcon={isApproving ? spinnerIcon : undefined} isLoading={isApproving}>\r\n              {isApproving ? t('Enabling') : t('Enable')}\r\n            </Button>\r\n          </Box>\r\n        )}\r\n      </>\r\n    )\r\n  }\r\n\r\n  return buttonArrangement === ButtonArrangement.ROW ? ApproveConfirmRow() : ApproveConfirmSequential()\r\n}\r\n\r\nexport default ApproveConfirmButtons\r\n","import styled from 'styled-components'\nimport { Flex, Image } from '@pancakeswap/uikit'\n\nexport const RoundedImage = styled(Image)`\n  border-radius: ${({ theme }) => theme.radii.small};\n  overflow: hidden;\n`\n\nexport const Divider = styled.div`\n  margin: 16px 0;\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\n`\n\nexport const HorizontalDivider = styled.div`\n  border-right: 1px solid ${({ theme }) => theme.colors.cardBorder};\n`\n\nexport const StepIndicator = styled(Flex)<{ success: boolean; disabled?: boolean }>`\n  border-radius: 50%;\n  background-color: ${({ theme, success, disabled }) => {\n    if (disabled) {\n      return 'none'\n    }\n    return success ? theme.colors.success : theme.colors.secondary\n  }};\n  border: ${({ theme, disabled }) => (disabled ? `1px solid ${theme.colors.textDisabled}` : 'none')};\n  height: 32px;\n  width: 32px;\n  justify-content: center;\n  align-items: center;\n  margin-right: 8px;\n`\n"],"sourceRoot":""}