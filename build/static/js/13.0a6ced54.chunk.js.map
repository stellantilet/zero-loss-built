{"version":3,"sources":["state/voting/hooks.ts","views/Voting/components/Proposals/tags.tsx","views/Voting/components/CastVoteModal/styles.tsx","views/Voting/components/Layout.tsx","views/Voting/components/CastVoteModal/DetailsView.tsx","views/Voting/hooks/useGetVotingPower.tsx","components/ReactMarkdown/styles.tsx","components/ReactMarkdown/index.tsx","views/Voting/components/CastVoteModal/types.ts","views/Voting/Proposal/Details.tsx","views/Voting/components/TextEllipsis.tsx","views/Voting/Proposal/Results.tsx","views/Voting/components/CastVoteModal/MainView.tsx","views/Voting/components/CastVoteModal/index.tsx","views/Voting/Proposal/Vote.tsx","views/Voting/components/Proposal/VotesLoading.tsx","views/Voting/components/Proposal/Row.tsx","views/Voting/components/Proposal/VoteRow.tsx","views/Voting/Proposal/Votes.tsx","views/Voting/Proposal/index.tsx","views/Voting/helpers.ts","views/Voting/config.ts"],"names":["useGetProposals","proposals","useSelector","state","voting","Object","values","useGetProposal","proposalId","useGetVotes","votes","filter","vote","_inValid","useGetVotingStateLoadingStatus","voteLoadingStatus","useGetProposalLoadingStatus","proposalLoadingStatus","ProposalStateTag","proposalState","props","ProposalState","ACTIVE","PENDING","ProposalTypeTag","isCoreProposal","VotingBox","styled","div","theme","colors","cardBorder","ModalInner","mb","maxWidth","Layout","mediaQueries","lg","DetailsView","total","cakeBalance","cakeVaultBalance","cakePoolBalance","poolsBalance","cakeBnbLpBalance","t","useTranslation","as","fontSize","color","textTransform","bold","formatNumber","alignItems","justifyContent","textAlign","initialState","verificationHash","useGetVotingPower","block","isActive","useWeb3React","account","useState","votingPower","setVotingPower","isLoading","setIsLoading","useEffect","a","simpleRpcProvider","getBlockNumber","blockNumber","getActivePools","eligiblePools","poolAddresses","map","contractAddress","getAddress","getVotingPower","prevVotingPower","parseFloat","fetchVotingPower","Table","table","text","ThemedComponent","Title","scale","my","markdownComponents","h1","h2","h3","h4","h5","h6","p","ol","ul","pre","ReactMarkdown","remarkPlugins","gfm","components","ConfirmVoteView","DetailBox","Box","background","Details","proposal","startDate","Date","start","endDate","end","href","IPFS_GATEWAY","id","ml","slice","getBscScanLink","author","truncateHash","snapshot","format","TextEllipsis","Text","Results","choices","results","calculateVoteResults","votingStatus","totalVotes","getTotalFromVotes","VotingStateLoadingStatus","IDLE","choice","index","choiceVotes","totalChoiceVote","progress","hasVoted","some","voter","toLowerCase","mt","title","variant","outline","mr","primaryStep","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","LOADING","times","length","count","height","MainView","isPending","onConfirm","onViewDetails","onDismiss","label","onClick","style","cursor","width","endIcon","spin","disabled","CastVoteModal","onSuccess","MAIN","view","setView","modalIsOpen","setModalIsOpen","setIsPending","toastError","useToast","library","useWeb3Provider","useTheme","isStartView","handleBack","DETAILS","handleDismiss","handleConfirmVote","voteMsg","JSON","stringify","generatePayloadData","type","SnapshotCommand","VOTE","payload","value","metadata","toString","signMessage","sig","msg","address","sendSnapshotData","message","console","error","onBack","hideCloseButton","headerBackground","gradients","cardHeader","Choice","isChecked","isDisabled","ChoiceText","Vote","setVote","toastSuccess","dispatch","useAppDispatch","handleSuccess","fetchVotes","Number","useModal","presentCastVoteModal","flexShrink","checked","onChange","ConnectWalletButton","Row","Flex","StyledSkeleton","Skeleton","VotesLoading","AddressColumn","attrs","ChoiceColumn","VotingPowerColumn","Grid","sm","VoteRow","isVoter","hasVotingPower","parseVotePower","incomingVote","Votes","showAll","setShowAll","orderedVotes","orderBy","displayVotes","isFinished","py","px","Proposal","useParams","hasAccountVoted","isPageLoading","fetchProposal","Container","Page","Link","to","startIcon","body","PageLoader","ADMINS","includes","filterProposalsByType","proposalType","ProposalType","COMMUNITY","CORE","ALL","filterProposalsByState","generateMetaData","plugins","network","strategies","name","params","symbol","tokens","cake","decimals","version","SNAPSHOT_VERSION","timestamp","now","toFixed","space","PANCAKE_SPACE","fetch","SNAPSHOT_HUB_API","method","headers","Accept","response","ok","json","Error","error_description","data","SNAPSHOT_VOTING_API","reduce","accum","choiceText","power","PROPOSALS_TO_SHOW","VOTE_THRESHOLD"],"mappings":"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","file":"static/js/13.0a6ced54.chunk.js","sourcesContent":["import { useSelector } from 'react-redux'\r\nimport { State } from '../types'\r\n\r\n// Voting\r\nexport const useGetProposals = () => {\r\n  const proposals = useSelector((state: State) => state.voting.proposals)\r\n  return Object.values(proposals)\r\n}\r\n\r\nexport const useGetProposal = (proposalId: string) => {\r\n  const proposal = useSelector((state: State) => state.voting.proposals[proposalId])\r\n  return proposal\r\n}\r\n\r\nexport const useGetVotes = (proposalId: string) => {\r\n  const votes = useSelector((state: State) => state.voting.votes[proposalId])\r\n  return votes ? votes.filter((vote) => vote._inValid !== true) : []\r\n}\r\n\r\nexport const useGetVotingStateLoadingStatus = () => {\r\n  const votingStatus = useSelector((state: State) => state.voting.voteLoadingStatus)\r\n  return votingStatus\r\n}\r\n\r\nexport const useGetProposalLoadingStatus = () => {\r\n  const votingStatus = useSelector((state: State) => state.voting.proposalLoadingStatus)\r\n  return votingStatus\r\n}\r\n","import React from 'react'\r\nimport { TagProps } from '@pancakeswap/uikit'\r\nimport { ClosedTag, CommunityTag, CoreTag, SoonTag, VoteNowTag } from 'components/Tags'\r\nimport { ProposalState } from 'state/types'\r\n\r\ninterface ProposalStateTagProps extends TagProps {\r\n  proposalState: ProposalState\r\n}\r\n\r\nexport const ProposalStateTag: React.FC<ProposalStateTagProps> = ({ proposalState, ...props }) => {\r\n  if (proposalState === ProposalState.ACTIVE) {\r\n    return <VoteNowTag {...props} />\r\n  }\r\n\r\n  if (proposalState === ProposalState.PENDING) {\r\n    return <SoonTag {...props} />\r\n  }\r\n\r\n  return <ClosedTag {...props} />\r\n}\r\n\r\ninterface ProposalTypeTagProps extends TagProps {\r\n  isCoreProposal: boolean\r\n}\r\n\r\nexport const ProposalTypeTag: React.FC<ProposalTypeTagProps> = ({ isCoreProposal, ...props }) => {\r\n  if (isCoreProposal) {\r\n    return <CoreTag {...props} />\r\n  }\r\n\r\n  return <CommunityTag {...props} />\r\n}\r\n","import React from 'react'\r\nimport { Box, BoxProps } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\n\r\nexport const VotingBox = styled.div`\r\n  align-items: center;\r\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n  border-radius: 12px;\r\n  display: flex;\r\n  height: 64px;\r\n  justify-content: space-between;\r\n  margin-bottom: 24px;\r\n  padding: 0 16px;\r\n`\r\n\r\nexport const ModalInner: React.FC<BoxProps> = (props) => {\r\n  return <Box mb=\"24px\" maxWidth=\"320px\" {...props} />\r\n}\r\n","import styled from 'styled-components'\n\nconst Layout = styled.div`\n  align-items: start;\n  display: grid;\n  grid-gap: 32px;\n  grid-template-columns: minmax(0, 1fr);\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    grid-template-columns: 1fr 332px;\n  }\n`\n\nexport default Layout\n","import React from 'react'\r\nimport { Text, Flex } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatNumber } from 'utils/formatBalance'\r\nimport { VotingBox, ModalInner } from './styles'\r\n\r\ninterface DetailsViewProps {\r\n  total: number\r\n  cakeBalance: number\r\n  cakeVaultBalance: number\r\n  cakePoolBalance: number\r\n  poolsBalance: number\r\n  cakeBnbLpBalance: number\r\n}\r\n\r\nconst DetailsView: React.FC<DetailsViewProps> = ({\r\n  total,\r\n  cakeBalance,\r\n  cakeVaultBalance,\r\n  cakePoolBalance,\r\n  poolsBalance,\r\n  cakeBnbLpBalance,\r\n}) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <ModalInner mb=\"0\">\r\n      <Text as=\"p\" mb=\"24px\" fontSize=\"14px\" color=\"textSubtle\">\r\n        {t(\r\n          'Your voting power is determined by the amount of CAKE you held at the block detailed below. CAKE held in other places does not contribute to your voting power.',\r\n        )}\r\n      </Text>\r\n      <Text color=\"secondary\" textTransform=\"uppercase\" mb=\"4px\" bold fontSize=\"14px\">\r\n        {t('Overview')}\r\n      </Text>\r\n      <VotingBox>\r\n        <Text color=\"secondary\">{t('Your Voting Power')}</Text>\r\n        <Text bold fontSize=\"20px\">\r\n          {formatNumber(total, 0, 3)}\r\n        </Text>\r\n      </VotingBox>\r\n      <Text color=\"secondary\" textTransform=\"uppercase\" mb=\"4px\" bold fontSize=\"14px\">\r\n        {t('Your Cake Held Now')}\r\n      </Text>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"4px\">\r\n        <Text color=\"textSubtle\" fontSize=\"16px\">\r\n          {t('Wallet')}\r\n        </Text>\r\n        <Text textAlign=\"right\">{formatNumber(cakeBalance, 0, 3)}</Text>\r\n      </Flex>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"4px\">\r\n        <Text color=\"textSubtle\" fontSize=\"16px\">\r\n          {t('Manual CAKE Pool')}\r\n        </Text>\r\n        <Text textAlign=\"right\">{formatNumber(cakePoolBalance, 0, 3)}</Text>\r\n      </Flex>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"4px\">\r\n        <Text color=\"textSubtle\" fontSize=\"16px\">\r\n          {t('Auto CAKE Pool')}\r\n        </Text>\r\n        <Text textAlign=\"right\">{formatNumber(cakeVaultBalance, 0, 3)}</Text>\r\n      </Flex>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"4px\">\r\n        <Text color=\"textSubtle\" fontSize=\"16px\">\r\n          {t('Other Syrup Pools')}\r\n        </Text>\r\n        <Text textAlign=\"right\">{formatNumber(poolsBalance, 0, 3)}</Text>\r\n      </Flex>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"4px\">\r\n        <Text color=\"textSubtle\" fontSize=\"16px\">\r\n          {t('CAKE BNB LP')}\r\n        </Text>\r\n        <Text textAlign=\"right\">{formatNumber(cakeBnbLpBalance, 0, 3)}</Text>\r\n      </Flex>\r\n    </ModalInner>\r\n  )\r\n}\r\n\r\nexport default DetailsView\r\n","import { useState, useEffect } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getActivePools } from 'utils/calls'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { simpleRpcProvider } from 'utils/providers'\r\nimport { getVotingPower } from '../helpers'\r\n\r\ninterface State {\r\n  verificationHash: string\r\n  cakeBalance: number\r\n  cakeVaultBalance: number\r\n  cakePoolBalance: number\r\n  poolsBalance: number\r\n  cakeBnbLpBalance: number\r\n  total: number\r\n}\r\n\r\nconst initialState: State = {\r\n  verificationHash: null,\r\n  cakeBalance: 0,\r\n  cakeVaultBalance: 0,\r\n  cakePoolBalance: 0,\r\n  poolsBalance: 0,\r\n  cakeBnbLpBalance: 0,\r\n  total: 0,\r\n}\r\n\r\nconst useGetVotingPower = (block?: number, isActive = true): State & { isLoading: boolean } => {\r\n  const { account } = useWeb3React()\r\n  const [votingPower, setVotingPower] = useState(initialState)\r\n  const [isLoading, setIsLoading] = useState(!!account)\r\n\r\n  useEffect(() => {\r\n    const fetchVotingPower = async () => {\r\n      setIsLoading(true)\r\n\r\n      try {\r\n        const blockNumber = block || (await simpleRpcProvider.getBlockNumber())\r\n        const eligiblePools = await getActivePools(blockNumber)\r\n        const poolAddresses = eligiblePools.map(({ contractAddress }) => getAddress(contractAddress))\r\n        const {\r\n          cakeBalance,\r\n          cakeBnbLpBalance,\r\n          cakePoolBalance,\r\n          total,\r\n          poolsBalance,\r\n          cakeVaultBalance,\r\n          verificationHash,\r\n        } = await getVotingPower(account, poolAddresses, blockNumber)\r\n\r\n        if (isActive) {\r\n          setVotingPower((prevVotingPower) => ({\r\n            ...prevVotingPower,\r\n            verificationHash,\r\n            cakeBalance: parseFloat(cakeBalance),\r\n            cakeBnbLpBalance: parseFloat(cakeBnbLpBalance),\r\n            cakePoolBalance: parseFloat(cakePoolBalance),\r\n            poolsBalance: parseFloat(poolsBalance),\r\n            cakeVaultBalance: parseFloat(cakeVaultBalance),\r\n            total: parseFloat(total),\r\n          }))\r\n        }\r\n      } finally {\r\n        setIsLoading(false)\r\n      }\r\n    }\r\n\r\n    if (account && isActive) {\r\n      fetchVotingPower()\r\n    }\r\n  }, [account, block, setVotingPower, isActive, setIsLoading])\r\n\r\n  return { ...votingPower, isLoading }\r\n}\r\n\r\nexport default useGetVotingPower\r\n","import React from 'react'\r\nimport { Heading, Text } from '@pancakeswap/uikit'\r\nimport { NormalComponents, SpecialComponents } from 'react-markdown/src/ast-to-react'\r\nimport styled from 'styled-components'\r\n\r\nconst Table = styled.table`\r\n  margin-bottom: 32px;\r\n  margin-top: 32px;\r\n  width: 100%;\r\n\r\n  td,\r\n  th {\r\n    color: ${({ theme }) => theme.colors.text};\r\n    padding: 8px;\r\n  }\r\n`\r\n\r\nconst ThemedComponent = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  margin-bottom: 16px;\r\n  margin-top: 16px;\r\n\r\n  li {\r\n    margin-bottom: 8px;\r\n  }\r\n`\r\n\r\nconst Pre = styled.pre`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  margin-bottom: 16px;\r\n  margin-top: 16px;\r\n  max-width: 100%;\r\n  overflow-x: auto;\r\n`\r\n\r\nconst Title = (props) => {\r\n  return <Heading as=\"h4\" scale=\"lg\" my=\"16px\" {...props} />\r\n}\r\n\r\nconst markdownComponents: Partial<NormalComponents & SpecialComponents> = {\r\n  h1: Title,\r\n  h2: Title,\r\n  h3: Title,\r\n  h4: Title,\r\n  h5: Title,\r\n  h6: Title,\r\n  p: (props) => {\r\n    return <Text as=\"p\" my=\"16px\" {...props} />\r\n  },\r\n  table: Table,\r\n  ol: (props) => {\r\n    return <ThemedComponent as=\"ol\" {...props} />\r\n  },\r\n  ul: (props) => {\r\n    return <ThemedComponent as=\"ul\" {...props} />\r\n  },\r\n  pre: Pre,\r\n}\r\n\r\nexport default markdownComponents\r\n","import React from 'react'\r\nimport ReactMarkdownLib, { ReactMarkdownOptions } from 'react-markdown'\r\nimport gfm from 'remark-gfm'\r\nimport markdownComponents from './styles'\r\n\r\nconst ReactMarkdown: React.FC<ReactMarkdownOptions> = (props) => {\r\n  return <ReactMarkdownLib remarkPlugins={[gfm]} components={markdownComponents} {...props} />\r\n}\r\n\r\nexport default ReactMarkdown\r\n","import { InjectedModalProps } from '@pancakeswap/uikit'\n\nexport enum ConfirmVoteView {\n  MAIN = 'main',\n  DETAILS = 'details',\n}\n\nexport interface CastVoteModalProps extends InjectedModalProps {\n  onSuccess: () => Promise<void>\n  proposalId: string\n  vote: {\n    label: string\n    value: number\n  }\n  block?: number\n}\n","import React from 'react'\r\nimport { Box, Card, CardBody, CardHeader, Flex, Heading, LinkExternal, Text } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { format } from 'date-fns'\r\nimport { Proposal } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBscScanLink } from 'utils'\r\nimport truncateHash from 'utils/truncateHash'\r\nimport { IPFS_GATEWAY } from '../config'\r\nimport { ProposalStateTag } from '../components/Proposals/tags'\r\n\r\ninterface DetailsProps {\r\n  proposal: Proposal\r\n}\r\n\r\nconst DetailBox = styled(Box)`\r\n  background-color: ${({ theme }) => theme.colors.background};\r\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n  border-radius: 16px;\r\n`\r\n\r\nconst Details: React.FC<DetailsProps> = ({ proposal }) => {\r\n  const { t } = useTranslation()\r\n  const startDate = new Date(proposal.start * 1000)\r\n  const endDate = new Date(proposal.end * 1000)\r\n\r\n  return (\r\n    <Card mb=\"16px\">\r\n      <CardHeader>\r\n        <Heading as=\"h3\" scale=\"md\">\r\n          {t('Details')}\r\n        </Heading>\r\n      </CardHeader>\r\n      <CardBody>\r\n        <Flex alignItems=\"center\" mb=\"8px\">\r\n          <Text color=\"textSubtle\">{t('Identifier')}</Text>\r\n          <LinkExternal href={`${IPFS_GATEWAY}/${proposal.id}`} ml=\"8px\">\r\n            {proposal.id.slice(0, 8)}\r\n          </LinkExternal>\r\n        </Flex>\r\n        <Flex alignItems=\"center\" mb=\"8px\">\r\n          <Text color=\"textSubtle\">{t('Creator')}</Text>\r\n          <LinkExternal href={getBscScanLink(proposal.author, 'address')} ml=\"8px\">\r\n            {truncateHash(proposal.author)}\r\n          </LinkExternal>\r\n        </Flex>\r\n        <Flex alignItems=\"center\" mb=\"16px\">\r\n          <Text color=\"textSubtle\">{t('Snapshot')}</Text>\r\n          <LinkExternal href={getBscScanLink(proposal.snapshot, 'block')} ml=\"8px\">\r\n            {proposal.snapshot}\r\n          </LinkExternal>\r\n        </Flex>\r\n        <DetailBox p=\"16px\">\r\n          <ProposalStateTag proposalState={proposal.state} mb=\"8px\" />\r\n          <Flex alignItems=\"center\">\r\n            <Text color=\"textSubtle\" fontSize=\"14px\">\r\n              {t('Start Date')}\r\n            </Text>\r\n            <Text ml=\"8px\">{format(startDate, 'yyyy-MM-dd HH:mm')}</Text>\r\n          </Flex>\r\n          <Flex alignItems=\"center\">\r\n            <Text color=\"textSubtle\" fontSize=\"14px\">\r\n              {t('End Date')}\r\n            </Text>\r\n            <Text ml=\"8px\">{format(endDate, 'yyyy-MM-dd HH:mm')}</Text>\r\n          </Flex>\r\n        </DetailBox>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default Details\r\n","import styled from 'styled-components'\nimport { Text } from '@pancakeswap/uikit'\n\nconst TextEllipsis = styled(Text)`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`\n\nexport default TextEllipsis\n","import React from 'react'\r\nimport {\r\n  Box,\r\n  Text,\r\n  Flex,\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  Heading,\r\n  Progress,\r\n  Skeleton,\r\n  Tag,\r\n  CheckmarkCircleIcon,\r\n} from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport times from 'lodash/times'\r\nimport { Vote, VotingStateLoadingStatus } from 'state/types'\r\nimport { useGetVotingStateLoadingStatus } from 'state/voting/hooks'\r\nimport { formatNumber } from 'utils/formatBalance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { calculateVoteResults, getTotalFromVotes } from '../helpers'\r\nimport TextEllipsis from '../components/TextEllipsis'\r\n\r\ninterface ResultsProps {\r\n  choices: string[]\r\n  votes: Vote[]\r\n}\r\n\r\nconst Results: React.FC<ResultsProps> = ({ choices, votes }) => {\r\n  const { t } = useTranslation()\r\n  const results = calculateVoteResults(votes)\r\n  const votingStatus = useGetVotingStateLoadingStatus()\r\n  const { account } = useWeb3React()\r\n  const totalVotes = getTotalFromVotes(votes)\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <Heading as=\"h3\" scale=\"md\">\r\n          {t('Current Results')}\r\n        </Heading>\r\n      </CardHeader>\r\n      <CardBody>\r\n        {votingStatus === VotingStateLoadingStatus.IDLE &&\r\n          choices.map((choice, index) => {\r\n            const choiceVotes = results[choice] || []\r\n            const totalChoiceVote = getTotalFromVotes(choiceVotes)\r\n            const progress = totalVotes === 0 ? 0 : (totalChoiceVote / totalVotes) * 100\r\n            const hasVoted = choiceVotes.some((vote) => {\r\n              return account && vote.voter.toLowerCase() === account.toLowerCase()\r\n            })\r\n\r\n            return (\r\n              <Box key={choice} mt={index > 0 ? '24px' : '0px'}>\r\n                <Flex alignItems=\"center\" mb=\"8px\">\r\n                  <TextEllipsis mb=\"4px\" title={choice}>\r\n                    {choice}\r\n                  </TextEllipsis>\r\n                  {hasVoted && (\r\n                    <Tag variant=\"success\" outline ml=\"8px\">\r\n                      <CheckmarkCircleIcon mr=\"4px\" /> {t('Voted')}\r\n                    </Tag>\r\n                  )}\r\n                </Flex>\r\n                <Box mb=\"4px\">\r\n                  <Progress primaryStep={progress} scale=\"sm\" />\r\n                </Box>\r\n                <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n                  <Text color=\"textSubtle\">{t('%total% Votes', { total: formatNumber(totalChoiceVote, 0, 2) })}</Text>\r\n                  <Text>\r\n                    {progress.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}%\r\n                  </Text>\r\n                </Flex>\r\n              </Box>\r\n            )\r\n          })}\r\n\r\n        {votingStatus === VotingStateLoadingStatus.LOADING &&\r\n          times(choices.length).map((count, index) => {\r\n            return (\r\n              <Box key={count} mt={index > 0 ? '24px' : '0px'}>\r\n                <Skeleton height=\"36px\" mb=\"4px\" />\r\n              </Box>\r\n            )\r\n          })}\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default Results\r\n","import React from 'react'\r\nimport { IconButton, Text, Skeleton, Button, AutoRenewIcon, ChevronRightIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatNumber } from 'utils/formatBalance'\r\nimport TextEllipsis from '../TextEllipsis'\r\nimport { VotingBox, ModalInner } from './styles'\r\nimport { CastVoteModalProps } from './types'\r\n\r\ninterface MainViewProps {\r\n  vote: {\r\n    label: string\r\n    value: number\r\n  }\r\n  isLoading: boolean\r\n  isPending: boolean\r\n  total: number\r\n  onConfirm: () => void\r\n  onViewDetails: () => void\r\n  onDismiss: CastVoteModalProps['onDismiss']\r\n}\r\n\r\nconst MainView: React.FC<MainViewProps> = ({\r\n  vote,\r\n  total,\r\n  isPending,\r\n  isLoading,\r\n  onConfirm,\r\n  onViewDetails,\r\n  onDismiss,\r\n}) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <>\r\n      <ModalInner>\r\n        <Text color=\"secondary\" mb=\"8px\" textTransform=\"uppercase\" fontSize=\"12px\" bold>\r\n          {t('Voting For')}\r\n        </Text>\r\n        <TextEllipsis bold fontSize=\"20px\" mb=\"8px\" title={vote.label}>\r\n          {vote.label}\r\n        </TextEllipsis>\r\n        <Text color=\"secondary\" mb=\"8px\" textTransform=\"uppercase\" fontSize=\"12px\" bold>\r\n          {t('Your Voting Power')}\r\n        </Text>\r\n        {isLoading ? (\r\n          <Skeleton height=\"64px\" mb=\"24px\" />\r\n        ) : (\r\n          <VotingBox onClick={onViewDetails} style={{ cursor: 'pointer' }}>\r\n            <Text bold fontSize=\"20px\">\r\n              {formatNumber(total, 0, 3)}\r\n            </Text>\r\n            <IconButton scale=\"sm\" variant=\"text\">\r\n              <ChevronRightIcon width=\"24px\" />\r\n            </IconButton>\r\n          </VotingBox>\r\n        )}\r\n        <Text as=\"p\" color=\"textSubtle\" fontSize=\"14px\">\r\n          {t('Are you sure you want to vote for the above choice? This action cannot be undone.')}\r\n        </Text>\r\n      </ModalInner>\r\n      <Button\r\n        isLoading={isPending}\r\n        endIcon={isPending ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n        disabled={isLoading || total === 0}\r\n        width=\"100%\"\r\n        mb=\"8px\"\r\n        onClick={onConfirm}\r\n      >\r\n        {t('Confirm Vote')}\r\n      </Button>\r\n      <Button variant=\"secondary\" width=\"100%\" onClick={onDismiss}>\r\n        {t('Cancel')}\r\n      </Button>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default MainView\r\n","import React, { useState } from 'react'\r\nimport { Box, Modal } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { SnapshotCommand } from 'state/types'\r\nimport { signMessage } from 'utils/web3React'\r\nimport useToast from 'hooks/useToast'\r\nimport useWeb3Provider from 'hooks/useActiveWeb3React'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { CastVoteModalProps, ConfirmVoteView } from './types'\r\nimport MainView from './MainView'\r\nimport DetailsView from './DetailsView'\r\nimport { generatePayloadData, Message, sendSnapshotData } from '../../helpers'\r\nimport useGetVotingPower from '../../hooks/useGetVotingPower'\r\n\r\nconst CastVoteModal: React.FC<CastVoteModalProps> = ({ onSuccess, proposalId, vote, block, onDismiss }) => {\r\n  const [view, setView] = useState<ConfirmVoteView>(ConfirmVoteView.MAIN)\r\n  const [modalIsOpen, setModalIsOpen] = useState(true)\r\n  const [isPending, setIsPending] = useState(false)\r\n  const { account } = useWeb3React()\r\n  const { t } = useTranslation()\r\n  const { toastError } = useToast()\r\n  const { library } = useWeb3Provider()\r\n  const { theme } = useTheme()\r\n  const {\r\n    isLoading,\r\n    total,\r\n    cakeBalance,\r\n    cakeVaultBalance,\r\n    cakePoolBalance,\r\n    poolsBalance,\r\n    cakeBnbLpBalance,\r\n    verificationHash,\r\n  } = useGetVotingPower(block, modalIsOpen)\r\n\r\n  const isStartView = view === ConfirmVoteView.MAIN\r\n  const handleBack = isStartView ? null : () => setView(ConfirmVoteView.MAIN)\r\n  const handleViewDetails = () => setView(ConfirmVoteView.DETAILS)\r\n\r\n  const title = {\r\n    [ConfirmVoteView.MAIN]: t('Confirm Vote'),\r\n    [ConfirmVoteView.DETAILS]: t('Voting Power'),\r\n  }\r\n\r\n  const handleDismiss = () => {\r\n    setModalIsOpen(false)\r\n    onDismiss()\r\n  }\r\n\r\n  const handleConfirmVote = async () => {\r\n    try {\r\n      setIsPending(true)\r\n      const voteMsg = JSON.stringify({\r\n        ...generatePayloadData(),\r\n        type: SnapshotCommand.VOTE,\r\n        payload: {\r\n          proposal: proposalId,\r\n          choice: vote.value,\r\n          metadata: {\r\n            votingPower: total.toString(),\r\n            verificationHash,\r\n          },\r\n        },\r\n      })\r\n\r\n      const sig = await signMessage(library, account, voteMsg)\r\n      const msg: Message = { address: account, msg: voteMsg, sig }\r\n\r\n      // Save proposal to snapshot\r\n      await sendSnapshotData(msg)\r\n      setIsPending(false)\r\n\r\n      await onSuccess()\r\n\r\n      handleDismiss()\r\n    } catch (error) {\r\n      setIsPending(false)\r\n      toastError(t('Error'), error?.message)\r\n      console.error(error)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      title={title[view]}\r\n      onBack={handleBack}\r\n      onDismiss={onDismiss}\r\n      hideCloseButton={!isStartView}\r\n      headerBackground={theme.colors.gradients.cardHeader}\r\n    >\r\n      <Box mb=\"24px\" width=\"320px\">\r\n        {view === ConfirmVoteView.MAIN && (\r\n          <MainView\r\n            vote={vote}\r\n            isLoading={isLoading}\r\n            isPending={isPending}\r\n            total={total}\r\n            onConfirm={handleConfirmVote}\r\n            onViewDetails={handleViewDetails}\r\n            onDismiss={handleDismiss}\r\n          />\r\n        )}\r\n        {view === ConfirmVoteView.DETAILS && (\r\n          <DetailsView\r\n            total={total}\r\n            cakeBalance={cakeBalance}\r\n            cakeVaultBalance={cakeVaultBalance}\r\n            cakePoolBalance={cakePoolBalance}\r\n            poolsBalance={poolsBalance}\r\n            cakeBnbLpBalance={cakeBnbLpBalance}\r\n          />\r\n        )}\r\n      </Box>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default CastVoteModal\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, Card, CardBody, CardHeader, CardProps, Heading, Radio, Text, useModal } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { Proposal } from 'state/types'\r\nimport { fetchVotes } from 'state/voting'\r\nimport useToast from 'hooks/useToast'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport CastVoteModal from '../components/CastVoteModal'\r\n\r\ninterface VoteProps extends CardProps {\r\n  proposal: Proposal\r\n}\r\n\r\ninterface State {\r\n  label: string\r\n  value: number\r\n}\r\n\r\nconst Choice = styled.label<{ isChecked: boolean; isDisabled: boolean }>`\r\n  align-items: center;\r\n  border: 1px solid ${({ theme, isChecked }) => theme.colors[isChecked ? 'success' : 'cardBorder']};\r\n  border-radius: 16px;\r\n  cursor: ${({ isDisabled }) => (isDisabled ? 'not-allowed' : 'pointer')};\r\n  display: flex;\r\n  margin-bottom: 16px;\r\n  padding: 16px;\r\n`\r\n\r\nconst ChoiceText = styled.div`\r\n  flex: 1;\r\n  padding-left: 16px;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n  width: 0;\r\n`\r\n\r\nconst Vote: React.FC<VoteProps> = ({ proposal, ...props }) => {\r\n  const [vote, setVote] = useState<State>(null)\r\n  const { t } = useTranslation()\r\n  const { toastSuccess } = useToast()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  const handleSuccess = async () => {\r\n    toastSuccess(t('Vote cast!'))\r\n    dispatch(fetchVotes({ proposalId: proposal.id, block: Number(proposal.snapshot) }))\r\n  }\r\n\r\n  const [presentCastVoteModal] = useModal(\r\n    <CastVoteModal onSuccess={handleSuccess} proposalId={proposal.id} vote={vote} block={Number(proposal.snapshot)} />,\r\n  )\r\n\r\n  return (\r\n    <Card {...props}>\r\n      <CardHeader>\r\n        <Heading as=\"h3\" scale=\"md\">\r\n          {t('Cast your vote')}\r\n        </Heading>\r\n      </CardHeader>\r\n      <CardBody>\r\n        {proposal.choices.map((choice, index) => {\r\n          const isChecked = index + 1 === vote?.value\r\n\r\n          const handleChange = () => {\r\n            setVote({\r\n              label: choice,\r\n              value: index + 1,\r\n            })\r\n          }\r\n\r\n          return (\r\n            <Choice key={choice} isChecked={isChecked} isDisabled={!account}>\r\n              <div style={{ flexShrink: 0 }}>\r\n                <Radio scale=\"sm\" value={choice} checked={isChecked} onChange={handleChange} disabled={!account} />\r\n              </div>\r\n              <ChoiceText>\r\n                <Text as=\"span\" title={choice}>\r\n                  {choice}\r\n                </Text>\r\n              </ChoiceText>\r\n            </Choice>\r\n          )\r\n        })}\r\n        {account ? (\r\n          <Button onClick={presentCastVoteModal} disabled={vote === null}>\r\n            {t('Cast Vote')}\r\n          </Button>\r\n        ) : (\r\n          <ConnectWalletButton />\r\n        )}\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default Vote\r\n","import React from 'react'\r\nimport { Box, Flex, Skeleton } from '@pancakeswap/uikit'\r\nimport times from 'lodash/times'\r\nimport styled from 'styled-components'\r\n\r\nconst Row = styled(Flex)`\r\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n  padding: 16px 24px;\r\n`\r\n\r\nconst StyledSkeleton = styled(Skeleton)`\r\n  flex: 1;\r\n`\r\n\r\nconst VotesLoading = () => {\r\n  return (\r\n    <Box>\r\n      {times(10).map((index) => (\r\n        <Row key={index}>\r\n          <Skeleton height=\"21px\" mr=\"32px\" width=\"100px\" />\r\n          <StyledSkeleton height=\"21px\" mr=\"32px\" width=\"100%\" />\r\n          <StyledSkeleton height=\"21px\" width=\"100%\" />\r\n        </Row>\r\n      ))}\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default VotesLoading\r\n","import styled from 'styled-components'\r\nimport { Grid, Box } from '@pancakeswap/uikit'\r\n\r\nexport const AddressColumn = styled(Box).attrs({ alignItems: 'center' })`\r\n  grid-area: address;\r\n`\r\n\r\nexport const ChoiceColumn = styled(Box)`\r\n  grid-area: choice;\r\n  overflow: hidden;\r\n`\r\n\r\nexport const VotingPowerColumn = styled(Box)`\r\n  justify-self: end;\r\n  grid-area: vote;\r\n`\r\n\r\nconst Row = styled(Grid)`\r\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n  grid-gap: 8px;\r\n  grid-template-areas:\r\n    'address address address'\r\n    'choice choice vote';\r\n  grid-template-columns: 1fr 1fr 120px;\r\n  padding: 8px 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    grid-gap: 16px;\r\n    grid-template-areas: 'address choice vote';\r\n    padding: 16px 24px;\r\n  }\r\n`\r\n\r\nexport default Row\r\n","import React from 'react'\r\nimport { Flex, LinkExternal, Text, Tag, CheckmarkCircleIcon } from '@pancakeswap/uikit'\r\nimport truncateHash from 'utils/truncateHash'\r\nimport { getBscScanLink } from 'utils'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Vote } from 'state/types'\r\nimport { IPFS_GATEWAY } from '../../config'\r\nimport TextEllipsis from '../TextEllipsis'\r\nimport Row, { AddressColumn, ChoiceColumn, VotingPowerColumn } from './Row'\r\n\r\ninterface VoteRowProps {\r\n  vote: Vote\r\n  isVoter: boolean\r\n}\r\n\r\nconst VoteRow: React.FC<VoteRowProps> = ({ vote, isVoter }) => {\r\n  const { t } = useTranslation()\r\n  const hasVotingPower = !!vote.metadata?.votingPower\r\n  const votingPower = hasVotingPower\r\n    ? parseFloat(vote.metadata.votingPower).toLocaleString(undefined, {\r\n        minimumFractionDigits: 0,\r\n        maximumFractionDigits: 3,\r\n      })\r\n    : '--'\r\n\r\n  return (\r\n    <Row>\r\n      <AddressColumn>\r\n        <Flex alignItems=\"center\">\r\n          <LinkExternal href={getBscScanLink(vote.voter, 'address')}>{truncateHash(vote.voter)}</LinkExternal>\r\n          {isVoter && (\r\n            <Tag variant=\"success\" outline ml=\"8px\">\r\n              <CheckmarkCircleIcon mr=\"4px\" /> {t('Voted')}\r\n            </Tag>\r\n          )}\r\n        </Flex>\r\n      </AddressColumn>\r\n      <ChoiceColumn>\r\n        <TextEllipsis title={vote.proposal.choices[vote.choice - 1]}>\r\n          {vote.proposal.choices[vote.choice - 1]}\r\n        </TextEllipsis>\r\n      </ChoiceColumn>\r\n      <VotingPowerColumn>\r\n        <Flex alignItems=\"center\" justifyContent=\"end\">\r\n          <Text title={vote.metadata.votingPower}>{votingPower}</Text>\r\n          {hasVotingPower && <LinkExternal href={`${IPFS_GATEWAY}/${vote.id}`} />}\r\n        </Flex>\r\n      </VotingPowerColumn>\r\n    </Row>\r\n  )\r\n}\r\n\r\nexport default VoteRow\r\n","import React, { useState } from 'react'\r\nimport {\r\n  AutoRenewIcon,\r\n  Card,\r\n  CardHeader,\r\n  ChevronDownIcon,\r\n  Flex,\r\n  Heading,\r\n  Button,\r\n  ChevronUpIcon,\r\n} from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport orderBy from 'lodash/orderBy'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Vote, VotingStateLoadingStatus } from 'state/types'\r\nimport { useGetVotingStateLoadingStatus } from 'state/voting/hooks'\r\nimport VotesLoading from '../components/Proposal/VotesLoading'\r\nimport VoteRow from '../components/Proposal/VoteRow'\r\n\r\nconst VOTES_PER_VIEW = 20\r\n\r\ninterface VotesProps {\r\n  votes: Vote[]\r\n}\r\n\r\nconst parseVotePower = (incomingVote: Vote) => {\r\n  let votingPower = parseFloat(incomingVote?.metadata?.votingPower)\r\n  if (!votingPower) votingPower = 0\r\n  return votingPower\r\n}\r\n\r\nconst Votes: React.FC<VotesProps> = ({ votes }) => {\r\n  const [showAll, setShowAll] = useState(false)\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const orderedVotes = orderBy(votes, [parseVotePower, 'created'], ['desc', 'desc'])\r\n  const displayVotes = showAll ? orderedVotes : orderedVotes.slice(0, VOTES_PER_VIEW)\r\n  const voteStatus = useGetVotingStateLoadingStatus()\r\n  const isFinished = voteStatus === VotingStateLoadingStatus.IDLE\r\n\r\n  const handleClick = () => {\r\n    setShowAll(!showAll)\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n          <Heading as=\"h3\" scale=\"md\">\r\n            {t('Votes (%count%)', { count: votes.length.toLocaleString() })}\r\n          </Heading>\r\n          {!isFinished && <AutoRenewIcon spin width=\"22px\" />}\r\n        </Flex>\r\n      </CardHeader>\r\n      {!isFinished && <VotesLoading />}\r\n\r\n      {isFinished && displayVotes.length > 0 && (\r\n        <>\r\n          {displayVotes.map((vote) => {\r\n            const isVoter = account && vote.voter.toLowerCase() === account.toLowerCase()\r\n            return <VoteRow key={vote.id} vote={vote} isVoter={isVoter} />\r\n          })}\r\n          <Flex alignItems=\"center\" justifyContent=\"center\" py=\"8px\" px=\"24px\">\r\n            <Button\r\n              width=\"100%\"\r\n              onClick={handleClick}\r\n              variant=\"text\"\r\n              endIcon={\r\n                showAll ? (\r\n                  <ChevronUpIcon color=\"primary\" width=\"21px\" />\r\n                ) : (\r\n                  <ChevronDownIcon color=\"primary\" width=\"21px\" />\r\n                )\r\n              }\r\n              disabled={!isFinished}\r\n            >\r\n              {showAll ? t('Hide') : t('See All')}\r\n            </Button>\r\n          </Flex>\r\n        </>\r\n      )}\r\n\r\n      {isFinished && displayVotes.length === 0 && (\r\n        <Flex alignItems=\"center\" justifyContent=\"center\" py=\"32px\">\r\n          <Heading as=\"h5\">{t('No votes found')}</Heading>\r\n        </Flex>\r\n      )}\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default Votes\r\n","import React, { useEffect } from 'react'\r\nimport { ArrowBackIcon, Box, Button, Flex, Heading } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Link, useParams } from 'react-router-dom'\r\nimport { useAppDispatch } from 'state'\r\nimport { ProposalState, VotingStateLoadingStatus } from 'state/types'\r\nimport {\r\n  useGetProposal,\r\n  useGetVotingStateLoadingStatus,\r\n  useGetVotes,\r\n  useGetProposalLoadingStatus,\r\n} from 'state/voting/hooks'\r\nimport { fetchProposal, fetchVotes } from 'state/voting'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Container from 'components/Layout/Container'\r\nimport ReactMarkdown from 'components/ReactMarkdown'\r\nimport PageLoader from 'components/Loader/PageLoader'\r\nimport { isCoreProposal } from '../helpers'\r\nimport { ProposalStateTag, ProposalTypeTag } from '../components/Proposals/tags'\r\nimport Layout from '../components/Layout'\r\nimport Details from './Details'\r\nimport Results from './Results'\r\nimport Vote from './Vote'\r\nimport Votes from './Votes'\r\nimport { PageMeta } from '../../../components/Layout/Page'\r\n\r\nconst Proposal = () => {\r\n  const { id }: { id: string } = useParams()\r\n  const proposal = useGetProposal(id)\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n  const votes = useGetVotes(id)\r\n  const voteLoadingStatus = useGetVotingStateLoadingStatus()\r\n  const proposalLoadingStatus = useGetProposalLoadingStatus()\r\n  const hasAccountVoted = account && votes.some((vote) => vote.voter.toLowerCase() === account.toLowerCase())\r\n  const { id: proposalId = null, snapshot = null } = proposal ?? {}\r\n  const isPageLoading =\r\n    voteLoadingStatus === VotingStateLoadingStatus.LOADING || proposalLoadingStatus === VotingStateLoadingStatus.LOADING\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchProposal(id))\r\n  }, [id, dispatch])\r\n\r\n  // We have to wait for the proposal to load before fetching the votes because we need to include the snapshot\r\n  useEffect(() => {\r\n    if (proposalId && snapshot) {\r\n      dispatch(fetchVotes({ proposalId, block: Number(snapshot) }))\r\n    }\r\n  }, [proposalId, snapshot, dispatch])\r\n\r\n  if (!proposal) {\r\n    return <PageLoader />\r\n  }\r\n\r\n  return (\r\n    <Container py=\"40px\">\r\n      <PageMeta />\r\n      <Box mb=\"40px\">\r\n        <Button as={Link} to=\"/voting\" variant=\"text\" startIcon={<ArrowBackIcon color=\"primary\" width=\"24px\" />} px=\"0\">\r\n          {t('Back to Vote Overview')}\r\n        </Button>\r\n      </Box>\r\n      <Layout>\r\n        <Box>\r\n          <Box mb=\"32px\">\r\n            <Flex alignItems=\"center\" mb=\"8px\">\r\n              <ProposalStateTag proposalState={proposal.state} />\r\n              <ProposalTypeTag isCoreProposal={isCoreProposal(proposal)} ml=\"8px\" />\r\n            </Flex>\r\n            <Heading as=\"h1\" scale=\"xl\" mb=\"16px\">\r\n              {proposal.title}\r\n            </Heading>\r\n            <Box>\r\n              <ReactMarkdown>{proposal.body}</ReactMarkdown>\r\n            </Box>\r\n          </Box>\r\n          {!isPageLoading && !hasAccountVoted && proposal.state === ProposalState.ACTIVE && (\r\n            <Vote proposal={proposal} mb=\"16px\" />\r\n          )}\r\n          <Votes votes={votes} />\r\n        </Box>\r\n        <Box>\r\n          <Details proposal={proposal} />\r\n          <Results choices={proposal.choices} votes={votes} />\r\n        </Box>\r\n      </Layout>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Proposal\r\n","import { SNAPSHOT_HUB_API, SNAPSHOT_VOTING_API } from 'config/constants/endpoints'\r\nimport tokens from 'config/constants/tokens'\r\nimport { Proposal, ProposalState, ProposalType, Vote } from 'state/types'\r\nimport { simpleRpcProvider } from 'utils/providers'\r\nimport { ADMINS, PANCAKE_SPACE, SNAPSHOT_VERSION } from './config'\r\n\r\nexport const isCoreProposal = (proposal: Proposal) => {\r\n  return ADMINS.includes(proposal.author.toLowerCase())\r\n}\r\n\r\nexport const filterProposalsByType = (proposals: Proposal[], proposalType: ProposalType) => {\r\n  switch (proposalType) {\r\n    case ProposalType.COMMUNITY:\r\n      return proposals.filter((proposal) => !isCoreProposal(proposal))\r\n    case ProposalType.CORE:\r\n      return proposals.filter((proposal) => isCoreProposal(proposal))\r\n    case ProposalType.ALL:\r\n    default:\r\n      return proposals\r\n  }\r\n}\r\n\r\nexport const filterProposalsByState = (proposals: Proposal[], state: ProposalState) => {\r\n  return proposals.filter((proposal) => proposal.state === state)\r\n}\r\n\r\nexport interface Message {\r\n  address: string\r\n  msg: string\r\n  sig: string\r\n}\r\n\r\n/**\r\n * Generates metadata required by snapshot to validate payload\r\n */\r\nexport const generateMetaData = () => {\r\n  return {\r\n    plugins: {},\r\n    network: 56,\r\n    strategies: [{ name: 'cake', params: { symbol: 'CAKE', address: tokens.cake.address, decimals: 18 } }],\r\n  }\r\n}\r\n\r\n/**\r\n * Returns data that is required on all snapshot payloads\r\n */\r\nexport const generatePayloadData = () => {\r\n  return {\r\n    version: SNAPSHOT_VERSION,\r\n    timestamp: (Date.now() / 1e3).toFixed(),\r\n    space: PANCAKE_SPACE,\r\n  }\r\n}\r\n\r\n/**\r\n * General function to send commands to the snapshot api\r\n */\r\nexport const sendSnapshotData = async (message: Message) => {\r\n  const response = await fetch(SNAPSHOT_HUB_API, {\r\n    method: 'post',\r\n    headers: {\r\n      Accept: 'application/json',\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(message),\r\n  })\r\n\r\n  if (!response.ok) {\r\n    const error = await response.json()\r\n    throw new Error(error?.error_description)\r\n  }\r\n\r\n  const data = await response.json()\r\n  return data\r\n}\r\n\r\nexport const getVotingPower = async (account: string, poolAddresses: string[], block?: number) => {\r\n  const blockNumber = block || (await simpleRpcProvider.getBlockNumber())\r\n  const response = await fetch(`${SNAPSHOT_VOTING_API}/power`, {\r\n    method: 'post',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({\r\n      address: account,\r\n      block: blockNumber,\r\n      poolAddresses,\r\n    }),\r\n  })\r\n  const data = await response.json()\r\n  return data.data\r\n}\r\n\r\nexport const calculateVoteResults = (votes: Vote[]): { [key: string]: Vote[] } => {\r\n  return votes.reduce((accum, vote) => {\r\n    const choiceText = vote.proposal.choices[vote.choice - 1]\r\n\r\n    return {\r\n      ...accum,\r\n      [choiceText]: accum[choiceText] ? [...accum[choiceText], vote] : [vote],\r\n    }\r\n  }, {})\r\n}\r\n\r\nexport const getTotalFromVotes = (votes: Vote[]) => {\r\n  return votes.reduce((accum, vote) => {\r\n    let power = parseFloat(vote.metadata?.votingPower)\r\n\r\n    if (!power) {\r\n      power = 0\r\n    }\r\n\r\n    return accum + power\r\n  }, 0)\r\n}\r\n","export const PROPOSALS_TO_SHOW = 10\nexport const ADMINS = [\n  '0x842B508681eE336E74600974B4623B709477d29D', // TARO\n  '0x977e0c1005dff8749f8cac22f4df0bd5f013d1a7', // CHUNGUS\n  '0x6eaf1b33b8672c5dc40ab8f4ba3a0111723126c7', // HOPS\n].map((address) => address.toLowerCase())\nexport const IPFS_GATEWAY = 'https://gateway.ipfs.io/ipfs'\nexport const SNAPSHOT_VERSION = '0.1.3'\nexport const PANCAKE_SPACE = 'cake.eth'\nexport const VOTE_THRESHOLD = 10\n"],"sourceRoot":""}