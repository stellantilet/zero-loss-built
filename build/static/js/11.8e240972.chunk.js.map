{"version":3,"sources":["components/AddressInputSelect/index.tsx","views/Nft/market/components/MarketPageHeader.tsx","views/Nft/market/components/StatBox.tsx","views/Nft/market/components/BannerHeader/AvatarImage.tsx","views/Nft/market/hooks/useGetCollectionDistribution.tsx","views/Nft/market/components/SearchBar.tsx","views/Nft/market/components/MarketPageTitle.tsx","views/Nft/market/components/BaseSubMenu.tsx","views/Nft/market/components/BannerHeader/BannerImage.tsx","views/Nft/market/components/BannerHeader/index.tsx","views/Nft/market/hooks/useAllPancakeBunnyNfts.ts","../node_modules/lodash/capitalize.js","views/Nft/market/Collection/TopBar.tsx","views/Nft/market/Collection/LowestPriceStatBoxItem.tsx","views/Nft/market/Collection/Header.tsx","views/Nft/market/Collection/Items/PancakeBunniesCollectionNfts.tsx","components/ScrollToTopButton/index.tsx","views/Nft/market/components/Filters/ListFilter/styles.tsx","views/Nft/market/components/Filters/ListFilter/index.tsx","views/Nft/market/Collection/Items/ClearAllButton.tsx","views/Nft/market/Collection/Items/SortSelect.tsx","views/Nft/market/Collection/Items/Filters.tsx","views/Nft/market/Collection/config.ts","views/Nft/market/Collection/Items/CollectionNfts.tsx","views/Nft/market/Collection/Items/FilteredCollectionNfts.tsx","views/Nft/market/Collection/Items/CollectionWrapper.tsx","views/Nft/market/Collection/Items/index.tsx","views/Nft/market/components/GridPlaceholder.tsx"],"names":["ResultStatus","SubMenu","styled","div","theme","colors","input","inputSecondary","radii","default","isOpen","AddressLink","Text","initialState","isFetching","resultFound","NOT_VALID","value","defaultValidAddressHandler","Promise","resolve","AddressInputSelect","onValidAddress","onAddressClick","props","useState","state","setState","t","useTranslation","useEffect","isAddress","a","prevState","hasResults","FOUND","NOT_FOUND","validAddressHandler","position","placeholder","subject","toLowerCase","onChange","evt","newValue","target","style","zIndex","paddingRight","top","right","onClick","px","fontWeight","MarketPageHeader","background","useTheme","isDark","StatBoxItem","title","stat","fontSize","color","textAlign","height","width","mx","StatBox","Flex","invertedContrast","cardBorder","card","AvatarImage","attrs","alt","src","borderColor","useGetCollectionDistributionPB","data","getCollectionDistributionApi","pancakeBunniesAddress","apiResponse","fetchTokens","useGetCollectionDistribution","collectionAddress","SearchBar","history","useHistory","push","nftsBaseUrl","MarketPageTitle","description","children","gridGap","alignItems","gridTemplateColumns","as","scale","mb","BaseSubMenu","SubMenuItems","StyledBannerImage","mediaQueries","sm","md","BannerHeader","bannerImage","bannerAlt","avatar","flexDirection","pb","BannerImage","bottom","left","useAllPancakeBunnyNfts","allPancakeBunnyNfts","setAllPancakeBunnyNfts","isPBCollection","getNftsFromCollectionApi","bunnyIds","Object","keys","getAllPancakeBunniesLowestPrice","lowestPrices","getAllPancakeBunniesRecentUpdatedAt","latestUpdates","allBunnies","map","bunnyId","tokenId","name","collectionName","collection","image","attributes","traitType","displayType","meta","currentAskPrice","updatedAt","fetchPancakeBunnies","toString","require","upperFirst","module","exports","string","BackLink","RouterLink","primary","TopBar","justifyContent","to","LowestPriceStatBoxItem","lowestPrice","setLowestPrice","getLowestPriceInCollection","lowestCollectionPrice","fetchLowestPrice","formattedLowestPrice","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","symbol","Header","useParams","totalSupply","numberTokensListed","totalVolumeBNB","banner","useLocation","pathname","hash","volume","parseFloat","itemsConfig","label","href","large","formatNumber","Number","address","Container","items","activeItem","mt","PancakeBunniesCollectionNfts","sortBy","sortedNfts","orderBy","nft","length","GridPlaceholder","FixedContainer","ScrollToTopButton","visible","setVisible","toggleVisible","scrolled","document","documentElement","scrollTop","window","addEventListener","removeEventListener","display","variant","endIcon","scrollTo","behavior","StyledItemRow","ItemImage","Image","ItemRow","item","isSelected","onSelect","py","mr","flex","count","checked","noop","ml","SearchWrapper","dropdown","FilterButton","TriggerButton","Button","hasItem","CloseButton","IconButton","ListFilter","setIsOpen","query","setQuery","orderKey","orderDir","orderState","setOrderState","wrapperRef","useRef","menuRef","nftFilters","useGetNftFilters","nftFilterState","useGetNftFilterLoadingState","dispatch","useAppDispatch","traitFilter","isTraitSelected","filteredItems","filter","indexOf","toggleSort","newOrderKey","prevOrderDir","handleClickOutside","current","contains","ref","component","disabled","NftFilterLoadingState","LOADING","options","placement","maxWidth","p","startIcon","textTransform","overflowY","filteredItem","isItemSelected","attr","filterNftsFromCollection","handleItemSelect","newFilters","ClearAllButton","removeAllFilters","SortSelect","selectedOrder","useGetNftOrdering","sortByItems","field","direction","defaultOptionIndex","findIndex","option","Select","onOptionChange","newOption","setOrdering","GridContainer","Grid","lg","xxl","FilterByTitle","FilterByControls","Box","SortByTitle","SortByControls","ScrollableFlexContainer","Filters","showOnlyNftsOnSale","useGetNftShowOnlyOnSale","activeButtonIndex","setActiveButtonIndex","attrsByType","reduce","accum","uniqueTraitTypes","bold","activeIndex","onItemClick","newIndex","setShowOnlyOnSale","showOnlyOnSale","capitalize","isEmpty","REQUEST_SIZE","CollectionNfts","page","setPage","skip","setSkip","nfts","setNfts","isFetchingFilteredNfts","setIsFetchingFilteredNfts","collectionNfts","useNftsFromCollection","nftFilterLoadingState","orderField","orderDirection","fetchApiData","marketData","apiRequestPromises","marketNft","getNftApi","all","apiResponses","responsesWithMarketData","apiNft","i","combinedNfts","uniqBy","fetchMarketData","getNftsMarketData","isTradable","subgraphRes","fetchNftsFromCollections","size","nftsToShow","isNotLastPage","resultsAmount","currentAskPriceAsNumber","prevPage","spin","FilteredCollectionNfts","numToShow","setNumToShow","orderedNfts","Infinity","tokenIdNumber","isFinite","parseInt","filteredNfts","slice","prevNumToShow","CollectionWrapper","createPortal","body","Items","setSortBy","useGetCollection","fetchCollection","minWidth","GridPlaceholderItem","numItems","times","itemKey"],"mappings":"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","file":"static/js/11.8e240972.chunk.js","sourcesContent":["import React, { ChangeEvent, useState, useEffect } from 'react'\r\nimport { Box, BoxProps, Text, Input } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { isAddress } from 'utils'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport CircleLoader from 'components/Loader/CircleLoader'\r\n\r\nenum ResultStatus {\r\n  NOT_VALID,\r\n  FOUND,\r\n  NOT_FOUND,\r\n}\r\n\r\ninterface AddressInputSelectProps extends BoxProps {\r\n  onValidAddress?: (value: string) => Promise<boolean>\r\n  onAddressClick: (value: string) => void\r\n}\r\n\r\nconst SubMenu = styled.div<{ isOpen: boolean }>`\r\n  align-items: center;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n  border-radius: 0 0 ${({ theme }) => theme.radii.default} ${({ theme }) => theme.radii.default};\r\n  left: 0;\r\n  padding-bottom: 8px;\r\n  padding-top: 16px;\r\n  position: absolute;\r\n  top: calc(100% - 12px);\r\n  transition: transform 0.15s, opacity 0.15s;\r\n  transform: scaleY(0);\r\n  transform-origin: top;\r\n  width: 100%;\r\n  z-index: 15;\r\n\r\n  ${({ isOpen }) =>\r\n    isOpen &&\r\n    `\r\n    height: auto;\r\n    opacity: 1;\r\n    transform: scaleY(1);\r\n  `}\r\n`\r\n\r\nconst AddressLink = styled(Text)`\r\n  cursor: pointer;\r\n  overflow-wrap: break-word;\r\n  font-weight: bold;\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n`\r\n\r\nconst initialState = {\r\n  isFetching: false,\r\n  resultFound: ResultStatus.NOT_VALID,\r\n  value: '',\r\n}\r\n\r\nconst defaultValidAddressHandler = () => Promise.resolve(true)\r\n\r\nconst AddressInputSelect: React.FC<AddressInputSelectProps> = ({\r\n  onValidAddress = defaultValidAddressHandler,\r\n  onAddressClick,\r\n  ...props\r\n}) => {\r\n  const [state, setState] = useState(initialState)\r\n  const { t } = useTranslation()\r\n  const { isFetching, resultFound, value } = state\r\n\r\n  const handleChange = (evt: ChangeEvent<HTMLInputElement>) => {\r\n    const { value: newValue } = evt.target\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      value: newValue,\r\n    }))\r\n  }\r\n\r\n  const handleClick = () => {\r\n    setState(initialState)\r\n    onAddressClick(state.value)\r\n  }\r\n\r\n  // When we have a valid address fetch the data\r\n  useEffect(() => {\r\n    const isValidAddress = isAddress(value) !== false\r\n\r\n    const validAddressHandler = async () => {\r\n      try {\r\n        setState((prevState) => ({ ...prevState, isFetching: true }))\r\n        const hasResults = await onValidAddress(value)\r\n\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          isFetching: false,\r\n          resultFound: hasResults ? ResultStatus.FOUND : ResultStatus.NOT_FOUND,\r\n        }))\r\n      } catch {\r\n        setState((prevState) => ({ ...prevState, isFetching: false }))\r\n      }\r\n    }\r\n\r\n    if (isValidAddress) {\r\n      validAddressHandler()\r\n    } else {\r\n      setState((prevState) => ({ ...prevState, resultFound: ResultStatus.NOT_VALID }))\r\n    }\r\n  }, [value, onValidAddress, setState])\r\n\r\n  return (\r\n    <Box position=\"relative\" {...props}>\r\n      <Input\r\n        placeholder={t('Search %subject%', { subject: t('Address').toLowerCase() })}\r\n        value={state.value}\r\n        onChange={handleChange}\r\n        style={{ position: 'relative', zIndex: 16, paddingRight: '40px' }}\r\n      />\r\n      {isFetching && (\r\n        <Box position=\"absolute\" top=\"12px\" right=\"16px\" style={{ zIndex: 17 }}>\r\n          <CircleLoader />\r\n        </Box>\r\n      )}\r\n      <SubMenu isOpen={resultFound !== ResultStatus.NOT_VALID}>\r\n        {resultFound === ResultStatus.FOUND ? (\r\n          <AddressLink onClick={handleClick}>{state.value}</AddressLink>\r\n        ) : (\r\n          <Text px=\"16px\" fontWeight=\"bold\">\r\n            {t('No results found.')}\r\n          </Text>\r\n        )}\r\n      </SubMenu>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default AddressInputSelect\r\n","import React from 'react'\r\nimport PageHeader, { PageHeaderProps } from 'components/PageHeader'\r\nimport useTheme from 'hooks/useTheme'\r\n\r\nconst MarketPageHeader: React.FC<PageHeaderProps> = (props) => {\r\n  const { theme } = useTheme()\r\n  const background = theme.isDark\r\n    ? 'linear-gradient(166.77deg, #3B4155 0%, #3A3045 100%)'\r\n    : 'linear-gradient(111.68deg, #f2ecf2 0%, #e8f2f6 100%)'\r\n  return <PageHeader background={background} {...props} />\r\n}\r\n\r\nexport default MarketPageHeader\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box, BoxProps, Flex, Skeleton, Text } from '@pancakeswap/uikit'\r\n\r\nexport interface StatBoxItemProps extends BoxProps {\r\n  title: string\r\n  stat: string\r\n}\r\n\r\nexport const StatBoxItem: React.FC<StatBoxItemProps> = ({ title, stat, ...props }) => (\r\n  <Box {...props}>\r\n    <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"center\">\r\n      {title}\r\n    </Text>\r\n    {stat === null ? (\r\n      <Skeleton height=\"24px\" width=\"50%\" mx=\"auto\" />\r\n    ) : (\r\n      <Text fontWeight=\"600\" textAlign=\"center\">\r\n        {stat}\r\n      </Text>\r\n    )}\r\n  </Box>\r\n)\r\n\r\nconst StatBox = styled(Flex)`\r\n  align-items: center;\r\n  background: ${({ theme }) => theme.colors.invertedContrast};\r\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n  border-radius: ${({ theme }) => theme.radii.card};\r\n  justify-content: space-around;\r\n  padding: 8px;\r\n  width: 100%;\r\n`\r\n\r\nexport default StatBox\r\n","import styled from 'styled-components'\n\ninterface AvatarImageProps {\n  src: string\n  borderColor?: string\n  alt?: string\n}\n\nconst AvatarImage = styled.div.attrs<AvatarImageProps>(({ alt }) => ({\n  alt,\n}))<AvatarImageProps>`\n  background: url('${({ src }) => src}');\n  background-repeat: no-repeat;\n  background-size: cover;\n  border-radius: 50%;\n  position: relative;\n  width: 96px;\n  height: 96px;\n  border: 4px ${({ borderColor }) => borderColor || '#f2ecf2'} solid;\n\n  & > img {\n    border-radius: 50%;\n  }\n`\n\nexport default AvatarImage\n","import { useEffect, useState } from 'react'\r\nimport { getCollectionDistributionApi } from 'state/nftMarket/helpers'\r\nimport { ApiCollectionDistribution, ApiCollectionDistributionPB } from 'state/nftMarket/types'\r\nimport { pancakeBunniesAddress } from '../constants'\r\n\r\ninterface State {\r\n  isFetching: boolean\r\n  data: ApiCollectionDistribution['data']\r\n}\r\n\r\nconst useGetCollectionDistribution = (collectionAddress: string) => {\r\n  const [state, setState] = useState<State>({ isFetching: false, data: null })\r\n\r\n  useEffect(() => {\r\n    const fetchTokens = async () => {\r\n      setState((prevState) => ({ ...prevState, isFetching: true }))\r\n      const apiResponse = await getCollectionDistributionApi<ApiCollectionDistribution>(collectionAddress)\r\n      setState({\r\n        isFetching: false,\r\n        data: apiResponse.data,\r\n      })\r\n    }\r\n\r\n    fetchTokens()\r\n  }, [collectionAddress, setState])\r\n\r\n  return state\r\n}\r\n\r\ninterface StatePB {\r\n  isFetching: boolean\r\n  data: ApiCollectionDistributionPB['data']\r\n}\r\n\r\nexport const useGetCollectionDistributionPB = () => {\r\n  const [state, setState] = useState<StatePB>({ isFetching: false, data: null })\r\n\r\n  useEffect(() => {\r\n    const fetchTokens = async () => {\r\n      setState((prevState) => ({ ...prevState, isFetching: true }))\r\n      const apiResponse = await getCollectionDistributionApi<ApiCollectionDistributionPB>(pancakeBunniesAddress)\r\n      setState({\r\n        isFetching: false,\r\n        data: apiResponse.data,\r\n      })\r\n    }\r\n\r\n    fetchTokens()\r\n  }, [setState])\r\n\r\n  return state\r\n}\r\n\r\nexport default useGetCollectionDistribution\r\n","import React from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport AddressInputSelect from 'components/AddressInputSelect'\r\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\r\n\r\nconst SearchBar: React.FC = (props) => {\r\n  const history = useHistory()\r\n\r\n  const handleAddressClick = (value: string) => {\r\n    history.push(`${nftsBaseUrl}/profile/${value}`)\r\n  }\r\n\r\n  return <AddressInputSelect onAddressClick={handleAddressClick} {...props} />\r\n}\r\n\r\nexport default SearchBar\r\n","import React, { ReactNode } from 'react'\r\nimport { Box, Grid, GridProps, Heading } from '@pancakeswap/uikit'\r\n\r\ninterface MarketPageTitleProps extends GridProps {\r\n  title: string\r\n  description?: ReactNode\r\n}\r\n\r\nconst MarketPageTitle: React.FC<MarketPageTitleProps> = ({ title, description, children, ...props }) => (\r\n  <Grid gridGap=\"16px\" alignItems=\"center\" gridTemplateColumns={['1fr', null, null, null, 'repeat(2, 1fr)']} {...props}>\r\n    <Box>\r\n      <Heading as=\"h1\" scale=\"xl\" color=\"secondary\" mb=\"16px\">\r\n        {title}\r\n      </Heading>\r\n      {description}\r\n    </Box>\r\n    <Box>{children}</Box>\r\n  </Grid>\r\n)\r\n\r\nexport default MarketPageTitle\r\n","import { SubMenuItems } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nconst BaseSubMenu = styled(SubMenuItems)`\n  background-color: transparent;\n  border-bottom: 1px ${({ theme }) => theme.colors.cardBorder} solid;\n`\n\nexport default BaseSubMenu\n","import styled from 'styled-components'\r\n\r\ninterface StyledBannerImageProps {\r\n  src: string\r\n  alt?: string\r\n}\r\n\r\nconst StyledBannerImage = styled.div.attrs<StyledBannerImageProps>(({ alt }) => ({\r\n  alt,\r\n}))<StyledBannerImageProps>`\r\n  ${({ src, theme }) => (src ? `background-image: url('${src}')` : `background-color: ${theme.colors.cardBorder}`)};\r\n  background-image: url('${({ src }) => src}');\r\n  background-size: cover;\r\n  background-position: center;\r\n  background-repeat: no-repeat;\r\n  flex: none;\r\n  width: 100%;\r\n  border-radius: 32px;\r\n  height: 123px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    height: 192px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    height: 256px;\r\n  }\r\n`\r\n\r\nexport default StyledBannerImage\r\n","import React, { ReactNode } from 'react'\r\nimport { Flex, Box, FlexProps } from '@pancakeswap/uikit'\r\nimport BannerImage from './BannerImage'\r\n\r\ninterface BannerHeaderProps extends FlexProps {\r\n  bannerImage: string\r\n  bannerAlt?: string\r\n  avatar?: ReactNode\r\n}\r\n\r\nconst BannerHeader: React.FC<BannerHeaderProps> = ({ bannerImage, bannerAlt, avatar, children, ...props }) => {\r\n  return (\r\n    <Flex flexDirection=\"column\" mb=\"24px\" {...props}>\r\n      <Box position=\"relative\" pb=\"56px\">\r\n        <BannerImage src={bannerImage} alt={bannerAlt} />\r\n        <Box position=\"absolute\" bottom={0} left={-4}>\r\n          <Flex alignItems=\"flex-end\">\r\n            {avatar}\r\n            {children}\r\n          </Flex>\r\n        </Box>\r\n      </Box>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default BannerHeader\r\n","import { useState, useEffect } from 'react'\nimport {\n  getAllPancakeBunniesLowestPrice,\n  getAllPancakeBunniesRecentUpdatedAt,\n  getNftsFromCollectionApi,\n} from 'state/nftMarket/helpers'\nimport { NftToken } from 'state/nftMarket/types'\nimport { pancakeBunniesAddress } from '../constants'\n\n// If collection is PancakeBunnies - gets all available bunnies, otherwise - null\nconst useAllPancakeBunnyNfts = (collectionAddress: string) => {\n  const [allPancakeBunnyNfts, setAllPancakeBunnyNfts] = useState<NftToken[]>(null)\n\n  const isPBCollection = collectionAddress === pancakeBunniesAddress\n\n  useEffect(() => {\n    const fetchPancakeBunnies = async () => {\n      // In order to not define special TS type just for PancakeBunnies display we're hacking a little bit into NftToken type.\n      // On this page we just want to display all bunnies with their lowest prices and updates on the market\n      // Since some bunnies might not be on the market at all, we don't refer to the redux nfts state (which stores NftToken with actual token ids)\n      // We merely request from API all available bunny ids with their metadata and query subgraph for lowest price and latest updates.\n      const { data } = await getNftsFromCollectionApi(pancakeBunniesAddress)\n      const bunnyIds = Object.keys(data)\n      const lowestPrices = await getAllPancakeBunniesLowestPrice(bunnyIds)\n      const latestUpdates = await getAllPancakeBunniesRecentUpdatedAt(bunnyIds)\n      const allBunnies: NftToken[] = bunnyIds.map((bunnyId) => {\n        return {\n          // tokenId here is just a dummy one to satisfy TS. TokenID does not play any role in gird display below\n          tokenId: data[bunnyId].name,\n          name: data[bunnyId].name,\n          description: data[bunnyId].description,\n          collectionAddress: pancakeBunniesAddress,\n          collectionName: data[bunnyId].collection.name,\n          image: data[bunnyId].image,\n          attributes: [\n            {\n              traitType: 'bunnyId',\n              value: bunnyId,\n              displayType: null,\n            },\n          ],\n          meta: {\n            currentAskPrice: lowestPrices[bunnyId],\n            updatedAt: latestUpdates[bunnyId],\n          },\n        }\n      })\n      setAllPancakeBunnyNfts(allBunnies)\n    }\n    if (isPBCollection && !allPancakeBunnyNfts) {\n      fetchPancakeBunnies()\n    }\n  }, [isPBCollection, allPancakeBunnyNfts])\n\n  return allPancakeBunnyNfts\n}\n\nexport default useAllPancakeBunnyNfts\n","var toString = require('./toString'),\n    upperFirst = require('./upperFirst');\n\n/**\n * Converts the first character of `string` to upper case and the remaining\n * to lower case.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to capitalize.\n * @returns {string} Returns the capitalized string.\n * @example\n *\n * _.capitalize('FRED');\n * // => 'Fred'\n */\nfunction capitalize(string) {\n  return upperFirst(toString(string).toLowerCase());\n}\n\nmodule.exports = capitalize;\n","import React from 'react'\r\nimport { Box, ChevronLeftIcon, Flex } from '@pancakeswap/uikit'\r\nimport { Link as RouterLink } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\r\nimport SearchBar from '../components/SearchBar'\r\n\r\nconst BackLink = styled(RouterLink)`\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.colors.primary};\r\n  display: inline-flex;\r\n  font-weight: 600;\r\n`\r\n\r\nconst TopBar: React.FC = () => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"24px\">\r\n      <BackLink to={`${nftsBaseUrl}/collections`}>\r\n        <ChevronLeftIcon color=\"primary\" width=\"24px\" />\r\n        {t('All Collections')}\r\n      </BackLink>\r\n      <Box>\r\n        <SearchBar />\r\n      </Box>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default TopBar\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getLowestPriceInCollection } from 'state/nftMarket/helpers'\r\nimport { StatBoxItem, StatBoxItemProps } from '../components/StatBox'\r\n\r\ninterface LowestPriceStatBoxItemProps extends Omit<StatBoxItemProps, 'title' | 'stat'> {\r\n  collectionAddress: string\r\n}\r\n\r\nconst LowestPriceStatBoxItem: React.FC<LowestPriceStatBoxItemProps> = ({ collectionAddress, ...props }) => {\r\n  const [lowestPrice, setLowestPrice] = useState<number>(null)\r\n  const { t } = useTranslation()\r\n\r\n  useEffect(() => {\r\n    const fetchLowestPrice = async () => {\r\n      const lowestCollectionPrice = await getLowestPriceInCollection(collectionAddress)\r\n      setLowestPrice(lowestCollectionPrice)\r\n    }\r\n\r\n    fetchLowestPrice()\r\n  }, [collectionAddress, setLowestPrice])\r\n\r\n  const formattedLowestPrice =\r\n    lowestPrice === null\r\n      ? null\r\n      : lowestPrice.toLocaleString(undefined, {\r\n          minimumFractionDigits: 3,\r\n          maximumFractionDigits: 3,\r\n        })\r\n\r\n  return <StatBoxItem title={t('Lowest (%symbol%)', { symbol: 'BNB' })} stat={formattedLowestPrice} {...props} />\r\n}\r\n\r\nexport default LowestPriceStatBoxItem\r\n","import React from 'react'\r\nimport { useLocation, useParams } from 'react-router'\r\nimport { Text } from '@pancakeswap/uikit'\r\nimport { Collection } from 'state/nftMarket/types'\r\nimport { formatNumber } from 'utils/formatBalance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Container from 'components/Layout/Container'\r\nimport MarketPageHeader from '../components/MarketPageHeader'\r\nimport MarketPageTitle from '../components/MarketPageTitle'\r\nimport StatBox, { StatBoxItem } from '../components/StatBox'\r\nimport BannerHeader from '../components/BannerHeader'\r\nimport AvatarImage from '../components/BannerHeader/AvatarImage'\r\nimport BaseSubMenu from '../components/BaseSubMenu'\r\nimport { nftsBaseUrl } from '../constants'\r\nimport TopBar from './TopBar'\r\nimport LowestPriceStatBoxItem from './LowestPriceStatBoxItem'\r\n\r\ninterface HeaderProps {\r\n  collection: Collection\r\n}\r\n\r\nconst Header: React.FC<HeaderProps> = ({ collection }) => {\r\n  const { collectionAddress } = useParams<{ collectionAddress: string }>()\r\n  const { totalSupply, numberTokensListed, totalVolumeBNB, banner, avatar } = collection\r\n  const { t } = useTranslation()\r\n  const { pathname, hash } = useLocation()\r\n\r\n  const volume = totalVolumeBNB\r\n    ? parseFloat(totalVolumeBNB).toLocaleString(undefined, {\r\n        minimumFractionDigits: 3,\r\n        maximumFractionDigits: 3,\r\n      })\r\n    : '0'\r\n\r\n  const itemsConfig = [\r\n    {\r\n      label: t('Items'),\r\n      href: `${nftsBaseUrl}/collections/${collectionAddress}#items`,\r\n    },\r\n    {\r\n      label: t('Traits'),\r\n      href: `${nftsBaseUrl}/collections/${collectionAddress}#traits`,\r\n    },\r\n  ]\r\n\r\n  return (\r\n    <>\r\n      <MarketPageHeader>\r\n        <TopBar />\r\n        <BannerHeader bannerImage={banner.large} avatar={<AvatarImage src={avatar} />} />\r\n        <MarketPageTitle\r\n          title={collection.name}\r\n          description={collection.description ? <Text color=\"textSubtle\">{t(collection.description)}</Text> : null}\r\n        >\r\n          <StatBox>\r\n            <StatBoxItem title={t('Items')} stat={formatNumber(Number(totalSupply), 0, 0)} />\r\n            <StatBoxItem\r\n              title={t('Items listed')}\r\n              stat={numberTokensListed ? formatNumber(Number(numberTokensListed), 0, 0) : '0'}\r\n            />\r\n            <LowestPriceStatBoxItem collectionAddress={collection.address} />\r\n            <StatBoxItem title={t('Vol. (%symbol%)', { symbol: 'BNB' })} stat={volume} />\r\n          </StatBox>\r\n        </MarketPageTitle>\r\n      </MarketPageHeader>\r\n      <Container>\r\n        <BaseSubMenu items={itemsConfig} activeItem={`${pathname}${hash || '#items'}`} mt=\"24px\" mb=\"8px\" />\r\n      </Container>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport { Grid } from '@pancakeswap/uikit'\r\nimport orderBy from 'lodash/orderBy'\r\nimport { Collection } from 'state/nftMarket/types'\r\nimport { CollectibleLinkCard } from '../../components/CollectibleCard'\r\nimport useAllPancakeBunnyNfts from '../../hooks/useAllPancakeBunnyNfts'\r\nimport GridPlaceholder from '../../components/GridPlaceholder'\r\n\r\ninterface CollectionNftsProps {\r\n  collection: Collection\r\n  sortBy?: string\r\n}\r\n\r\nconst PancakeBunniesCollectionNfts: React.FC<CollectionNftsProps> = ({ collection, sortBy = 'updatedAt' }) => {\r\n  const { address } = collection\r\n  const allPancakeBunnyNfts = useAllPancakeBunnyNfts(address)\r\n\r\n  const sortedNfts = allPancakeBunnyNfts\r\n    ? orderBy(allPancakeBunnyNfts, (nft) => (nft.meta[sortBy] ? Number(nft?.meta[sortBy]) : 0), [\r\n        sortBy === 'currentAskPrice' ? 'asc' : 'desc',\r\n      ])\r\n    : []\r\n\r\n  if (!sortedNfts.length) {\r\n    return <GridPlaceholder />\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        gridGap=\"16px\"\r\n        gridTemplateColumns={['1fr', null, 'repeat(3, 1fr)', null, 'repeat(4, 1fr)']}\r\n        alignItems=\"start\"\r\n      >\r\n        {sortedNfts.map((nft) => {\r\n          return <CollectibleLinkCard key={`${nft.tokenId}-${nft.collectionName}`} nft={nft} />\r\n        })}\r\n      </Grid>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PancakeBunniesCollectionNfts\r\n","import React, { useState, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, ChevronUpIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst FixedContainer = styled.div`\r\n  position: fixed;\r\n  right: 5%;\r\n  bottom: 60px;\r\n`\r\n\r\nconst ScrollToTopButton = () => {\r\n  const [visible, setVisible] = useState(false)\r\n  const { t } = useTranslation()\r\n\r\n  const toggleVisible = () => {\r\n    const scrolled = document.documentElement.scrollTop\r\n    if (scrolled > 700) {\r\n      setVisible(true)\r\n    } else if (scrolled <= 700) {\r\n      setVisible(false)\r\n    }\r\n  }\r\n\r\n  const scrollToTop = () => {\r\n    window.scrollTo({\r\n      top: 400,\r\n      behavior: 'auto',\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', toggleVisible)\r\n\r\n    return () => window.removeEventListener('scroll', toggleVisible)\r\n  }, [])\r\n\r\n  return (\r\n    <FixedContainer style={{ display: visible ? 'inline' : 'none' }}>\r\n      <Button variant=\"subtle\" endIcon={<ChevronUpIcon color=\"invertedContrast\" />} onClick={scrollToTop}>\r\n        {t('To Top')}\r\n      </Button>\r\n    </FixedContainer>\r\n  )\r\n}\r\n\r\nexport default ScrollToTopButton\r\n","import React from 'react'\r\nimport { Radio, Flex, Image, Text } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport noop from 'lodash/noop'\r\nimport { formatNumber } from 'utils/formatBalance'\r\nimport { Item } from './types'\r\n\r\nconst StyledItemRow = styled(Flex)`\r\n  cursor: pointer;\r\n  user-select: none;\r\n`\r\n\r\nconst ItemImage = styled(Image)`\r\n  border-radius: 50%;\r\n`\r\n\r\ninterface ItemRowProps {\r\n  item: Item\r\n  isSelected: boolean\r\n  onSelect: () => void\r\n}\r\n\r\nexport const ItemRow: React.FC<ItemRowProps> = ({ item, isSelected, onSelect }) => (\r\n  <StyledItemRow alignItems=\"center\" px=\"16px\" py=\"8px\" onClick={onSelect}>\r\n    {item.image && <ItemImage src={item.image} height={48} width={48} mr=\"16px\" />}\r\n    <Text style={{ flex: 1 }}>{item.label}</Text>\r\n    {item.count !== undefined && (\r\n      <Text color=\"textSubtle\" px=\"8px\">\r\n        {formatNumber(item.count, 0, 0)}\r\n      </Text>\r\n    )}\r\n    <Radio name=\"item-select\" scale=\"sm\" checked={isSelected} value={item.label} onChange={noop} ml=\"24px\" />\r\n  </StyledItemRow>\r\n)\r\n\r\nexport const SearchWrapper = styled(Flex)`\r\n  background: ${({ theme }) => theme.colors.dropdown};\r\n  border-radius: 24px 24px 0 0;\r\n`\r\n\r\nexport const FilterButton = styled(Flex)`\r\n  align-items: center;\r\n  cursor: pointer;\r\n  user-select: none;\r\n\r\n  svg {\r\n    pointer-events: none;\r\n  }\r\n`\r\n","import React, { ChangeEvent, useEffect, useRef, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport {\r\n  Box,\r\n  Button,\r\n  Text,\r\n  Flex,\r\n  InlineMenu,\r\n  Input,\r\n  InputGroup,\r\n  SearchIcon,\r\n  IconButton,\r\n  CloseIcon,\r\n  ArrowUpIcon,\r\n  ArrowDownIcon,\r\n} from '@pancakeswap/uikit'\r\nimport orderBy from 'lodash/orderBy'\r\nimport { useAppDispatch } from 'state'\r\nimport { filterNftsFromCollection } from 'state/nftMarket/reducer'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useGetNftFilterLoadingState, useGetNftFilters } from 'state/nftMarket/hooks'\r\nimport { NftFilterLoadingState } from 'state/nftMarket/types'\r\nimport { FilterButton, ItemRow, SearchWrapper } from './styles'\r\nimport { Item } from './types'\r\n\r\ninterface ListFilterProps {\r\n  title?: string\r\n  traitType: string\r\n  items: Item[]\r\n  collectionAddress: string\r\n}\r\n\r\ninterface State {\r\n  orderKey: string\r\n  orderDir: 'asc' | 'desc'\r\n}\r\n\r\nconst TriggerButton = styled(Button)<{ hasItem: boolean }>`\r\n  ${({ hasItem }) =>\r\n    hasItem &&\r\n    `  \r\n    border-top-right-radius: 0;\r\n    border-bottom-right-radius: 0;\r\n    padding-right: 8px;\r\n  `}\r\n`\r\n\r\nconst CloseButton = styled(IconButton)`\r\n  border-top-left-radius: 0;\r\n  border-bottom-left-radius: 0;\r\n`\r\n\r\nexport const ListFilter: React.FC<ListFilterProps> = ({ title, traitType, items, collectionAddress }) => {\r\n  const { t } = useTranslation()\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const [query, setQuery] = useState('')\r\n  const [orderState, setOrderState] = useState<State>({ orderKey: 'count', orderDir: 'asc' })\r\n  const wrapperRef = useRef(null)\r\n  const menuRef = useRef(null)\r\n  const nftFilters = useGetNftFilters(collectionAddress)\r\n  const nftFilterState = useGetNftFilterLoadingState(collectionAddress)\r\n  const dispatch = useAppDispatch()\r\n  const { orderKey, orderDir } = orderState\r\n\r\n  const traitFilter = nftFilters[traitType]\r\n  const isTraitSelected = !!traitFilter\r\n\r\n  const filteredItems =\r\n    query && query.length > 1\r\n      ? items.filter((item) => item.label.toLowerCase().indexOf(query.toLowerCase()) !== -1)\r\n      : items\r\n\r\n  const handleClearItem = () => {\r\n    const newFilters = { ...nftFilters }\r\n\r\n    delete newFilters[traitType]\r\n\r\n    dispatch(\r\n      filterNftsFromCollection({\r\n        collectionAddress,\r\n        nftFilters: newFilters,\r\n      }),\r\n    )\r\n  }\r\n\r\n  const handleMenuClick = () => setIsOpen(!isOpen)\r\n\r\n  const handleChange = (evt: ChangeEvent<HTMLInputElement>) => {\r\n    const { value } = evt.target\r\n    setQuery(value)\r\n  }\r\n\r\n  const handleItemSelect = ({ attr }: Item) => {\r\n    dispatch(\r\n      filterNftsFromCollection({\r\n        collectionAddress,\r\n        nftFilters: { ...nftFilters, [traitType]: attr },\r\n      }),\r\n    )\r\n  }\r\n\r\n  const toggleSort = (newOrderKey: string) => () => {\r\n    setOrderState((prevOrderDir) => {\r\n      if (prevOrderDir.orderKey !== newOrderKey) {\r\n        return {\r\n          orderKey: newOrderKey,\r\n          orderDir: 'asc',\r\n        }\r\n      }\r\n\r\n      return {\r\n        orderKey: newOrderKey,\r\n        orderDir: prevOrderDir.orderDir === 'asc' ? 'desc' : 'asc',\r\n      }\r\n    })\r\n  }\r\n\r\n  // @TODO Fix this in the Toolkit\r\n  // This is a fix to ensure the \"isOpen\" value is aligned with the menus's (to avoid a double click)\r\n  useEffect(() => {\r\n    const handleClickOutside = ({ target }: Event) => {\r\n      if (\r\n        wrapperRef.current &&\r\n        menuRef.current &&\r\n        !menuRef.current.contains(target) &&\r\n        !wrapperRef.current.contains(target)\r\n      ) {\r\n        setIsOpen(false)\r\n      }\r\n    }\r\n\r\n    document.addEventListener('click', handleClickOutside)\r\n\r\n    return () => {\r\n      document.removeEventListener('click', handleClickOutside)\r\n    }\r\n  }, [setIsOpen, wrapperRef, menuRef])\r\n\r\n  return (\r\n    <Flex alignItems=\"center\" mr=\"4px\" mb=\"4px\">\r\n      <Box ref={wrapperRef}>\r\n        <InlineMenu\r\n          component={\r\n            <TriggerButton\r\n              onClick={handleMenuClick}\r\n              variant={isTraitSelected ? 'subtle' : 'light'}\r\n              scale=\"sm\"\r\n              disabled={nftFilterState === NftFilterLoadingState.LOADING}\r\n              hasItem={isTraitSelected}\r\n            >\r\n              {title}\r\n            </TriggerButton>\r\n          }\r\n          isOpen={isOpen}\r\n          options={{ placement: 'bottom' }}\r\n        >\r\n          <Box maxWidth=\"375px\" ref={menuRef}>\r\n            <SearchWrapper alignItems=\"center\" p=\"16px\">\r\n              <InputGroup startIcon={<SearchIcon color=\"textSubtle\" />}>\r\n                <Input name=\"query\" placeholder={t('Search')} onChange={handleChange} value={query} />\r\n              </InputGroup>\r\n            </SearchWrapper>\r\n            <Flex alignItems=\"center\" p=\"16px\">\r\n              <FilterButton onClick={toggleSort('label')} style={{ flex: 1 }}>\r\n                <Text fontSize=\"12px\" color=\"secondary\" fontWeight=\"bold\" textTransform=\"uppercase\">\r\n                  {t('Name')}\r\n                </Text>\r\n                <Box width=\"18px\">\r\n                  {orderKey === 'label' && orderDir === 'asc' && <ArrowUpIcon width=\"18px\" color=\"secondary\" />}\r\n                  {orderKey === 'label' && orderDir === 'desc' && <ArrowDownIcon width=\"18px\" color=\"secondary\" />}\r\n                </Box>\r\n              </FilterButton>\r\n              <FilterButton onClick={toggleSort('count')}>\r\n                <Text fontSize=\"12px\" color=\"secondary\" fontWeight=\"bold\" textTransform=\"uppercase\">\r\n                  {t('Count')}\r\n                </Text>\r\n                <Box width=\"18px\">\r\n                  {orderKey === 'count' && orderDir === 'asc' && <ArrowUpIcon width=\"18px\" color=\"secondary\" />}\r\n                  {orderKey === 'count' && orderDir === 'desc' && <ArrowDownIcon width=\"18px\" color=\"secondary\" />}\r\n                </Box>\r\n              </FilterButton>\r\n            </Flex>\r\n            <Box height=\"240px\" overflowY=\"auto\">\r\n              {filteredItems.length > 0 ? (\r\n                orderBy(filteredItems, orderKey, orderDir).map((filteredItem) => {\r\n                  const handleSelect = () => handleItemSelect(filteredItem)\r\n                  const isItemSelected = traitFilter ? traitFilter.value === filteredItem.attr.value : false\r\n\r\n                  return (\r\n                    <ItemRow\r\n                      key={filteredItem.label}\r\n                      item={filteredItem}\r\n                      isSelected={isItemSelected}\r\n                      onSelect={handleSelect}\r\n                    />\r\n                  )\r\n                })\r\n              ) : (\r\n                <Flex alignItems=\"center\" justifyContent=\"center\" height=\"230px\">\r\n                  <Text color=\"textDisabled\" textAlign=\"center\">\r\n                    {t('No results found')}\r\n                  </Text>\r\n                </Flex>\r\n              )}\r\n            </Box>\r\n          </Box>\r\n        </InlineMenu>\r\n      </Box>\r\n      {isTraitSelected && (\r\n        <CloseButton\r\n          variant={isTraitSelected ? 'subtle' : 'light'}\r\n          scale=\"sm\"\r\n          onClick={handleClearItem}\r\n          disabled={nftFilterState === NftFilterLoadingState.LOADING}\r\n        >\r\n          <CloseIcon color=\"currentColor\" width=\"18px\" />\r\n        </CloseButton>\r\n      )}\r\n    </Flex>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Button, ButtonProps } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { removeAllFilters } from 'state/nftMarket/reducer'\r\nimport { useGetNftFilterLoadingState } from 'state/nftMarket/hooks'\r\nimport { NftFilterLoadingState } from 'state/nftMarket/types'\r\n\r\ninterface ClearAllButtonProps extends ButtonProps {\r\n  collectionAddress: string\r\n}\r\n\r\nconst ClearAllButton: React.FC<ClearAllButtonProps> = ({ collectionAddress, ...props }) => {\r\n  const dispatch = useAppDispatch()\r\n  const { t } = useTranslation()\r\n  const nftFilterState = useGetNftFilterLoadingState(collectionAddress)\r\n\r\n  const clearAll = () => {\r\n    dispatch(removeAllFilters(collectionAddress))\r\n  }\r\n\r\n  return (\r\n    <Button\r\n      key=\"clear-all\"\r\n      variant=\"text\"\r\n      scale=\"sm\"\r\n      onClick={clearAll}\r\n      disabled={nftFilterState === NftFilterLoadingState.LOADING}\r\n      {...props}\r\n    >\r\n      {t('Clear')}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default ClearAllButton\r\n","import React from 'react'\r\nimport Select, { OptionProps } from 'components/Select/Select'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { setOrdering } from 'state/nftMarket/reducer'\r\nimport { useGetNftOrdering } from 'state/nftMarket/hooks'\r\n\r\nconst SortSelect: React.FC<{ collectionAddress: string }> = ({ collectionAddress }) => {\r\n  const dispatch = useAppDispatch()\r\n  const { t } = useTranslation()\r\n  const selectedOrder = useGetNftOrdering(collectionAddress)\r\n  const handleChange = (newOption: OptionProps) => {\r\n    const { field, direction } = newOption.value\r\n    dispatch(setOrdering({ collection: collectionAddress, field, direction }))\r\n  }\r\n\r\n  const sortByItems = [\r\n    { label: t('Recently listed'), value: { field: 'updatedAt', direction: 'desc' } },\r\n    { label: t('Lowest price'), value: { field: 'currentAskPrice', direction: 'asc' } },\r\n    { label: t('Highest price'), value: { field: 'currentAskPrice', direction: 'desc' } },\r\n    { label: t('Token ID'), value: { field: 'tokenId', direction: 'asc' } },\r\n  ]\r\n\r\n  const defaultOptionIndex = sortByItems.findIndex(\r\n    (option) => option.value.field === selectedOrder.field && option.value.direction === selectedOrder.direction,\r\n  )\r\n\r\n  return (\r\n    <Select\r\n      options={sortByItems}\r\n      onOptionChange={handleChange}\r\n      defaultOptionIndex={defaultOptionIndex !== -1 ? defaultOptionIndex : undefined}\r\n    />\r\n  )\r\n}\r\n\r\nexport default SortSelect\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box, ButtonMenu, ButtonMenuItem, Flex, Grid, Text } from '@pancakeswap/uikit'\r\nimport capitalize from 'lodash/capitalize'\r\nimport isEmpty from 'lodash/isEmpty'\r\nimport { useGetNftFilters, useGetNftShowOnlyOnSale } from 'state/nftMarket/hooks'\r\nimport { Collection, NftAttribute } from 'state/nftMarket/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Item, ListFilter } from 'views/Nft/market/components/Filters'\r\nimport { useAppDispatch } from 'state'\r\nimport { setShowOnlyOnSale } from 'state/nftMarket/reducer'\r\nimport useGetCollectionDistribution from '../../hooks/useGetCollectionDistribution'\r\nimport ClearAllButton from './ClearAllButton'\r\nimport SortSelect from './SortSelect'\r\n\r\ninterface FiltersProps {\r\n  collection: Collection\r\n}\r\n\r\nconst GridContainer = styled(Grid)`\r\n  margin-bottom: 16px;\r\n  padding: 0 16px;\r\n  grid-gap: 8px 16px;\r\n  grid-template-columns: 1fr 1fr;\r\n  grid-template-areas:\r\n    'filterByTitle .'\r\n    'attributeFilters attributeFilters'\r\n    '. sortByTitle'\r\n    'filterByControls sortByControls';\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    grid-template-columns: 1fr 1fr 1fr;\r\n    grid-template-areas:\r\n      'filterByTitle . .'\r\n      'attributeFilters attributeFilters attributeFilters'\r\n      '. . sortByTitle'\r\n      'filterByControls . sortByControls';\r\n  }\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    grid-template-columns: 2fr 5fr 1fr;\r\n    grid-template-areas:\r\n      'filterByTitle . .'\r\n      'filterByControls attributeFilters attributeFilters'\r\n      '. . sortByTitle'\r\n      '. . sortByControls';\r\n  }\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    grid-template-columns: 1.3fr 5fr 1fr;\r\n    grid-template-areas:\r\n      'filterByTitle . sortByTitle'\r\n      'filterByControls attributeFilters sortByControls';\r\n  }\r\n  ${({ theme }) => theme.mediaQueries.xxl} {\r\n    grid-template-columns: 1fr 5fr 1fr;\r\n  }\r\n`\r\n\r\nconst FilterByTitle = styled(Text)`\r\n  grid-area: filterByTitle;\r\n`\r\n\r\nconst FilterByControls = styled(Box)`\r\n  grid-area: filterByControls;\r\n`\r\n\r\nconst SortByTitle = styled(Text)`\r\n  grid-area: sortByTitle;\r\n`\r\n\r\nconst SortByControls = styled(Box)`\r\n  grid-area: sortByControls;\r\n`\r\n\r\nconst ScrollableFlexContainer = styled(Flex)`\r\n  grid-area: attributeFilters;\r\n  align-items: center;\r\n  flex: 1;\r\n  flex-wrap: nowrap;\r\n  overflow-x: auto;\r\n  -webkit-overflow-scrolling: touch;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    flex-wrap: wrap;\r\n    overflow-x: revert;\r\n  }\r\n`\r\n\r\nconst Filters: React.FC<FiltersProps> = ({ collection }) => {\r\n  const { address } = collection\r\n  const dispatch = useAppDispatch()\r\n  const { data } = useGetCollectionDistribution(address)\r\n  const { t } = useTranslation()\r\n  const showOnlyNftsOnSale = useGetNftShowOnlyOnSale(address)\r\n  const [activeButtonIndex, setActiveButtonIndex] = useState(showOnlyNftsOnSale ? 1 : 0)\r\n\r\n  const onActiveButtonChange = (newIndex: number) => {\r\n    dispatch(setShowOnlyOnSale({ collection: address, showOnlyOnSale: newIndex === 1 }))\r\n    setActiveButtonIndex(newIndex)\r\n  }\r\n\r\n  const nftFilters = useGetNftFilters(address)\r\n  const attrsByType: Record<string, NftAttribute[]> = collection?.attributes?.reduce(\r\n    (accum, attr) => ({\r\n      ...accum,\r\n      [attr.traitType]: accum[attr.traitType] ? [...accum[attr.traitType], attr] : [attr],\r\n    }),\r\n    {},\r\n  )\r\n  const uniqueTraitTypes = attrsByType ? Object.keys(attrsByType) : []\r\n\r\n  return (\r\n    <GridContainer>\r\n      <FilterByTitle textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" bold>\r\n        {t('Filter by')}\r\n      </FilterByTitle>\r\n      <FilterByControls>\r\n        <ButtonMenu scale=\"sm\" activeIndex={activeButtonIndex} onItemClick={onActiveButtonChange}>\r\n          <ButtonMenuItem>{t('All')}</ButtonMenuItem>\r\n          <ButtonMenuItem>{t('On Sale')}</ButtonMenuItem>\r\n        </ButtonMenu>\r\n      </FilterByControls>\r\n      <SortByTitle fontSize=\"12px\" textTransform=\"uppercase\" color=\"textSubtle\" fontWeight={600} mb=\"4px\">\r\n        {t('Sort By')}\r\n      </SortByTitle>\r\n      <SortByControls>\r\n        <SortSelect collectionAddress={address} />\r\n      </SortByControls>\r\n      <ScrollableFlexContainer>\r\n        {uniqueTraitTypes.map((traitType) => {\r\n          const attrs = attrsByType[traitType]\r\n          const items: Item[] = attrs.map((attr) => ({\r\n            label: capitalize(attr.value as string),\r\n            count: data && data[traitType] ? data[traitType][attr.value] : undefined,\r\n            attr,\r\n          }))\r\n\r\n          return (\r\n            <ListFilter\r\n              key={traitType}\r\n              title={capitalize(traitType)}\r\n              traitType={traitType}\r\n              items={items}\r\n              collectionAddress={address}\r\n            />\r\n          )\r\n        })}\r\n        {!isEmpty(nftFilters) && <ClearAllButton collectionAddress={address} mb=\"4px\" />}\r\n      </ScrollableFlexContainer>\r\n    </GridContainer>\r\n  )\r\n}\r\n\r\nexport default Filters\r\n","export const REQUEST_SIZE = 100\n","import React, { useEffect, useState } from 'react'\r\nimport uniqBy from 'lodash/uniqBy'\r\nimport { AutoRenewIcon, Button, Flex, Grid, Text } from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport {\r\n  useGetNftFilterLoadingState,\r\n  useGetNftOrdering,\r\n  useGetNftShowOnlyOnSale,\r\n  useNftsFromCollection,\r\n} from 'state/nftMarket/hooks'\r\nimport { Collection, NftFilterLoadingState, NftToken, TokenMarketData } from 'state/nftMarket/types'\r\nimport { fetchNftsFromCollections } from 'state/nftMarket/reducer'\r\nimport { getNftApi, getNftsMarketData } from 'state/nftMarket/helpers'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport GridPlaceholder from '../../components/GridPlaceholder'\r\nimport { CollectibleLinkCard } from '../../components/CollectibleCard'\r\nimport { REQUEST_SIZE } from '../config'\r\n\r\ninterface CollectionNftsProps {\r\n  collection: Collection\r\n}\r\n\r\nconst CollectionNfts: React.FC<CollectionNftsProps> = ({ collection }) => {\r\n  const { totalSupply, numberTokensListed, address: collectionAddress } = collection\r\n  const [page, setPage] = useState(1)\r\n  const [skip, setSkip] = useState(0)\r\n  const [nfts, setNfts] = useState<NftToken[]>([])\r\n  const [isFetchingFilteredNfts, setIsFetchingFilteredNfts] = useState(false)\r\n  const { t } = useTranslation()\r\n  const collectionNfts = useNftsFromCollection(collectionAddress)\r\n  const nftFilterLoadingState = useGetNftFilterLoadingState(collectionAddress)\r\n  const dispatch = useAppDispatch()\r\n\r\n  const showOnlyNftsOnSale = useGetNftShowOnlyOnSale(collectionAddress)\r\n  const { field: orderField, direction: orderDirection } = useGetNftOrdering(collectionAddress)\r\n  const isFetching =\r\n    orderField === 'tokenId' ? nftFilterLoadingState === NftFilterLoadingState.LOADING : isFetchingFilteredNfts\r\n\r\n  const handleLoadMore = () => {\r\n    if (orderField === 'tokenId') {\r\n      setPage((prevPage) => prevPage + 1)\r\n    }\r\n    setSkip(skip + REQUEST_SIZE)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (orderField === 'tokenId') {\r\n      setPage(1)\r\n    }\r\n  }, [orderField])\r\n\r\n  useEffect(() => {\r\n    setNfts([])\r\n    setSkip(0)\r\n  }, [orderField, orderDirection])\r\n\r\n  useEffect(() => {\r\n    const fetchApiData = async (marketData: TokenMarketData[]) => {\r\n      const apiRequestPromises = marketData.map((marketNft) => getNftApi(collectionAddress, marketNft.tokenId))\r\n      const apiResponses = await Promise.all(apiRequestPromises)\r\n      const responsesWithMarketData = apiResponses.map((apiNft, i) => {\r\n        return {\r\n          ...apiNft,\r\n          collectionAddress,\r\n          collectionName: apiNft.collection.name,\r\n          marketData: marketData[i],\r\n        }\r\n      })\r\n      setIsFetchingFilteredNfts(false)\r\n      setNfts((prevState) => {\r\n        const combinedNfts = [...prevState, ...responsesWithMarketData]\r\n        return uniqBy(combinedNfts, 'tokenId')\r\n      })\r\n    }\r\n\r\n    const fetchMarketData = async () => {\r\n      const subgraphRes = await getNftsMarketData(\r\n        { collection: collectionAddress.toLowerCase(), isTradable: true },\r\n        REQUEST_SIZE,\r\n        orderField,\r\n        orderDirection,\r\n        skip,\r\n      )\r\n      fetchApiData(subgraphRes)\r\n    }\r\n\r\n    if (orderField !== 'tokenId') {\r\n      // Query by tokenId is handled in useEffect below since we in this case\r\n      // we need to show all NFTs, even those that never been on sale (i.e. they are not in subgraph)\r\n      setIsFetchingFilteredNfts(true)\r\n      fetchMarketData()\r\n    }\r\n  }, [orderField, orderDirection, skip, collectionAddress])\r\n\r\n  useEffect(() => {\r\n    if (orderField === 'tokenId') {\r\n      dispatch(\r\n        fetchNftsFromCollections({\r\n          collectionAddress,\r\n          page,\r\n          size: REQUEST_SIZE,\r\n        }),\r\n      )\r\n    }\r\n  }, [page, collectionAddress, dispatch, orderField])\r\n\r\n  const nftsToShow =\r\n    orderField === 'tokenId'\r\n      ? collectionNfts?.filter((nft) => {\r\n          if (showOnlyNftsOnSale) {\r\n            return nft.marketData?.isTradable\r\n          }\r\n          return true\r\n        })\r\n      : nfts\r\n\r\n  if (!nftsToShow || nftsToShow?.length === 0) {\r\n    return <GridPlaceholder />\r\n  }\r\n\r\n  const isNotLastPage =\r\n    showOnlyNftsOnSale || orderField !== 'tokenId'\r\n      ? nftsToShow?.length < Number(numberTokensListed)\r\n      : nftsToShow?.length < Number(totalSupply)\r\n\r\n  const resultsAmount = showOnlyNftsOnSale || orderField !== 'tokenId' ? numberTokensListed : totalSupply\r\n\r\n  return (\r\n    <>\r\n      <Flex p=\"16px\">\r\n        <Text bold>\r\n          {resultsAmount} {t('Results')}\r\n        </Text>\r\n      </Flex>\r\n      <Grid\r\n        gridGap=\"16px\"\r\n        gridTemplateColumns={['1fr', null, 'repeat(3, 1fr)', null, 'repeat(4, 1fr)']}\r\n        alignItems=\"start\"\r\n      >\r\n        {nftsToShow.map((nft) => {\r\n          const currentAskPriceAsNumber = nft.marketData && parseFloat(nft.marketData.currentAskPrice)\r\n\r\n          return (\r\n            <CollectibleLinkCard\r\n              key={nft.tokenId}\r\n              nft={nft}\r\n              currentAskPrice={currentAskPriceAsNumber > 0 ? currentAskPriceAsNumber : undefined}\r\n            />\r\n          )\r\n        })}\r\n      </Grid>\r\n      <Flex mt=\"60px\" mb=\"12px\" justifyContent=\"center\">\r\n        {isNotLastPage && (\r\n          <Button\r\n            onClick={handleLoadMore}\r\n            scale=\"sm\"\r\n            endIcon={isFetching ? <AutoRenewIcon spin color=\"currentColor\" /> : undefined}\r\n          >\r\n            {isFetching ? t('Loading') : t('Load more')}\r\n          </Button>\r\n        )}\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CollectionNfts\r\n","import React, { useState } from 'react'\r\nimport orderBy from 'lodash/orderBy'\r\nimport { BunnyPlaceholderIcon, Button, Flex, Grid, Text } from '@pancakeswap/uikit'\r\nimport {\r\n  useGetNftFilterLoadingState,\r\n  useGetNftOrdering,\r\n  useGetNftShowOnlyOnSale,\r\n  useNftsFromCollection,\r\n} from 'state/nftMarket/hooks'\r\nimport { Collection, NftFilterLoadingState } from 'state/nftMarket/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport GridPlaceholder from '../../components/GridPlaceholder'\r\nimport { CollectibleLinkCard } from '../../components/CollectibleCard'\r\nimport { REQUEST_SIZE } from '../config'\r\n\r\ninterface FilteredCollectionNftsProps {\r\n  collection: Collection\r\n}\r\n\r\nconst FilteredCollectionNfts: React.FC<FilteredCollectionNftsProps> = ({ collection }) => {\r\n  const { address: collectionAddress } = collection\r\n  const [numToShow, setNumToShow] = useState(REQUEST_SIZE)\r\n  const { t } = useTranslation()\r\n  const selectedOrder = useGetNftOrdering(collectionAddress)\r\n  const showOnlyNftsOnSale = useGetNftShowOnlyOnSale(collectionAddress)\r\n  const collectionNfts = useNftsFromCollection(collectionAddress)\r\n  const nftFilterLoadingState = useGetNftFilterLoadingState(collectionAddress)\r\n\r\n  const handleLoadMore = () => {\r\n    setNumToShow((prevNumToShow) => prevNumToShow + REQUEST_SIZE)\r\n  }\r\n\r\n  if (nftFilterLoadingState === NftFilterLoadingState.LOADING) {\r\n    return <GridPlaceholder />\r\n  }\r\n\r\n  const orderedNfts = collectionNfts\r\n    ? orderBy(\r\n        collectionNfts,\r\n        (nft) => {\r\n          if (selectedOrder.field === 'currentAskPrice') {\r\n            const currentAskPriceAsNumber = nft.marketData?.currentAskPrice\r\n              ? parseFloat(nft.marketData?.currentAskPrice)\r\n              : 0\r\n            if (currentAskPriceAsNumber > 0) {\r\n              return parseFloat(nft.marketData.currentAskPrice)\r\n            }\r\n            return selectedOrder.direction === 'asc' ? Infinity : -Infinity\r\n          }\r\n          if (selectedOrder.field === 'tokenId') {\r\n            const tokenIdNumber = Number(nft.tokenId)\r\n            return Number.isFinite(tokenIdNumber) ? tokenIdNumber : 0\r\n          }\r\n          // recently listed sorting\r\n          return nft.marketData ? parseInt(nft.marketData[selectedOrder.field], 10) : 0\r\n        },\r\n        selectedOrder.direction,\r\n      )\r\n    : []\r\n\r\n  const filteredNfts = showOnlyNftsOnSale ? orderedNfts.filter((nft) => nft.marketData?.isTradable) : orderedNfts\r\n\r\n  const nftsToShow = filteredNfts.slice(0, numToShow)\r\n\r\n  return (\r\n    <>\r\n      <Flex p=\"16px\">\r\n        <Text bold>\r\n          {filteredNfts.length} {t('Results')}\r\n        </Text>\r\n      </Flex>\r\n      {nftsToShow.length > 0 ? (\r\n        <>\r\n          <Grid\r\n            gridGap=\"16px\"\r\n            gridTemplateColumns={['1fr', null, 'repeat(3, 1fr)', null, 'repeat(4, 1fr)']}\r\n            alignItems=\"start\"\r\n          >\r\n            {nftsToShow.map((nft) => {\r\n              const currentAskPriceAsNumber = nft.marketData && parseFloat(nft.marketData.currentAskPrice)\r\n\r\n              return (\r\n                <CollectibleLinkCard\r\n                  key={nft.tokenId}\r\n                  nft={nft}\r\n                  currentAskPrice={currentAskPriceAsNumber > 0 ? currentAskPriceAsNumber : undefined}\r\n                />\r\n              )\r\n            })}\r\n          </Grid>\r\n          <Flex mt=\"60px\" mb=\"12px\" justifyContent=\"center\">\r\n            {collectionNfts.length > numToShow && (\r\n              <Button onClick={handleLoadMore} scale=\"sm\">\r\n                {t('Load more')}\r\n              </Button>\r\n            )}\r\n          </Flex>\r\n        </>\r\n      ) : (\r\n        <Flex alignItems=\"center\" py=\"48px\" flexDirection=\"column\">\r\n          <BunnyPlaceholderIcon width=\"96px\" mb=\"24px\" />\r\n          <Text fontWeight={600}>{t('No NFTs found')}</Text>\r\n        </Flex>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default FilteredCollectionNfts\r\n","import React from 'react'\r\nimport { createPortal } from 'react-dom'\r\nimport { Box } from '@pancakeswap/uikit'\r\nimport isEmpty from 'lodash/isEmpty'\r\nimport { Collection } from 'state/nftMarket/types'\r\nimport { useGetNftFilters } from 'state/nftMarket/hooks'\r\nimport Container from 'components/Layout/Container'\r\nimport ScrollButton from 'components/ScrollToTopButton'\r\nimport Filters from './Filters'\r\nimport CollectionNfts from './CollectionNfts'\r\nimport FilteredCollectionNfts from './FilteredCollectionNfts'\r\n\r\ninterface CollectionWrapperProps {\r\n  collection: Collection\r\n}\r\n\r\nconst CollectionWrapper: React.FC<CollectionWrapperProps> = ({ collection }) => {\r\n  const nftFilters = useGetNftFilters(collection.address)\r\n\r\n  return (\r\n    <Box py=\"32px\">\r\n      <Container px={[0, null, '24px']}>\r\n        <Filters collection={collection} />\r\n      </Container>\r\n      <Container>\r\n        {isEmpty(nftFilters) ? (\r\n          <CollectionNfts collection={collection} />\r\n        ) : (\r\n          <FilteredCollectionNfts collection={collection} />\r\n        )}\r\n      </Container>\r\n      {createPortal(<ScrollButton />, document.body)}\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default CollectionWrapper\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useParams } from 'react-router'\r\nimport { Box, Flex, Text } from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchCollection } from 'state/nftMarket/reducer'\r\nimport { useGetCollection } from 'state/nftMarket/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Select, { OptionProps } from 'components/Select/Select'\r\nimport Container from 'components/Layout/Container'\r\nimport { pancakeBunniesAddress } from '../../constants'\r\nimport PancakeBunniesCollectionNfts from './PancakeBunniesCollectionNfts'\r\nimport Header from '../Header'\r\nimport CollectionWrapper from './CollectionWrapper'\r\n\r\nconst Items = () => {\r\n  const { collectionAddress } = useParams<{ collectionAddress: string }>()\r\n  const [sortBy, setSortBy] = useState('updatedAt')\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const collection = useGetCollection(collectionAddress)\r\n  const isPBCollection = collectionAddress.toLowerCase() === pancakeBunniesAddress.toLowerCase()\r\n\r\n  const { address } = collection || {}\r\n\r\n  const sortByItems = [\r\n    { label: t('Recently listed'), value: 'updatedAt' },\r\n    { label: t('Lowest price'), value: 'currentAskPrice' },\r\n  ]\r\n\r\n  const handleChange = (newOption: OptionProps) => {\r\n    setSortBy(newOption.value)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (address) {\r\n      dispatch(fetchCollection(address))\r\n    }\r\n  }, [address, dispatch])\r\n\r\n  return (\r\n    <>\r\n      <Header collection={collection} />\r\n      {isPBCollection ? (\r\n        <Container mb=\"24px\">\r\n          <Flex alignItems=\"center\" justifyContent={['flex-start', null, null, 'flex-end']} mb=\"24px\">\r\n            <Box minWidth=\"165px\">\r\n              <Text fontSize=\"12px\" textTransform=\"uppercase\" color=\"textSubtle\" fontWeight={600} mb=\"4px\">\r\n                {t('Sort By')}\r\n              </Text>\r\n              <Select options={sortByItems} onOptionChange={handleChange} />\r\n            </Box>\r\n          </Flex>\r\n          <PancakeBunniesCollectionNfts collection={collection} sortBy={sortBy} />\r\n        </Container>\r\n      ) : (\r\n        <CollectionWrapper collection={collection} />\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Items\r\n","import React from 'react'\r\nimport { Box, BoxProps, Grid, GridProps, Skeleton } from '@pancakeswap/uikit'\r\nimport times from 'lodash/times'\r\n\r\ninterface GridPlaceholderProps extends GridProps {\r\n  numItems?: number\r\n}\r\n\r\nexport const GridPlaceholderItem: React.FC<BoxProps> = (props) => (\r\n  <Box {...props}>\r\n    <Skeleton height=\"258px\" mb=\"8px\" />\r\n    <Skeleton width=\"30%\" mb=\"4px\" />\r\n    <Skeleton width=\"45%\" mb=\"16px\" />\r\n    <Skeleton />\r\n  </Box>\r\n)\r\n\r\nconst GridPlaceholder: React.FC<GridPlaceholderProps> = ({ numItems = 12, ...props }) => (\r\n  <Grid gridGap=\"16px\" gridTemplateColumns={['1fr', null, null, 'repeat(4, 1fr)']} {...props}>\r\n    {times(numItems).map((itemKey) => (\r\n      <GridPlaceholderItem key={itemKey} />\r\n    ))}\r\n  </Grid>\r\n)\r\n\r\nexport default GridPlaceholder\r\n"],"sourceRoot":""}